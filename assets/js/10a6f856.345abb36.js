"use strict";(self.webpackChunkarchetype_docs=self.webpackChunkarchetype_docs||[]).push([[5670],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,k=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(k,o(o({ref:t},c),{},{components:n})):a.createElement(k,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6792:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:1},p="Local variable",s={unversionedId:"reference/instructions/localvariable",id:"reference/instructions/localvariable",title:"Local variable",description:"Instructions presented below declare a local variable in entrypoints' effect section.",source:"@site/docs/reference/instructions/localvariable.md",sourceDirName:"reference/instructions",slug:"/reference/instructions/localvariable",permalink:"/docs/reference/instructions/localvariable",draft:!1,editUrl:"https://github.com/completium/archetype-docs/blob/main/docs/reference/instructions/localvariable.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docs",previous:{title:"Sequence",permalink:"/docs/reference/instructions/sequence"},next:{title:"Assignment",permalink:"/docs/reference/instructions/assignment"}},c={},m=[{value:"<code>var</code>",id:"var",level:2},{value:"<code>const</code>",id:"const",level:2},{value:"<code>?=</code> (get option, assign or fail)",id:"-get-option-assign-or-fail",level:2},{value:"Explicit error",id:"explicit-error",level:3},{value:"<code>detach as</code>",id:"detach-as",level:2}],d={toc:m};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"local-variable"},"Local variable"),(0,i.kt)("p",null,"Instructions presented below declare a ",(0,i.kt)("em",{parentName:"p"},"local")," variable in entrypoints' ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#effect"},"effect")," section."),(0,i.kt)("h2",{id:"var"},(0,i.kt)("inlineCode",{parentName:"h2"},"var")),(0,i.kt)("p",null,"A local variable is declared by the ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," keyword followed by the variable ",(0,i.kt)("a",{parentName:"p",href:"docs/reference/declarations/identifier"},"identifier")," and the initial value."),(0,i.kt)("p",null,"For example, the following declares a variable ",(0,i.kt)("inlineCode",{parentName:"p"},"counter")," with initial value ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"var counter = 0\n")),(0,i.kt)("p",null,"It is possible to specify the variable type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"var counter : nat = 0\n")),(0,i.kt)("p",null,"Specifying the type is ususally optional as the typer may ",(0,i.kt)("em",{parentName:"p"},"infer")," the type of the initial value. It is mandatory though for some types like ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#or%3CT1,%20T2%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"or")),", or some literals like ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#option%3CT%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"none"))," or ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#list%3CT%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"[]")),"."),(0,i.kt)("h2",{id:"const"},(0,i.kt)("inlineCode",{parentName:"h2"},"const")),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," except that a ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," local variable ",(0,i.kt)("em",{parentName:"p"},"cannot")," be modified by an ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/instructions/assignment"},"assignment")," instruction."),(0,i.kt)("p",null,"For example, the following instructions generates a compilation error:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"const amount = 10tz;\namount += 1tz        /* compilation error */\n")),(0,i.kt)("h2",{id:"-get-option-assign-or-fail"},(0,i.kt)("inlineCode",{parentName:"h2"},"?=")," (get option, assign or fail)"),(0,i.kt)("p",null,"It is possible to declare a local variable (",(0,i.kt)("inlineCode",{parentName:"p"},"const")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"var"),") as the ",(0,i.kt)("inlineCode",{parentName:"p"},"some")," value of an ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#option%3CT%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"option"))," variable, and fail with an error message if this variable is ",(0,i.kt)("inlineCode",{parentName:"p"},"none"),"."),(0,i.kt)("p",null,"For example, the following declares a ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," local variable as the some value of the execution of ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/expressions/builtins#unpack%3CT%3E(b%20:%20bytes)"},(0,i.kt)("inlineCode",{parentName:"a"},"unpack"))," buitlin which returns an option value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"const v ?= unpack<nat>(0x0505)\n")),(0,i.kt)("p",null,"By default, it fails with ",(0,i.kt)("inlineCode",{parentName:"p"},'"OPTION_IS_NONE"'),"."),(0,i.kt)("p",null,"It is equivalent to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'const v = 0;\nmatch unpack<nat>(0x0505) with\n| some(u) -> v := u\n| none    -> fail("OPTION_IS_NONE")\nend\n')),(0,i.kt)("h3",{id:"explicit-error"},"Explicit error"),(0,i.kt)("p",null,"It is possible to declare an explicit error message after the ",(0,i.kt)("inlineCode",{parentName:"p"},":")," character. The error message may be any ",(0,i.kt)("a",{parentName:"p",href:"/docs/language-basics/types#packable"},"packable")," value (not just a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#string"},(0,i.kt)("inlineCode",{parentName:"a"},"string")),")."),(0,i.kt)("p",null,"For example, suppose ",(0,i.kt)("inlineCode",{parentName:"p"},"m")," is a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#map%3CK,%20V%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"map"))," of type ",(0,i.kt)("inlineCode",{parentName:"p"},"map<T, nat>"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'var v ?= m[k] : ("KEY_NOT_FOUND", k)\n')),(0,i.kt)("p",null,"The above declaration fails with pair ",(0,i.kt)("inlineCode",{parentName:"p"},'("KEY_NOT_FOUND", k)'),". It is equivalent to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'var v = 0;\nmatch m[k] with\n| some(u) -> v := u\n| none    -> fail(("KEY_NOT_FOUND", k))\nend\n')),(0,i.kt)("h2",{id:"detach-as"},(0,i.kt)("inlineCode",{parentName:"h2"},"detach as")),(0,i.kt)("p",null,"It is possible to ",(0,i.kt)("em",{parentName:"p"},"detach")," a value of type ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#option%3CT%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"option")),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#map%3CK,%20V%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"map"))," or ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#big_map%3CK,%20V%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"big_map")),", and create a fresh local variable with it. The storage value is ",(0,i.kt)("em",{parentName:"p"},"mutated")," the following way:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"an ",(0,i.kt)("inlineCode",{parentName:"li"},"option")," value is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"none")),(0,i.kt)("li",{parentName:"ul"},"the entry is removed from the ",(0,i.kt)("inlineCode",{parentName:"li"},"map")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"big_map")," value")),(0,i.kt)("p",null,"It fails if the option is already ",(0,i.kt)("inlineCode",{parentName:"p"},"none")," or if the map entry does not exist."),(0,i.kt)("p",null,"For example on an ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'variable os : option<string> = some("Hello detach!")\nvariable res : string = ""\n\nentry exec() {\n  detach os as v : "ALREADY_NONE";\n  /* os is now \'none\' and v equals "Hello detach!" */\n  res := v\n  /* res is now "Hello detach!" */\n}\n')),(0,i.kt)("p",null,"For example on a ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'variable ms : map<nat, string> = [(0, "Hello detach!")]\nvariable res : string = ""\n\nentry exec() {\n  detach ms[0] as v : "KEY_DOES_NOT_EXIST";\n  /* ms[0] is now \'none\' and v equals "Hello detach!" */\n  res := v\n  /* res is now "Hello detach!" */\n}\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Note that it is the ",(0,i.kt)("strong",{parentName:"p"},"only")," way to get a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#ticket%3CT%3E"},"ticket")," from a storage or local container (option, map). For example:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'variable my_ticket : option<ticket<nat * option<bytes>>> = none\n\nentry transfer_ticket(fa2_1: address, to_ : address) {\n  detach my_ticket as t : "NO_TICKET";\n  transfer 0tz to fa2_1 call import_ticket<list<import_ticket_param>>([{\n    itp_to      = to_ ;\n    itp_tickets = t\n  }]);\n}\n')))),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"In current version, the detached value is limited to value of form:"),(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id[expr]"))),(0,i.kt)("p",{parentName:"div"},"where ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," is a simple identifier, and ",(0,i.kt)("inlineCode",{parentName:"p"},"expr")," is an expression."))))}u.isMDXComponent=!0}}]);