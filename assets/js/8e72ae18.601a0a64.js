"use strict";(self.webpackChunkarchetype_docs=self.webpackChunkarchetype_docs||[]).push([[3116],{4048:function(e,t,a){var n=a(5318);t.Z=void 0;var l=n(a(4938)),r=a(5893),o=(0,l.default)((0,r.jsx)("path",{d:"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"}),"OpenInNew");t.Z=o},1519:function(e,t,a){a.d(t,{Z:function(){return f}});var n=a(3366),l=a(7462),r=a(7294),o=a(6010),s=a(7192),p=a(1796),i=a(2110),d=a(1539),c=a(8979);function m(e){return(0,c.Z)("MuiDivider",e)}(0,a(6087).Z)("MuiDivider",["root","absolute","fullWidth","inset","middle","flexItem","light","vertical","withChildren","withChildrenVertical","textAlignRight","textAlignLeft","wrapper","wrapperVertical"]);var u=a(5893);const h=["absolute","children","className","component","flexItem","light","orientation","role","textAlign","variant"],k=(0,i.ZP)("div",{name:"MuiDivider",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.absolute&&t.absolute,t[a.variant],a.light&&t.light,"vertical"===a.orientation&&t.vertical,a.flexItem&&t.flexItem,a.children&&t.withChildren,a.children&&"vertical"===a.orientation&&t.withChildrenVertical,"right"===a.textAlign&&"vertical"!==a.orientation&&t.textAlignRight,"left"===a.textAlign&&"vertical"!==a.orientation&&t.textAlignLeft]}})((({theme:e,ownerState:t})=>(0,l.Z)({margin:0,flexShrink:0,borderWidth:0,borderStyle:"solid",borderColor:e.palette.divider,borderBottomWidth:"thin"},t.absolute&&{position:"absolute",bottom:0,left:0,width:"100%"},t.light&&{borderColor:(0,p.Fq)(e.palette.divider,.08)},"inset"===t.variant&&{marginLeft:72},"middle"===t.variant&&"horizontal"===t.orientation&&{marginLeft:e.spacing(2),marginRight:e.spacing(2)},"middle"===t.variant&&"vertical"===t.orientation&&{marginTop:e.spacing(1),marginBottom:e.spacing(1)},"vertical"===t.orientation&&{height:"100%",borderBottomWidth:0,borderRightWidth:"thin"},t.flexItem&&{alignSelf:"stretch",height:"auto"})),(({theme:e,ownerState:t})=>(0,l.Z)({},t.children&&{display:"flex",whiteSpace:"nowrap",textAlign:"center",border:0,"&::before, &::after":{position:"relative",width:"100%",borderTop:`thin solid ${e.palette.divider}`,top:"50%",content:'""',transform:"translateY(50%)"}})),(({theme:e,ownerState:t})=>(0,l.Z)({},t.children&&"vertical"===t.orientation&&{flexDirection:"column","&::before, &::after":{height:"100%",top:"0%",left:"50%",borderTop:0,borderLeft:`thin solid ${e.palette.divider}`,transform:"translateX(0%)"}})),(({ownerState:e})=>(0,l.Z)({},"right"===e.textAlign&&"vertical"!==e.orientation&&{"&::before":{width:"90%"},"&::after":{width:"10%"}},"left"===e.textAlign&&"vertical"!==e.orientation&&{"&::before":{width:"10%"},"&::after":{width:"90%"}}))),y=(0,i.ZP)("span",{name:"MuiDivider",slot:"Wrapper",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.wrapper,"vertical"===a.orientation&&t.wrapperVertical]}})((({theme:e,ownerState:t})=>(0,l.Z)({display:"inline-block",paddingLeft:`calc(${e.spacing(1)} * 1.2)`,paddingRight:`calc(${e.spacing(1)} * 1.2)`},"vertical"===t.orientation&&{paddingTop:`calc(${e.spacing(1)} * 1.2)`,paddingBottom:`calc(${e.spacing(1)} * 1.2)`})));var f=r.forwardRef((function(e,t){const a=(0,d.Z)({props:e,name:"MuiDivider"}),{absolute:r=!1,children:p,className:i,component:c=(p?"div":"hr"),flexItem:f=!1,light:v=!1,orientation:N="horizontal",role:_=("hr"!==c?"separator":void 0),textAlign:b="center",variant:g="fullWidth"}=a,x=(0,n.Z)(a,h),w=(0,l.Z)({},a,{absolute:r,component:c,flexItem:f,light:v,orientation:N,role:_,textAlign:b,variant:g}),Z=(e=>{const{absolute:t,children:a,classes:n,flexItem:l,light:r,orientation:o,textAlign:p,variant:i}=e,d={root:["root",t&&"absolute",i,r&&"light","vertical"===o&&"vertical",l&&"flexItem",a&&"withChildren",a&&"vertical"===o&&"withChildrenVertical","right"===p&&"vertical"!==o&&"textAlignRight","left"===p&&"vertical"!==o&&"textAlignLeft"],wrapper:["wrapper","vertical"===o&&"wrapperVertical"]};return(0,s.Z)(d,m,n)})(w);return(0,u.jsx)(k,(0,l.Z)({as:c,className:(0,o.Z)(Z.root,i),role:_,ref:t,ownerState:w},x,{children:p?(0,u.jsx)(y,{className:Z.wrapper,ownerState:w,children:p}):null}))}))},5162:function(e,t,a){a.d(t,{Z:function(){return o}});var n=a(7294),l=a(6010),r="tabItem_Ymn6";function o(e){var t=e.children,a=e.hidden,o=e.className;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,o),hidden:a},t)}},5488:function(e,t,a){a.d(t,{Z:function(){return u}});var n=a(7462),l=a(7294),r=a(6010),o=a(2389),s=a(7392),p=a(7094),i=a(2466),d="tabList__CuJ",c="tabItem_LNqP";function m(e){var t,a,o=e.lazy,m=e.block,u=e.defaultValue,h=e.values,k=e.groupId,y=e.className,f=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=h?h:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),N=(0,s.l)(v,(function(e,t){return e.value===t.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var _=null===u?u:null!=(t=null!=u?u:null==(a=f.find((function(e){return e.props.default})))?void 0:a.props.value)?t:f[0].props.value;if(null!==_&&!v.some((function(e){return e.value===_})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+_+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,p.U)(),g=b.tabGroupChoices,x=b.setTabGroupChoices,w=(0,l.useState)(_),Z=w[0],P=w[1],T=[],E=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var C=g[k];null!=C&&C!==Z&&v.some((function(e){return e.value===C}))&&P(C)}var I=function(e){var t=e.currentTarget,a=T.indexOf(t),n=v[a].value;n!==Z&&(E(t),P(n),null!=k&&x(k,String(n)))},A=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n,l=T.indexOf(e.currentTarget)+1;a=null!=(n=T[l])?n:T[0];break;case"ArrowLeft":var r,o=T.indexOf(e.currentTarget)-1;a=null!=(r=T[o])?r:T[T.length-1]}null==(t=a)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",d)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":m},y)},v.map((function(e){var t=e.value,a=e.label,o=e.attributes;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:Z===t?0:-1,"aria-selected":Z===t,key:t,ref:function(e){return T.push(e)},onKeyDown:A,onFocus:I,onClick:I},o,{className:(0,r.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":Z===t})}),null!=a?a:t)}))),o?(0,l.cloneElement)(f.filter((function(e){return e.props.value===Z}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},f.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==Z})}))))}function u(e){var t=(0,o.Z)();return l.createElement(m,(0,n.Z)({key:String(t)},e))}},432:function(e,t,a){a.d(t,{Z:function(){return f}});var n=a(7855),l=a(9960),r=a(6886),o=a(1519),s=a(5861),p=a(4810),i=a(7294),d=a(2321),c=a(3465),m=[{label:"asset",link:"/docs/asset"},{label:"asset to big_map",link:"/docs/asset"},{label:"asset to iterable_big_map",link:"/docs/asset"},{label:"aggregate",link:"/docs/reference/types#aggregate<A>"},{label:"partition",link:"/docs/reference/types#partition<A>"},{label:"asset_view",link:"/docs/reference/types#asset_view<A>"}];function u(e){var t;return i.createElement(r.ZP,{item:!0,xs:12,style:{marginTop:"12px"}},i.createElement(r.ZP,{container:!0},i.createElement(r.ZP,{item:!0},i.createElement("h4",{style:(t={marginBottom:"0px",color:"grey",fontWeight:"normal"},t.marginBottom="12px",t)},"Type of collection ",i.createElement("code",null,"A"))),i.createElement(r.ZP,{item:!0,xs:12},i.createElement(o.Z,{className:d.Z.divider,style:{marginBottom:"12px"}})),i.createElement(r.ZP,{item:!0,xs:12},i.createElement(r.ZP,{container:!0,spacing:2},m.map((function(t,a){return i.createElement(r.ZP,{item:!0},i.createElement(l.Z,{to:t.link},i.createElement("code",{style:{textDecoration:e.data.includes(t.label)?"none":"line-through"}},t.label)))}))))))}var h=function(e){return i.createElement(r.ZP,{item:!0,xs:12},i.createElement(r.ZP,{container:!0},i.createElement(r.ZP,{item:!0,xs:12},i.createElement(o.Z,{className:d.Z.divider,style:{marginBottom:"12px"}})),i.createElement(r.ZP,{item:!0,md:e.xs,sm:6,xs:6},i.createElement(r.ZP,{container:!0},i.createElement(r.ZP,{item:!0,xs:e.xs>4?2:4},i.createElement(s.Z,null,i.createElement("code",null,e.alias)," :")),i.createElement(r.ZP,{item:!0,xs:e.xs>4?10:8},i.createElement(s.Z,null," ",void 0===e.withLink||e.withLink?i.createElement(l.Z,{to:e.prefix+e.type.toLowerCase()},i.createElement("code",null,e.type)):i.createElement("code",null,e.type))))),i.createElement(r.ZP,{item:!0,md:12-e.xs,sm:6,xs:6},i.createElement(s.Z,{style:{fontFamily:"IBM Plex Sans"}},e.desc))))},k=function(e){return i.createElement(r.ZP,{item:!0,xs:12},i.createElement(r.ZP,{container:!0},i.createElement(r.ZP,{item:!0,xs:12},i.createElement(o.Z,{className:d.Z.divider,style:{marginBottom:"12px"}})),i.createElement(r.ZP,{item:!0,xs:12,style:{marginBottom:"6px"}},i.createElement(s.Z,null,void 0===e.withLink||e.withLink?i.createElement(l.Z,{to:e.prefix+e.type.toLowerCase()},i.createElement("code",null,e.type)):i.createElement("code",null,e.type))),i.createElement(r.ZP,{item:!0,xs:10},i.createElement(s.Z,{style:{fontFamily:"IBM Plex Sans"}},e.desc))))},y=function(e){return function(e,t,a){for(var l,r=t,o=(0,n.Z)(a);!(l=o()).done;)r=e(r,l.value);return r}((function(e,t){return e>=t?e:t}),-1/0,e)};function f(e){var t,a,n=void 0!==e.data.parameters?(t=e.data.parameters,(a=y(t.map((function(e){return e.alias.length+e.type.length}))))>30?6:a>20?5:a>10?3:2):0;return i.createElement(p.Z,{injectFirst:!0},i.createElement(r.ZP,{container:!0,direction:"row",justifyContent:"flex-start",alignItems:"center",spacing:1,style:{marginBottom:"60px"}},i.createElement(r.ZP,{item:!0,xs:12},i.createElement(s.Z,{style:{fontFamily:"IBM Plex Sans"}},e.data.desc)),void 0!==e.data.appliesto?i.createElement(u,{data:e.data.appliesto}):i.createElement("div",null),void 0!==e.data.parameters&&e.data.parameters.length>0?i.createElement(r.ZP,{item:!0},i.createElement("h4",{style:{marginBottom:"0px",marginTop:"12px",color:"grey",fontWeight:"normal"}},e.data.parameters.length>1?"Parameters":"Parameter")):i.createElement("div",null),void 0!==e.data.parameters&&e.data.parameters.length>0?e.data.parameters.map((function(e,t){return i.createElement(h,{key:"bp"+t,alias:e.alias,type:e.type,desc:e.desc,xs:n,withLink:e.withLink,prefix:e.prefix?e.prefix:"/docs/reference/types#"})})):i.createElement("div",null),void 0!==e.data.returns?i.createElement(r.ZP,{item:!0,style:{marginTop:"12px",color:"grey"}},i.createElement("h4",{style:{marginTop:"12px",marginBottom:"0px",fontWeight:"normal"}},"Returns")):i.createElement(r.ZP,{item:!0,style:{marginTop:"12px",color:"grey"}},i.createElement("h4",{style:{marginTop:"12px",marginBottom:"0px",fontWeight:"normal"}})),void 0!==e.data.returns?i.createElement(k,{type:e.data.returns.type,withLink:e.data.returns.withLink,desc:e.data.returns.desc,prefix:e.data.returns.prefix?e.data.returns.prefix:"/docs/reference/types#"}):i.createElement("div",null),i.createElement(r.ZP,{item:!0,xs:12},i.createElement(c.Z,{fails:e.data.fails,michelson:e.data.michelson,michelson_ref_url:e.data.michelson_ref_url,emits:e.data.emits,related:e.data.related,showfail:e.data.showfail}))))}},3465:function(e,t,a){a.d(t,{Z:function(){return c}});var n=a(5861),l=a(6886),r=a(1519),o=a(7294),s=a(2321),p=a(8271),i=a(563),d=function(e){return void 0===e.fails||0===e.fails.length?o.createElement(n.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey",fontStyle:"italic"}},"does not fail"):o.createElement(l.ZP,{container:!0},e.fails.map((function(t,a){return o.createElement(l.ZP,{container:!0,style:{marginBottom:e.fails.length>1?"22px":"0px"}},o.createElement(l.ZP,{key:"fk"+a,item:!0,xs:t.keyword.length>12?12:2,style:{marginBottom:t.keyword.length>12?"12px":"0px"}},o.createElement(n.Z,null,o.createElement("code",null,t.keyword))),o.createElement(l.ZP,{key:"fd"+a,item:!0,xs:t.keyword.length>12?12:10},o.createElement(n.Z,{style:{fontFamily:"IBM Plex Sans"}},t.desc)),a<e.fails.length-1?o.createElement(l.ZP,{item:!0,xs:12},o.createElement(r.Z,{className:s.Z.divider,style:{marginTop:"12px"}})):o.createElement("div",null))})))};function c(e){return o.createElement(l.ZP,{container:!0,direction:"row",justifyContent:"flex-start",alignItems:"center",spacing:1,style:{marginTop:"0px"}},null==e.showfail||null!=e.showfail&&e.showfail?o.createElement(o.Fragment,null,o.createElement(l.ZP,{item:!0,xs:3,sm:2,md:2},o.createElement(n.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey"}},"Fails with")),o.createElement(l.ZP,{item:!0,xs:9,sm:10,md:10},o.createElement(d,{fails:e.fails}))):o.createElement("div",null),void 0!==e.michelson?o.createElement(l.ZP,{item:!0,xs:12},o.createElement(r.Z,{className:s.Z.divider})):o.createElement("div",null),void 0!==e.michelson?o.createElement(l.ZP,{item:!0,xs:3,sm:2,md:2},o.createElement(n.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey"}},"Michelson")):o.createElement("div",null),void 0!==e.michelson?o.createElement(l.ZP,{item:!0,xs:9,sm:10,md:10},o.createElement(p.R,{michelson:e.michelson,michelson_ref_url:e.michelson_ref_url})):o.createElement("div",null),void 0!==e.emits?o.createElement(l.ZP,{item:!0,xs:12},o.createElement(r.Z,{className:s.Z.divider})):o.createElement("div",null),void 0!==e.emits?o.createElement(l.ZP,{item:!0,xs:3,sm:2,md:2},o.createElement(n.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey"}},"Emits")):o.createElement("div",null),void 0!==e.emits?o.createElement(l.ZP,{item:!0,xs:9,sm:10,md:10},o.createElement(l.ZP,{container:!0,direction:"row",spacing:3},e.emits.map((function(e,t){return o.createElement(i.n,{key:"rel"+t,value:e.keyword,link:e.link,code:e.code})})))):o.createElement("div",null),void 0!==e.related?o.createElement(l.ZP,{item:!0,xs:12},o.createElement(r.Z,{className:s.Z.divider})):o.createElement("div",null),void 0!==e.related?o.createElement(l.ZP,{item:!0,xs:3,sm:2,md:2},o.createElement(n.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey"}},"Related")):o.createElement("div",null),void 0!==e.related?o.createElement(l.ZP,{item:!0,xs:9,sm:10,md:10},o.createElement(l.ZP,{container:!0,direction:"row",spacing:3},e.related.map((function(e,t){return o.createElement(i.n,{key:"rel"+t,value:e.keyword,link:e.link,code:e.code})})))):o.createElement("div",null))}},8271:function(e,t,a){a.d(t,{R:function(){return p}});var n=a(7294),l=a(6292),r=a(6886),o=a(9960),s=a(4048),p=function(e){return void 0===e.michelson_ref_url?"[object Array]"!==Object.prototype.toString.call(e.michelson)?n.createElement(l.Z,{style:{textTransform:"none",fontFamily:"Roboto Mono",color:"var(--ifm-color-primary)"},disableFocusRipple:!0,size:"small",disableRipple:!0},e.michelson):n.createElement(r.ZP,{container:!0,spacing:1},e.michelson.map((function(e,t){return n.createElement(r.ZP,{item:!0,key:"mt"+t},n.createElement(l.Z,{style:{textTransform:"none",fontFamily:"Roboto Mono",color:"var(--ifm-color-primary)"},disableFocusRipple:!0,size:"small",disableRipple:!0},e))}))):n.createElement(o.Z,{to:e.michelson_ref_url},n.createElement(l.Z,{style:{textTransform:"none",fontFamily:"Roboto Mono",color:"var(--ifm-color-primary)"},size:"small",disableRipple:!0,endIcon:n.createElement(s.Z,{fontSize:"small"})},e.michelson))}},9373:function(e,t,a){a.d(t,{Z:function(){return p}});var n=a(6886),l=a(5861),r=a(1519),o=a(7294),s=a(2321);function p(e){var t=void 0!==e.width?e.width:12;return o.createElement(n.ZP,{container:!0,direction:"row",justifyContent:"flex-start",alignItems:"center",spacing:1,style:{marginTop:"0px",marginBottom:"24px"}},o.createElement(n.ZP,{item:!0,xs:3,sm:2,md:2},o.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey"}},e.title)),o.createElement(n.ZP,{item:!0,xs:9,sm:10,md:10}),o.createElement(n.ZP,{item:!0,xs:12,sm:t,md:t},o.createElement(r.Z,{className:s.Z.divider})))}},563:function(e,t,a){a.d(t,{n:function(){return s}});var n=a(9960),l=a(6886),r=a(5861),o=a(7294),s=function(e){return o.createElement(l.ZP,{item:!0},o.createElement(n.Z,{to:e.link},o.createElement(r.Z,{style:{fontFamily:"IBM Plex Sans"}},null!=e.code&&!1===e.code?e.value:o.createElement("code",null,e.value))))}},7972:function(e,t,a){a.d(t,{Z:function(){return i}});var n=a(6886),l=a(5861),r=a(1519),o=a(7294),s=a(9960),p=a(2321);function i(e){return o.createElement(n.ZP,{container:!0,direction:"row",justifyContent:"flex-start",alignItems:"center",spacing:1,style:{marginTop:"0px"}},o.createElement(n.ZP,{item:!0,xs:3,sm:2,md:2},o.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey"}},"Repository")),o.createElement(n.ZP,{item:!0,xs:9,sm:10,md:10},o.createElement(s.Z,{to:e.data.repo},o.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans"}},e.data.repo))),o.createElement(n.ZP,{item:!0,xs:12},o.createElement(r.Z,{className:p.Z.divider})),o.createElement(n.ZP,{item:!0,xs:3,sm:2,md:2},o.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey"}},"Author")),o.createElement(n.ZP,{item:!0,xs:9,sm:10,md:10},o.createElement(s.Z,{to:e.data.authorurl},o.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans"}},e.data.author))),void 0!==e.data.norms?o.createElement(n.ZP,{item:!0,xs:12},o.createElement(r.Z,{className:p.Z.divider})):o.createElement("div",null),void 0!==e.data.norms?o.createElement(n.ZP,{item:!0,xs:12,sm:2,md:2},o.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey"}},e.data.norms.length>1?"Norms":"Norm")):o.createElement("div",null),void 0!==e.data.norms?e.data.norms.map((function(e){return o.createElement(n.ZP,{item:!0,xs:4,sm:2,md:2},o.createElement(s.Z,{to:e.url},o.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans"}},e.label)))})):o.createElement("div",null),void 0!==e.data.templates?o.createElement(n.ZP,{item:!0,xs:12},o.createElement(r.Z,{className:p.Z.divider})):o.createElement("div",null),void 0!==e.data.templates?o.createElement(n.ZP,{item:!0,xs:12,sm:2,md:2},o.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey"}},e.data.templates.length>1?"Templates":"Template")):o.createElement("div",null),void 0!==e.data.templates?e.data.templates.map((function(e){return o.createElement(n.ZP,{item:!0,xs:4,sm:2,md:2},o.createElement(s.Z,{to:e.url},o.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans"}},e.label)))})):o.createElement("div",null))}},6685:function(e,t,a){a.r(t),a.d(t,{assets:function(){return k},contentTitle:function(){return u},default:function(){return v},frontMatter:function(){return m},metadata:function(){return h},toc:function(){return y}});var n=a(7462),l=a(3366),r=(a(7294),a(3905)),o=a(432),s=a(7972),p=a(9373),i=a(5488),d=a(5162),c=["components"],m={sidebar_position:1,sidebar_label:"Smart Contract"},u="Poll Contract",h={unversionedId:"dapps/example/contract",id:"dapps/example/contract",title:"Poll Contract",description:"The poll contract stores polls' IPFS hash and users' answers. It guarantees that an account can only answer once to a poll. It also computes the number of times an answer has been selected.",source:"@site/docs/dapps/example/contract.md",sourceDirName:"dapps/example",slug:"/dapps/example/contract",permalink:"/docs/dapps/example/contract",draft:!1,editUrl:"https://github.com/completium/archetype-docs/blob/main/docs/dapps/example/contract.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Smart Contract"},sidebar:"dapps",previous:{title:"Poll DApp",permalink:"/docs/dapps/example/"},next:{title:"Contract Integration",permalink:"/docs/dapps/example/interaction"}},k={},y=[{value:"Project",id:"project",level:2},{value:"Deployment",id:"deployment",level:2},{value:"Storage",id:"storage",level:2},{value:"<code>owner</code>",id:"owner",level:3},{value:"<code>poll_counter</code>",id:"poll_counter",level:3},{value:"<code>poll</code>",id:"poll",level:3},{value:"<code>poll_to_approve</code>",id:"poll_to_approve",level:3},{value:"<code>responder</code>",id:"responder",level:3},{value:"Entry",id:"entry",level:2},{value:"<code>add_poll</code>",id:"add_poll",level:3},{value:"<code>respond</code>",id:"respond",level:3},{value:"Called by <code>owner</code>",id:"called-by-owner",level:3},{value:"<code>approve</code>",id:"approve",level:4},{value:"<code>disapprove</code>",id:"disapprove",level:4},{value:"<code>remove</code>",id:"remove",level:4},{value:"View",id:"view",level:2},{value:"<code>get_responses</code>",id:"get_responses",level:3},{value:"<code>already_responded</code>",id:"already_responded",level:3},{value:"Events",id:"events",level:2},{value:"<code>NewPoll</code>",id:"newpoll",level:3},{value:"<code>Response</code>",id:"response",level:3},{value:"<code>Approval</code>",id:"approval",level:3}],f={toc:y};function v(e){var t=e.components,a=(0,l.Z)(e,c);return(0,r.kt)("wrapper",(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"poll-contract"},"Poll Contract"),(0,r.kt)("p",null,"The poll contract stores polls' IPFS hash and users' answers. It guarantees that an account can only answer once to a poll. It also computes the number of times an answer has been selected."),(0,r.kt)("p",null,"When a user adds a poll (IPFS hash), it needs to be approved by a special account, called contract's ",(0,r.kt)("em",{parentName:"p"},"owner"),". The owner can also remove any existing poll."),(0,r.kt)(s.Z,{data:{repo:"https://github.com/completium/poll-dapp/tree/main/poll-contract",author:"Completium",authorurl:"https://completium.com/",norms:[{label:"Metadata",url:"/docs/templates/metadata"},{label:"Pausable",url:"/docs/templates/pausable"},{label:"Ownership",url:"/docs/templates/ownership"}]},mdxType:"TemplateInfo"}),(0,r.kt)("h2",{id:"project"},"Project"),(0,r.kt)("p",null,"Poll contract project was created with the following ",(0,r.kt)("a",{parentName:"p",href:"/docs/cli/introduction"},"Completium CLI")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-completium"},"completium-cli create project poll-contract\n")),(0,r.kt)("p",null,"Command ",(0,r.kt)("inlineCode",{parentName:"p"},"npm i")," installs required packages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"typescript util packages"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mocha")," for test suite"),(0,r.kt)("li",{parentName:"ul"},"archetype's packages for binding")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file is created with utility commands, including:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'npm run "gen-binding"')," to generate contract(s)' binding"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"npm test")," to launch tests in ",(0,r.kt)("inlineCode",{parentName:"li"},"tests")," directory")),(0,r.kt)("h2",{id:"deployment"},"Deployment"),(0,r.kt)("p",null,"The following ",(0,r.kt)("a",{parentName:"p",href:"/docs/cli/introduction"},"Completium CLI")," command is used to deploy the contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-completium"},'completium-cli deploy ./contracts/poll.arl --parameters \'{ "owner": "tz1h4CiqWxNe4UxSpkwXy617RM6DaK6NU76P" }\' --metadata-uri "ipfs://QmXbuUyyJXW1RRuL3k81Kpe2HULbYLj1sUUq44Nuxa5z8h"\n')),(0,r.kt)("p",null,"where ",(0,r.kt)("inlineCode",{parentName:"p"},"QmXbuUyyJXW1RRuL3k81Kpe2HULbYLj1sUUq44Nuxa5z8h")," is the IPFS hash of the ",(0,r.kt)("a",{parentName:"p",href:"/docs/templates/metadata#example"},"contract metadata")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"(metadata.json)","(metadata.json)":!0},'{\n  "name": "Poll Dapp",\n  "description": "An example of Dapp built with Archetype & Completium",\n  "version": "2.0",\n  "license": { "name": "MIT" },\n  "authors": ["Completium team <contact@completium.com>"],\n  "homepage": "https://completium.github.io/poll-dapp/",\n  "interfaces": ["TZIP-016"]\n}\n')),(0,r.kt)("h2",{id:"storage"},"Storage"),(0,r.kt)("h3",{id:"owner"},(0,r.kt)("inlineCode",{parentName:"h3"},"owner")),(0,r.kt)("p",null,"Contract owner's address, passed as contract parameter. Only the owner can:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"approve a poll"),(0,r.kt)("li",{parentName:"ul"},"remove a poll"),(0,r.kt)("li",{parentName:"ul"},"transfer contract ownership"),(0,r.kt)("li",{parentName:"ul"},"pause contract"),(0,r.kt)("li",{parentName:"ul"},"unpause contract")),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},'archetype poll(owner : address)\nwith metadata ""\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/contract"},(0,r.kt)("inlineCode",{parentName:"a"},"archetype"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#address"},(0,r.kt)("inlineCode",{parentName:"a"},"address"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/contract#metadata"},(0,r.kt)("inlineCode",{parentName:"a"},"with metadata")))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(method) Poll.get_owner() : Promise<Address>\n")))),(0,r.kt)("h3",{id:"poll_counter"},(0,r.kt)("inlineCode",{parentName:"h3"},"poll_counter")),(0,r.kt)("p",null,"Number of polls added, used as poll key in ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#poll"},(0,r.kt)("inlineCode",{parentName:"a"},"poll"))," asset collection (see ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#approve"},(0,r.kt)("inlineCode",{parentName:"a"},"approve"))," entry point)."),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"variable polls_counter : nat = 0\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/storage#variable"},(0,r.kt)("inlineCode",{parentName:"a"},"variable"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#nat"},(0,r.kt)("inlineCode",{parentName:"a"},"nat")))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(method) Poll.get_polls_counter() : Promise<Nat>\n")))),(0,r.kt)("h3",{id:"poll"},(0,r.kt)("inlineCode",{parentName:"h3"},"poll")),(0,r.kt)("p",null,"Collection of polls."),(0,r.kt)("p",null,"A poll is identified by a natural integer rather than by its IPFS hash. This is to minimize the required storage of the ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#responder"},(0,r.kt)("inlineCode",{parentName:"a"},"responder"))," information, that stores which polls an user has answered."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"responses")," field stores the numbers of responses to poll's possible answers."),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"asset poll {\n  poll_pk   : nat;\n  ipfs_hash : bytes;\n  creation  : date          = now;\n  responses : map<nat, nat> = []\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/asset"},(0,r.kt)("inlineCode",{parentName:"a"},"asset"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#nat"},(0,r.kt)("inlineCode",{parentName:"a"},"nat"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#bytes"},(0,r.kt)("inlineCode",{parentName:"a"},"bytes"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#date"},(0,r.kt)("inlineCode",{parentName:"a"},"date"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/expressions/constants#now"},(0,r.kt)("inlineCode",{parentName:"a"},"now"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#map%3CK,%20V%3E"},(0,r.kt)("inlineCode",{parentName:"a"},"map")))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export type poll_key = Nat\n\nexport class poll_value {\n  constructor(\n    ipfs_hash: Bytes,\n    responses: Array<[ Nat, Nat ]>,\n    creation: Date)\n}\n\nexport type poll_container = Array<[ poll_key, poll_value ]>;\n\n(method) Poll.get_poll(): Promise<poll_container>\n")))),(0,r.kt)("h3",{id:"poll_to_approve"},(0,r.kt)("inlineCode",{parentName:"h3"},"poll_to_approve")),(0,r.kt)("p",null,"Collection of polls' IPFS hashes proposed by users. When approved by ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#owner"},(0,r.kt)("inlineCode",{parentName:"a"},"owner")),", a poll asset is created."),(0,r.kt)("p",null,"Note that the asset collection is created as a ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#big_map%3CK,%20V%3E"},(0,r.kt)("inlineCode",{parentName:"a"},"big_map")),", to be able to handle an arbitrary large amount of poll proposition."),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"asset poll_to_approve to big_map {\n  ipfs_hash_to_approve : bytes;\n  poll_creator         : address = caller\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/asset"},(0,r.kt)("inlineCode",{parentName:"a"},"asset"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#bytes"},(0,r.kt)("inlineCode",{parentName:"a"},"bytes"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#address"},(0,r.kt)("inlineCode",{parentName:"a"},"address"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/expressions/constants#caller"},(0,r.kt)("inlineCode",{parentName:"a"},"caller")))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export type poll_to_approve_value = Address;\n\nexport type poll_to_approve_key = Bytes;\n\n(method) Poll.get_poll_to_approve_value(key: poll_to_approve_key): Promise<poll_to_approve_value | undefined>\n\n(method) Poll.has_poll_to_approve_value(key: poll_to_approve_key): Promise<boolean>\n")))),(0,r.kt)("h3",{id:"responder"},(0,r.kt)("inlineCode",{parentName:"h3"},"responder")),(0,r.kt)("p",null,"Collection of responders' lists (set) of answered polls. This is to decide whether a responder has already answered a poll or not (see ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#respond"},(0,r.kt)("inlineCode",{parentName:"a"},"respond"))," entrypoint)."),(0,r.kt)("p",null,"It is specified as a ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#big_map%3CK,%20V%3E"},(0,r.kt)("inlineCode",{parentName:"a"},"big_map"))," to be able to handle an arbitrary large number of responders."),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"asset responder to big_map {\n  res_addr : address;\n  polls    : set<nat> = [];\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/asset"},(0,r.kt)("inlineCode",{parentName:"a"},"asset"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#address"},(0,r.kt)("inlineCode",{parentName:"a"},"address"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/language-basics/container#set"},(0,r.kt)("inlineCode",{parentName:"a"},"set"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#nat"},(0,r.kt)("inlineCode",{parentName:"a"},"nat")))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export type responder_key = Address\n\nexport type responder_value = Array<Nat>\n\n(method) Poll.get_responder_value(key: responder_key): Promise<responder_value | undefined>\n\n(method) Poll.has_responder_value(key: responder_key): Promise<boolean>\n")))),(0,r.kt)("h2",{id:"entry"},"Entry"),(0,r.kt)("h3",{id:"add_poll"},(0,r.kt)("inlineCode",{parentName:"h3"},"add_poll")),(0,r.kt)("p",null,"Entry to call to propose a new poll. The poll's IPFS hash is added to the collection of hashes to approve."),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"entry add_poll(h : bytes) {\n  require {\n    r1 : is_not_paused()\n  }\n  effect {\n    poll_to_approve.add({ ipfs_hash_to_approve = h });\n    emit<NewPoll>({ caller; h })\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#entry"},(0,r.kt)("inlineCode",{parentName:"a"},"entry"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#bytes"},(0,r.kt)("inlineCode",{parentName:"a"},"bytes"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#require"},(0,r.kt)("inlineCode",{parentName:"a"},"require"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/templates/pausable#is_not_paused"},(0,r.kt)("inlineCode",{parentName:"a"},"is_not_paused"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#effect"},(0,r.kt)("inlineCode",{parentName:"a"},"effect"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/instructions/asset#aadda"},(0,r.kt)("inlineCode",{parentName:"a"},"add"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/expressions/constants#caller"},(0,r.kt)("inlineCode",{parentName:"a"},"caller"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/instructions/operation#emit"},(0,r.kt)("inlineCode",{parentName:"a"},"emit")))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(method) Poll.add_poll(h: Bytes, params: Partial<Parameters>): Promise<any>\n"))),(0,r.kt)(d.Z,{value:"Ts Test",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'describe("[POLL] \'add_poll\' entry", async () => {\n  it("add \'Food\' poll", async () => {\n    const b = Bytes.hex_encode(food_hash)\n    await poll.add_poll(Bytes.hex_encode(food_hash), { as: bob });\n    const has_poll = await poll.has_poll_to_approve_value(b)\n    assert(has_poll)\n  })\n  it("\'add\' cannot be called with same hash", async () => {\n    const b = Bytes.hex_encode(food_hash)\n    expect_to_fail(async () => {\n      await poll.add_poll(Bytes.hex_encode(food_hash), { as: alice });\n    }, error_key_exists("poll_to_approve"))\n  })\n  it("add \'Dancer\' poll", async () => {\n    const b = Bytes.hex_encode(dancer_hash)\n    await poll.add_poll(b, { as: bob });\n    const has_poll = await poll.has_poll_to_approve_value(b)\n    assert(has_poll)\n  })\n  it("add \'Squares\' poll", async () => {\n    const b = Bytes.hex_encode(squares_hash)\n    await poll.add_poll(b, { as: bob });\n    const has_poll = await poll.has_poll_to_approve_value(b)\n    assert(has_poll)\n  })\n})\n')))),(0,r.kt)(o.Z,{data:{sig:"add_poll(h)",parameters:[{type:"bytes",alias:"h",desc:(0,r.kt)("div",null,"Poll's IPFS hash")}],fails:[{keyword:"CONTRACT_PAUSED",desc:(0,r.kt)("div",null,"When contract has been paused by ",(0,r.kt)("code",null,"owner"))},{keyword:'("KEY_EXISTS", "poll_to_approve")',desc:(0,r.kt)("div",null,"When poll's IPFS hash ",(0,r.kt)("code",null,"h")," has already been proposed")}],emits:[{keyword:"NewPoll",link:"/docs/dapps/example/contract#newpoll"}],related:[{keyword:"poll_to_approve",link:"/docs/dapps/example/contract#poll_to_approve"}]},mdxType:"Builtin"}),(0,r.kt)("h3",{id:"respond"},(0,r.kt)("inlineCode",{parentName:"h3"},"respond")),(0,r.kt)("p",null,"Entry to call to answer a poll. It fails if:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the poll hash is not registered"),(0,r.kt)("li",{parentName:"ul"},"the caller has already responded")),(0,r.kt)("p",null,"The number of times someone has responded to the poll's answer (",(0,r.kt)("inlineCode",{parentName:"p"},"choice_id"),") is incremented, and the poll id is registered in the set of polls ",(0,r.kt)("inlineCode",{parentName:"p"},"caller")," has already responded to."),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"entry respond(pk : nat, choice_id : nat) {\n  constant {\n    selection_count is poll[pk] ? (the.responses[choice_id] ? the : 0) : 0;\n  }\n  require {\n    r2 : is_not_paused();\n    r3 : poll.contains(pk) otherwise POLL_NOT_FOUND;\n  }\n  fail if {\n    f1 : responder[caller] ? the.polls.contains(pk) : false with CANNOT_RESPOND_TWICE\n  }\n  effect {\n    responder.add_update(caller, { polls += [pk] } );\n    poll.update(pk, {\n      responses += [(choice_id, selection_count + 1)]\n    });\n    emit<Response>({ caller; pk; choice_id })\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#entry"},(0,r.kt)("inlineCode",{parentName:"a"},"entry"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#nat"},(0,r.kt)("inlineCode",{parentName:"a"},"nat"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#constant"},(0,r.kt)("inlineCode",{parentName:"a"},"constant"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#require"},(0,r.kt)("inlineCode",{parentName:"a"},"require"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/templates/pausable#is_not_paused"},(0,r.kt)("inlineCode",{parentName:"a"},"is_not_paused"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/expressions/asset#acontainsk--asset_keya"},(0,r.kt)("inlineCode",{parentName:"a"},"contains"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#fail-if"},(0,r.kt)("inlineCode",{parentName:"a"},"fail if"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#effect"},(0,r.kt)("inlineCode",{parentName:"a"},"effect"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/instructions/asset#aadd_updatek--u-"},(0,r.kt)("inlineCode",{parentName:"a"},"add_update"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/instructions/assignment#a--b-1"},(0,r.kt)("inlineCode",{parentName:"a"},"+="))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/instructions/asset#aupdatek--u-"},(0,r.kt)("inlineCode",{parentName:"a"},"update"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/instructions/operation#emit"},(0,r.kt)("inlineCode",{parentName:"a"},"emit"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/expressions/constants#caller"},(0,r.kt)("inlineCode",{parentName:"a"},"caller")))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(method) Poll.respond(pk: Nat, choice_id: Nat, params: Partial<Parameters>): Promise<any>\n"))),(0,r.kt)(d.Z,{value:"TS Test",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'describe("[POLL] \'respond\' entry", async () => {\n  it("respond to food poll", async () => {\n    const poll_id = new Nat(0)\n    const choice_id = new Nat(0)\n    const polls = await poll.get_poll()\n    const nb_responses_before = get_nb_responses(polls, poll_id, choice_id)\n    assert(nb_responses_before.equals(new Nat(0)))\n    const has_responder_before = await poll.has_responder_value(bob.get_address())\n    assert(!has_responder_before)\n    await poll.respond(poll_id, choice_id, { as : bob })\n    const polls_after = await poll.get_poll()\n    const nb_responses_after = get_nb_responses(polls_after, poll_id, choice_id)\n    assert(nb_responses_after.equals(new Nat(1)))\n    const has_responder_after = await poll.has_responder_value(bob.get_address())\n    assert(has_responder_after)\n  })\n  it("responder cannot respond twice", async () => {\n    const poll_id = new Nat(0)\n    const choice_id = new Nat(1)\n    expect_to_fail(async () => {\n      await poll.respond(poll_id, choice_id, { as : bob })\n    }, poll.errors.f1)\n  })\n  it("\'respond\' increment number of responses", async () => {\n    const poll_id = new Nat(0)\n    const choice_id = new Nat(0)\n    const polls = await poll.get_poll()\n    const nb_responses_before = get_nb_responses(polls, poll_id, choice_id)\n    await poll.respond(poll_id, choice_id, { as : carl })\n    const polls_after = await poll.get_poll()\n    const nb_responses_after = get_nb_responses(polls_after, poll_id, choice_id)\n    assert(nb_responses_after.equals(nb_responses_before.plus(new Nat(1))))\n  })\n})\n')))),(0,r.kt)(o.Z,{data:{sig:"respond(pk, choice_id)",parameters:[{type:"nat",alias:"pk",desc:(0,r.kt)("div",null,"Poll's primary key")},{type:"nat",alias:"choice_id",desc:(0,r.kt)("div",null,"Poll's choice id selected by user")}],fails:[{keyword:"CONTRACT_PAUSED",desc:(0,r.kt)("div",null,"When contract has been paused by ",(0,r.kt)("code",null,"owner"))},{keyword:"POLL_NOT_FOUND",desc:(0,r.kt)("div",null,"When poll's primary key ",(0,r.kt)("code",null,"pk")," is not found in ",(0,r.kt)("code",null,"poll")," asset")},{keyword:"CANNOT_RESPOND_TWICE",desc:(0,r.kt)("div",null,"When poll's primary key ",(0,r.kt)("code",null,"pk")," is found in ",(0,r.kt)("code",null,"caller"),"'s set of already responded polls")}],emits:[{keyword:"Response",link:"/docs/dapps/example/contract#response"}],related:[{keyword:"poll",link:"/docs/dapps/example/contract#poll"},{keyword:"responder",link:"/docs/dapps/example/contract#responder"}]},mdxType:"Builtin"}),(0,r.kt)("h3",{id:"called-by-owner"},"Called by ",(0,r.kt)("inlineCode",{parentName:"h3"},"owner")),(0,r.kt)("h4",{id:"approve"},(0,r.kt)("inlineCode",{parentName:"h4"},"approve")),(0,r.kt)("p",null,"Entry called by ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#owner"},(0,r.kt)("inlineCode",{parentName:"a"},"owner"))," to approve a proposed poll:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a new poll is added to the ",(0,r.kt)("a",{parentName:"li",href:"/docs/dapps/example/contract#poll"},(0,r.kt)("inlineCode",{parentName:"a"},"poll"))," asset collection"),(0,r.kt)("li",{parentName:"ul"},"the proposed IPFS hash is removed from ",(0,r.kt)("a",{parentName:"li",href:"/docs/dapps/example/contract#poll_to_approve"},(0,r.kt)("inlineCode",{parentName:"a"},"poll_to_approve")))),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"entry approve(h : bytes) {\n  called by owner\n  constant {\n    creator_ ?is poll_to_approve[h]?.poll_creator otherwise POLL_NOT_FOUND\n  }\n  effect {\n    poll.add({ poll_pk = polls_counter; ipfs_hash = h });\n    polls_counter += 1;\n    poll_to_approve.remove(h);\n    emit<Approve>({ creator_; h })\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#entry"},(0,r.kt)("inlineCode",{parentName:"a"},"entry"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#bytes"},(0,r.kt)("inlineCode",{parentName:"a"},"bytes"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#called-by"},(0,r.kt)("inlineCode",{parentName:"a"},"called by"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#constant"},(0,r.kt)("inlineCode",{parentName:"a"},"constant"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#constant"},(0,r.kt)("inlineCode",{parentName:"a"},"?is"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/expressions/controls#option"},(0,r.kt)("inlineCode",{parentName:"a"},"?."))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#effect"},(0,r.kt)("inlineCode",{parentName:"a"},"effect"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/instructions/asset#aadda"},(0,r.kt)("inlineCode",{parentName:"a"},"add"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/instructions/assignment#a--b-1"},(0,r.kt)("inlineCode",{parentName:"a"},"+="))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/instructions/asset#aremovek"},(0,r.kt)("inlineCode",{parentName:"a"},"remove"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/instructions/operation#emit"},(0,r.kt)("inlineCode",{parentName:"a"},"emit")))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(method) Poll.approve(h: Bytes, params: Partial<Parameters>): Promise<any>\n"))),(0,r.kt)(d.Z,{value:"TS Test",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"describe(\"[POLL] 'approve' entry\", async () => {\n  it(\"'approve' can only be called by owner\", async () => {\n    expect_to_fail(async () => {\n      await poll.approve(Bytes.hex_encode(food_hash), { as: bob });\n    }, poll.errors.INVALID_CALLER)\n  })\n  it(\"approve 'Food' poll\", async () => {\n    const b = Bytes.hex_encode(food_hash)\n    const polls_before = await poll.get_poll()\n    assert(!exists_poll(polls_before, b))\n    await poll.approve(b, { as: alice });\n    const polls_after = await poll.get_poll()\n    assert(exists_poll(polls_after, b))\n    const has_poll = await poll.has_poll_to_approve_value(b)\n    assert(!has_poll)\n  })\n  it(\"'approve' cannot be called twice with same hash\", async () => {\n    const b = Bytes.hex_encode(food_hash)\n    expect_to_fail(async () => {\n      await poll.approve(b, { as: alice });\n    }, poll.errors.POLL_NOT_FOUND)\n  })\n  it(\"approve 'Dancer' poll\", async () => {\n    const b = Bytes.hex_encode(dancer_hash)\n    const polls_before = await poll.get_poll()\n    assert(!exists_poll(polls_before, b))\n    await poll.approve(b, { as: alice });\n    const polls_after = await poll.get_poll()\n    assert(exists_poll(polls_after, b))\n    const has_poll = await poll.has_poll_to_approve_value(b)\n    assert(!has_poll)\n  })\n})\n")))),(0,r.kt)(o.Z,{data:{sig:"approve(h)",parameters:[{type:"bytes",alias:"h",desc:(0,r.kt)("div",null,"Poll's IPFS hash")}],fails:[{keyword:"POLL_NOT_FOUND",desc:(0,r.kt)("div",null,"When poll's IPFS hash ",(0,r.kt)("code",null,"h")," is not found in ",(0,r.kt)("code",null,"poll_to_approve")," asset")}],emits:[{keyword:"Approve",link:"/docs/dapps/example/contract#approval"}],related:[{keyword:"poll_to_approve",link:"/docs/dapps/example/contract#poll_to_approve"},{keyword:"poll",link:"/docs/dapps/example/contract#poll"}]},mdxType:"Builtin"}),(0,r.kt)("h4",{id:"disapprove"},(0,r.kt)("inlineCode",{parentName:"h4"},"disapprove")),(0,r.kt)("p",null,"Entry called by ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#owner"},(0,r.kt)("inlineCode",{parentName:"a"},"owner"))," to disapprove a proposed poll:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the proposed IPFS hash is removed from ",(0,r.kt)("a",{parentName:"li",href:"/docs/dapps/example/contract#poll_to_approve"},(0,r.kt)("inlineCode",{parentName:"a"},"poll_to_approve")))),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"entry disapprove(h : bytes) {\n  called by owner\n  effect {\n    poll_to_approve.remove(h)\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#entry"},(0,r.kt)("inlineCode",{parentName:"a"},"entry"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#bytes"},(0,r.kt)("inlineCode",{parentName:"a"},"bytes"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#called-by"},(0,r.kt)("inlineCode",{parentName:"a"},"called by"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#effect"},(0,r.kt)("inlineCode",{parentName:"a"},"effect"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/instructions/asset#aremovek"},(0,r.kt)("inlineCode",{parentName:"a"},"remove")))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(method) Poll.disapprove(h: Bytes, params: Partial<Parameters>): Promise<any>\n"))),(0,r.kt)(d.Z,{value:"TS Test",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"describe(\"[POLL] 'disapprove' entry\", async () => {\n  it(\"'disapprove' can only be called by owner\", async () => {\n    expect_to_fail(async () => {\n      await poll.disapprove(Bytes.hex_encode(squares_hash), { as: bob });\n    }, poll.errors.INVALID_CALLER)\n  })\n  it(\"disapprove 'Squares' poll\", async () => {\n    const b = Bytes.hex_encode(squares_hash)\n    const polls_before = await poll.get_poll()\n    assert(!exists_poll(polls_before, b))\n    await poll.disapprove(b, { as: alice });\n    const polls_after = await poll.get_poll()\n    assert(!exists_poll(polls_after, b))\n    const has_poll = await poll.has_poll_to_approve_value(b)\n    assert(!has_poll)\n  })\n})\n")))),(0,r.kt)(o.Z,{data:{sig:"disapprove(h)",parameters:[{type:"bytes",alias:"h",desc:(0,r.kt)("div",null,"Poll's IPFS hash")}],related:[{keyword:"poll_to_approve",link:"/docs/dapps/example/contract#poll_to_approve"}]},mdxType:"Builtin"}),(0,r.kt)("h4",{id:"remove"},(0,r.kt)("inlineCode",{parentName:"h4"},"remove")),(0,r.kt)("p",null,"Entry called by ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#owner"},(0,r.kt)("inlineCode",{parentName:"a"},"owner"))," to remove a poll."),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"entry remove(pk : nat) {\n  called by owner\n  effect {\n    poll.remove(pk)\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#entry"},(0,r.kt)("inlineCode",{parentName:"a"},"entry"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#nat"},(0,r.kt)("inlineCode",{parentName:"a"},"nat"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#called-by"},(0,r.kt)("inlineCode",{parentName:"a"},"called by"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint#effect"},(0,r.kt)("inlineCode",{parentName:"a"},"effect"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/instructions/asset#aremovek"},(0,r.kt)("inlineCode",{parentName:"a"},"remove"))),(0,r.kt)(o.Z,{data:{sig:"remove(pk)",parameters:[{type:"nat",alias:"pk",desc:(0,r.kt)("div",null,"Poll's primary key")}],related:[{keyword:"poll",link:"/docs/dapps/example/contract#poll"}]},mdxType:"Builtin"})),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(method) Poll.remove(pk: Nat, params: Partial<Parameters>): Promise<any>\n"))),(0,r.kt)(d.Z,{value:"TS Test",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'describe("[POLL] \'remove\' entry", async () => {\n  it("\'remove\' can only be called by owner", async () => {\n    expect_to_fail(async () => {\n      await poll.remove(new Nat(0), { as : bob })\n    }, poll.errors.INVALID_CALLER)\n  })\n  it("remove food poll", async () => {\n    const polls_before = await poll.get_poll()\n    assert(exists_poll(polls_before, Bytes.hex_encode(food_hash)))\n    await poll.remove(new Nat(0), { as : alice })\n    const polls = await poll.get_poll()\n    assert(!exists_poll(polls, Bytes.hex_encode(food_hash)))\n  })\n})\n')))),(0,r.kt)("h2",{id:"view"},"View"),(0,r.kt)("h3",{id:"get_responses"},(0,r.kt)("inlineCode",{parentName:"h3"},"get_responses")),(0,r.kt)("p",null,"Returns poll ",(0,r.kt)("inlineCode",{parentName:"p"},"pk")," response statistics."),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"view get_responses(pk : nat) : map<nat, nat> {\n  return poll[pk].responses\n}\n"))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(method) Poll.view_get_responses(pk: Nat, params: Partial<Parameters>): Promise<Array<[ Nat, Nat ]>>\n")))),(0,r.kt)("h3",{id:"already_responded"},(0,r.kt)("inlineCode",{parentName:"h3"},"already_responded")),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/expressions/constants#source"},(0,r.kt)("inlineCode",{parentName:"a"},"source"))," has already answered poll ",(0,r.kt)("inlineCode",{parentName:"p"},"pk"),"."),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"view already_responded(pk : nat) : bool {\n  return (responder[source] ? the.polls.contains(pk) : false)\n}\n"))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(method) Poll.view_already_responded(pk: Nat, params: Partial<Parameters>): Promise<boolean>\n")))),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("h3",{id:"newpoll"},(0,r.kt)("inlineCode",{parentName:"h3"},"NewPoll")),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#add_poll"},(0,r.kt)("inlineCode",{parentName:"a"},"add_poll"))," with:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"poll creator's address"),(0,r.kt)("li",{parentName:"ul"},"poll's IPFS hash")),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"event NewPoll {\n  creator : address;\n  poll_id : bytes\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/compositetypes#event"},(0,r.kt)("inlineCode",{parentName:"a"},"event"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#address"},(0,r.kt)("inlineCode",{parentName:"a"},"address"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#bytes"},(0,r.kt)("inlineCode",{parentName:"a"},"bytes")))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export class NewPoll {\n  constructor(\n    public creator: Address,\n    public poll_id: Bytes\n  )\n}\n\n(method) Poll.register_NewPoll(ep: EventProcessor<NewPoll>): void\n")))),(0,r.kt)("h3",{id:"response"},(0,r.kt)("inlineCode",{parentName:"h3"},"Response")),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#respond"},(0,r.kt)("inlineCode",{parentName:"a"},"respond"))," with:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"responder's address"),(0,r.kt)("li",{parentName:"ul"},"poll's id"),(0,r.kt)("li",{parentName:"ul"},"response's id")),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"event Response {\n  responder_addr : address;\n  poll_id : nat;\n  response : nat\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/compositetypes#event"},(0,r.kt)("inlineCode",{parentName:"a"},"event"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#address"},(0,r.kt)("inlineCode",{parentName:"a"},"address"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#nat"},(0,r.kt)("inlineCode",{parentName:"a"},"nat")))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export class Response {\n  constructor(\n    public responder_addr: Address,\n    public poll_id: Nat,\n    public response: Nat\n  )\n}\n\n(method) Poll.register_Response(ep: EventProcessor<NewPoll>): void\n")))),(0,r.kt)("h3",{id:"approval"},(0,r.kt)("inlineCode",{parentName:"h3"},"Approval")),(0,r.kt)("p",null,"Emitted by ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#approve"},(0,r.kt)("inlineCode",{parentName:"a"},"approve"))," with:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"proposal issuer's address"),(0,r.kt)("li",{parentName:"ul"},"poll's IPFS hash")),(0,r.kt)(p.Z,{title:"Code",width:"1.5",mdxType:"NamedDivider"}),(0,r.kt)(i.Z,{defaultValue:"Archetype",mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype"},"event Approval {\n  creator : address;\n  poll_id : bytes\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/compositetypes#event"},(0,r.kt)("inlineCode",{parentName:"a"},"event"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#address"},(0,r.kt)("inlineCode",{parentName:"a"},"address"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#bytes"},(0,r.kt)("inlineCode",{parentName:"a"},"bytes")))),(0,r.kt)(d.Z,{value:"TS Binding API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export class Approval {\n  constructor(\n    public creator: Address,\n    public poll_id: Bytes\n  )\n}\n\n(method) Poll.register_Response(ep: EventProcessor<NewPoll>): void\n")))))}v.isMDXComponent=!0},2321:function(e,t){t.Z={divider:"divider_LuCZ",gradient:"gradient_kJ7D"}}}]);