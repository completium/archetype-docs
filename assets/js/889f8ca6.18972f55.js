"use strict";(self.webpackChunkarchetype_docs=self.webpackChunkarchetype_docs||[]).push([[2759],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,g=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return n?r.createElement(g,o(o({ref:t},s),{},{components:n})):r.createElement(g,o({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7638:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={slug:"binding",title:"TS Binding",authors:["br","gd"],tags:["binding"]},p=void 0,c={permalink:"/blog/binding",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-01-02-binding.md",source:"@site/blog/2023-01-02-binding.md",title:"TS Binding",description:"We are glad to present the new contract binding generation in TypeScript language. We consider this as a major improvement in the way we are working with Archetype and Michelson contracts.",date:"2023-01-02T00:00:00.000Z",formattedDate:"January 2, 2023",tags:[{label:"binding",permalink:"/blog/tags/binding"}],readingTime:2.13,truncated:!0,authors:[{name:"Benoit Rognier",title:"CEO Completium",url:"https://www.linkedin.com/in/benoitrognier/",imageURL:"/img/blog/br.jpeg",key:"br"},{name:"Guillaume Duhamel",title:"CTO Completium",url:"https://www.linkedin.com/in/guillaumeduhamel/",imageURL:"/img/blog/gd.jpeg",key:"gd"}],frontMatter:{slug:"binding",title:"TS Binding",authors:["br","gd"],tags:["binding"]},nextItem:{title:"Version 1.3.2",permalink:"/blog/v132"}},s={authorsImageUrls:[void 0,void 0]},m=[{value:"First example",id:"first-example",level:2},{value:"Test framework",id:"test-framework",level:2},{value:"DApp",id:"dapp",level:2}],d={toc:m};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We are glad to present the new contract binding generation in TypeScript language. We consider this as a ",(0,i.kt)("em",{parentName:"p"},"major improvement")," in the way we are working with Archetype and Michelson contracts."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/cli/introduction"},"Completium CLI")," now provides a simple command to generate the TypeScript binding:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-completium"},"completium-cli generate binding-ts mycontract.arl > mycontract.ts\n")),(0,i.kt)("p",null,"Contract binding refers here to a generated interface to interact with a contract (mainly call its entry points and retrieve data from its storage); this interface is expressed in a native language with native types (here TypeScript)."),(0,i.kt)("p",null,"The main benefits are that it removes the burden of manipulating complex JSON structures of Micheline values; it also integrates well with IDE and, in the case of TypeScript, provides ",(0,i.kt)("em",{parentName:"p"},"strong type checking")," at compilation time, rather than at execution time."),(0,i.kt)("p",null,"As a consequence, it drastically reduces the effort to write ",(0,i.kt)("a",{parentName:"p",href:"/docs/tests/introduction"},"Tests")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/dapps/introduction"},"DApps"),"."),(0,i.kt)("h2",{id:"first-example"},"First example"),(0,i.kt)("p",null,"Consider the following Archetype contract:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'archetype binding_example\n\nvariable msg : string = "Hello Binding World!"\n\nentry exec(\n  l : list<int>,\n  r : rational,\n  o : or<nat, string>) {\n /* \u2026 do something \u2026 */\n}\n')),(0,i.kt)("p",null,"The following code illustrates how to interact in TypeScript with this contract:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { bind_example } from './binding/bind_example'\nimport { get_account } from '@completium/experiment-ts'\n\nconst alice = get_account(\u2018alice\u2019)\u2019\n\nconst msg = await bind_example.get_msg()\n\nassert(msg == \"Hello Binding World!\")\n\nawait bind_example.exec(\n  [new Int(4), new Int(-6)],\n  new Rational(0.2),\n  Or.Right<Nat, string>(\"Hello exec!\"),\n  { as : alice }\n)\n")),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"msg")," storage element is retrieved with the dedicated ",(0,i.kt)("inlineCode",{parentName:"p"},"get_msg")," method of automatically generated binding object ",(0,i.kt)("inlineCode",{parentName:"p"},"bind_example"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"exec")," entry point is called with the method with same name. Its signature is fully specified with native TS types:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"(method) bind_example.exec(l: Int[], r: Rational, o: Or<Nat, string>, p : Optional<Parameters>): Promise<CallResult>\n")),(0,i.kt)("p",null,"The mapping from Archetype/Michelson types to TypeScript types is presented ",(0,i.kt)("a",{parentName:"p",href:"/docs/tests/binding#type-bindings"},"here"),"."),(0,i.kt)("h2",{id:"test-framework"},"Test framework"),(0,i.kt)("p",null,"The Archetype test framework has been totally redesigned to integrate the binding feature seamlessly."),(0,i.kt)("p",null,"The commands below creates an Node.js project in the ",(0,i.kt)("inlineCode",{parentName:"p"},"myproject")," directory and installs the required packages."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-completium"},"$ completium-cli create project myproject\n$ cd ./myproject\n$ npm install\n")),(0,i.kt)("p",null,"The command below generates the bindings for contracts found in ",(0,i.kt)("inlineCode",{parentName:"p"},"./contracts")," directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-completium"},"$ npm run gen-binding\n")),(0,i.kt)("p",null,"The test framework is presented in details ",(0,i.kt)("a",{parentName:"p",href:"/docs/tests/framework"},"here"),"."),(0,i.kt)("h2",{id:"dapp"},"DApp"),(0,i.kt)("p",null,"Binding is also available to integrate smart contracts in Dapps."),(0,i.kt)("p",null,"The command to generate the binding for integration in a DApp:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-completium"},"completium-cli generate binding-dapp-ts mycontract.arl > mycontract.ts\n")),(0,i.kt)("p",null,"General considerations about DApp are presented ",(0,i.kt)("a",{parentName:"p",href:"/docs/dapps/introduction"},"here"),". An fully functional DApp example with source code is presented ",(0,i.kt)("a",{parentName:"p",href:"/docs/dapps/example/"},"here"),"."))}u.isMDXComponent=!0}}]);