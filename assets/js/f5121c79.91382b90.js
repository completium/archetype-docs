"use strict";(self.webpackChunkarchetype_docs=self.webpackChunkarchetype_docs||[]).push([[1641],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,f=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1239:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:0},s="Access",i={unversionedId:"reference/expressions/operators/access",id:"reference/expressions/operators/access",title:"Access",description:"a[b]",source:"@site/docs/reference/expressions/operators/access.md",sourceDirName:"reference/expressions/operators",slug:"/reference/expressions/operators/access",permalink:"/docs/reference/expressions/operators/access",draft:!1,editUrl:"https://github.com/completium/archetype-docs/blob/main/docs/reference/expressions/operators/access.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"docs",previous:{title:"Variables",permalink:"/docs/reference/expressions/variables"},next:{title:"Copy",permalink:"/docs/reference/expressions/operators/copy"}},p={},c=[{value:"<code>a[b]</code>",id:"ab",level:3},{value:"Tuple",id:"tuple",level:4},{value:"Map",id:"map",level:4},{value:"<code>a.b</code>",id:"ab-1",level:3}],l={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"access"},"Access"),(0,a.kt)("h3",{id:"ab"},(0,a.kt)("inlineCode",{parentName:"h3"},"a[b]")),(0,a.kt)("h4",{id:"tuple"},"Tuple"),(0,a.kt)("p",null,"Accesses dimension ",(0,a.kt)("inlineCode",{parentName:"p"},"b")," of ",(0,a.kt)("a",{parentName:"p",href:"/docs/language-basics/composite#tuple"},"tuple")," ",(0,a.kt)("inlineCode",{parentName:"p"},"a"),"; ",(0,a.kt)("inlineCode",{parentName:"p"},"b")," is a ",(0,a.kt)("em",{parentName:"p"},"literal")," integer value in the range ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," to tuple's dimensionality minus 1."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},'const t = (1, "a string", 0xbc); /* t\'s dimensionality is 3 */\nconst i = t[0]; /* 1          */\nconst s = t[1]; /* "a string" */\nconst b = t[2]; /* 0xbc       */\n')),(0,a.kt)("h4",{id:"map"},"Map"),(0,a.kt)("p",null,"Accesses value associated with key ",(0,a.kt)("inlineCode",{parentName:"p"},"b")," in ",(0,a.kt)("a",{parentName:"p",href:"/docs/language-basics/container#map"},"map")," ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," (also ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/types#big_map%3CK,%20V%3E"},(0,a.kt)("inlineCode",{parentName:"a"},"big_map"))," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/types#iterable_big_map%3CK,%20V%3E"},(0,a.kt)("inlineCode",{parentName:"a"},"iterable_big_map")),")."),(0,a.kt)("p",null,"It returns an ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/types#option%3CT%3E"},(0,a.kt)("inlineCode",{parentName:"a"},"option"))," of the associated value, which is ",(0,a.kt)("inlineCode",{parentName:"p"},"none")," if the key is not found."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},'const m : map<nat, string> = [ (1, "a string"); (3, "another") ];\nconst s1 ?= m[1] : "1_NOT_FOUND"; /* "a string"    */\nconst s2 ?= m[3] : "3_NOT_FOUND"; /* "another"     */\n')),(0,a.kt)("h3",{id:"ab-1"},(0,a.kt)("inlineCode",{parentName:"h3"},"a.b")),(0,a.kt)("p",null,"Accesses field ",(0,a.kt)("inlineCode",{parentName:"p"},"b")," of ",(0,a.kt)("a",{parentName:"p",href:"/docs/language-basics/composite#record"},"record")," ",(0,a.kt)("inlineCode",{parentName:"p"},"a"),"."),(0,a.kt)("p",null,"For example, consider the following declaration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"record person {\n  first_name : string;\n  last_name  : string;\n}\n")),(0,a.kt)("p",null,"Then fields are accessed the following way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},'const p = {\n  first_name = "Albert";\n  last_name  = "Michelson"\n};\nconst hello = "Hello " + p.first_name + " " + p.last_name + "!";\n/* hello is "Hello Albert Michelson!" */\n')))}m.isMDXComponent=!0}}]);