"use strict";(self.webpackChunkarchetype_docs=self.webpackChunkarchetype_docs||[]).push([[784],{4048:(e,t,n)=>{var l=n(4836);t.Z=void 0;var a=l(n(4938)),r=n(5893),i=(0,a.default)((0,r.jsx)("path",{d:"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"}),"OpenInNew");t.Z=i},1519:(e,t,n)=>{n.d(t,{Z:()=>E});var l=n(3366),a=n(7462),r=n(7294),i=n(6010),s=n(7192),o=n(1796),c=n(2110),d=n(1539),m=n(8979);function p(e){return(0,m.Z)("MuiDivider",e)}(0,n(6087).Z)("MuiDivider",["root","absolute","fullWidth","inset","middle","flexItem","light","vertical","withChildren","withChildrenVertical","textAlignRight","textAlignLeft","wrapper","wrapperVertical"]);var u=n(5893);const k=["absolute","children","className","component","flexItem","light","orientation","role","textAlign","variant"],y=(0,c.ZP)("div",{name:"MuiDivider",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.absolute&&t.absolute,t[n.variant],n.light&&t.light,"vertical"===n.orientation&&t.vertical,n.flexItem&&t.flexItem,n.children&&t.withChildren,n.children&&"vertical"===n.orientation&&t.withChildrenVertical,"right"===n.textAlign&&"vertical"!==n.orientation&&t.textAlignRight,"left"===n.textAlign&&"vertical"!==n.orientation&&t.textAlignLeft]}})((({theme:e,ownerState:t})=>(0,a.Z)({margin:0,flexShrink:0,borderWidth:0,borderStyle:"solid",borderColor:e.palette.divider,borderBottomWidth:"thin"},t.absolute&&{position:"absolute",bottom:0,left:0,width:"100%"},t.light&&{borderColor:(0,o.Fq)(e.palette.divider,.08)},"inset"===t.variant&&{marginLeft:72},"middle"===t.variant&&"horizontal"===t.orientation&&{marginLeft:e.spacing(2),marginRight:e.spacing(2)},"middle"===t.variant&&"vertical"===t.orientation&&{marginTop:e.spacing(1),marginBottom:e.spacing(1)},"vertical"===t.orientation&&{height:"100%",borderBottomWidth:0,borderRightWidth:"thin"},t.flexItem&&{alignSelf:"stretch",height:"auto"})),(({theme:e,ownerState:t})=>(0,a.Z)({},t.children&&{display:"flex",whiteSpace:"nowrap",textAlign:"center",border:0,"&::before, &::after":{position:"relative",width:"100%",borderTop:`thin solid ${e.palette.divider}`,top:"50%",content:'""',transform:"translateY(50%)"}})),(({theme:e,ownerState:t})=>(0,a.Z)({},t.children&&"vertical"===t.orientation&&{flexDirection:"column","&::before, &::after":{height:"100%",top:"0%",left:"50%",borderTop:0,borderLeft:`thin solid ${e.palette.divider}`,transform:"translateX(0%)"}})),(({ownerState:e})=>(0,a.Z)({},"right"===e.textAlign&&"vertical"!==e.orientation&&{"&::before":{width:"90%"},"&::after":{width:"10%"}},"left"===e.textAlign&&"vertical"!==e.orientation&&{"&::before":{width:"10%"},"&::after":{width:"90%"}}))),h=(0,c.ZP)("span",{name:"MuiDivider",slot:"Wrapper",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.wrapper,"vertical"===n.orientation&&t.wrapperVertical]}})((({theme:e,ownerState:t})=>(0,a.Z)({display:"inline-block",paddingLeft:`calc(${e.spacing(1)} * 1.2)`,paddingRight:`calc(${e.spacing(1)} * 1.2)`},"vertical"===t.orientation&&{paddingTop:`calc(${e.spacing(1)} * 1.2)`,paddingBottom:`calc(${e.spacing(1)} * 1.2)`}))),E=r.forwardRef((function(e,t){const n=(0,d.Z)({props:e,name:"MuiDivider"}),{absolute:r=!1,children:o,className:c,component:m=(o?"div":"hr"),flexItem:E=!1,light:g=!1,orientation:f="horizontal",role:v=("hr"!==m?"separator":void 0),textAlign:_="center",variant:b="fullWidth"}=n,T=(0,l.Z)(n,k),x=(0,a.Z)({},n,{absolute:r,component:m,flexItem:E,light:g,orientation:f,role:v,textAlign:_,variant:b}),w=(e=>{const{absolute:t,children:n,classes:l,flexItem:a,light:r,orientation:i,textAlign:o,variant:c}=e,d={root:["root",t&&"absolute",c,r&&"light","vertical"===i&&"vertical",a&&"flexItem",n&&"withChildren",n&&"vertical"===i&&"withChildrenVertical","right"===o&&"vertical"!==i&&"textAlignRight","left"===o&&"vertical"!==i&&"textAlignLeft"],wrapper:["wrapper","vertical"===i&&"wrapperVertical"]};return(0,s.Z)(d,p,l)})(x);return(0,u.jsx)(y,(0,a.Z)({as:m,className:(0,i.Z)(w.root,c),role:v,ref:t,ownerState:x},T,{children:o?(0,u.jsx)(h,{className:w.wrapper,ownerState:x,children:o}):null}))}))},7682:(e,t,n)=>{n.d(t,{ZP:()=>i});var l=n(7462),a=(n(7294),n(3905));const r={toc:[{value:"String",id:"string",level:3},{value:"Bytes",id:"bytes",level:3},{value:"List",id:"list",level:3},{value:"List of values",id:"list-of-values",level:3}]};function i(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Concatenates two values of type ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"bytes"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"list<T>"),", or a list of values of type ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"bytes"),"."),(0,a.kt)("h3",{id:"string"},"String"),(0,a.kt)("p",null,"Concatenates two ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/types#string"},(0,a.kt)("inlineCode",{parentName:"a"},"string"))," values."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},'const m = concat("Hello ", "Archetype");\n/* m is "Hello Archetype" */\n')),(0,a.kt)("p",null,"It is equivalent to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/expressions/operators/arithmetic#a--b"},(0,a.kt)("inlineCode",{parentName:"a"},"+"))," operator."),(0,a.kt)("h3",{id:"bytes"},"Bytes"),(0,a.kt)("p",null,"Concatenates two ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/types#bytes"},(0,a.kt)("inlineCode",{parentName:"a"},"bytes"))," values."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"const m = concat(0x48656c6c6f, 0x417263686574797065);\n/* m is 0x48656c6c6f417263686574797065 */\n")),(0,a.kt)("h3",{id:"list"},"List"),(0,a.kt)("p",null,"Concatenates two ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/types#list%3CT%3E"},(0,a.kt)("inlineCode",{parentName:"a"},"lists"))," of any element of any type."),(0,a.kt)("p",null,"It is equivalent to the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"var res : list<T> = l;\nfor e in reverse(L) do\n  res.prepend(e)\ndone;\nL := res\n")),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"const l = concat([1; 2; 3], [4; 5]);\n/* l is [1; 2; 3; 4; 5] */\n")),(0,a.kt)("h3",{id:"list-of-values"},"List of values"),(0,a.kt)("p",null,"Concatenates values of a list, of type ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/types#string"},(0,a.kt)("inlineCode",{parentName:"a"},"string"))," or ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/types#bytes"},(0,a.kt)("inlineCode",{parentName:"a"},"bytes"))),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},'const m = concat([ "Hello "; "Archetype "; "world!" ]);\n/* m is "Hello Archetype world!"*/\n')))}i.isMDXComponent=!0},447:(e,t,n)=>{n.d(t,{ZP:()=>i});var l=n(7462),a=(n(7294),n(3905));const r={toc:[]};function i(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Returns the first n elements of list ",(0,a.kt)("inlineCode",{parentName:"p"},"L")," according to its order:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"  h0 := head([0; 1; 2], 2); /* h0 = [0; 1] */\n")),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," is greater than ",(0,a.kt)("inlineCode",{parentName:"p"},"length(L)"),", then the entire list is returned:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"  h1 := head([0; 1; 2], 4); /* h1 = [0; 1; 2] */\n")))}i.isMDXComponent=!0},2461:(e,t,n)=>{n.d(t,{ZP:()=>i});var l=n(7462),a=(n(7294),n(3905));const r={toc:[]};function i(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Returns the last n elements of list ",(0,a.kt)("inlineCode",{parentName:"p"},"L")," according to its order:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"  t0 := tail([0; 1; 2], 2); /* t0 = [1; 2] */\n")),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," is greater than ",(0,a.kt)("inlineCode",{parentName:"p"},"length(L)"),", then the entire list is returned:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"  t1 := tail([0; 1; 2], 4); /* t1 = [0; 1; 2] */\n")))}i.isMDXComponent=!0},77:(e,t,n)=>{n.d(t,{Q:()=>ee,H:()=>$});var l=n(9960),a=n(7294),r=n(7462),i=n(3905);const s={toc:[]};function o(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Returns the absolute value of input ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),"."),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," is of type:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/types#int"},(0,i.kt)("inlineCode",{parentName:"a"},"int")),", ",(0,i.kt)("inlineCode",{parentName:"li"},"abs(t)")," is typed ",(0,i.kt)("inlineCode",{parentName:"li"},"nat")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/types#rational"},(0,i.kt)("inlineCode",{parentName:"a"},"rational")),", ",(0,i.kt)("inlineCode",{parentName:"li"},"abs(t)")," is typed ",(0,i.kt)("inlineCode",{parentName:"li"},"rational"))),(0,i.kt)("p",null,"The function may be considered as a non-failing conversion function from ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"nat"),"."))}o.isMDXComponent=!0;const c={toc:[]};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Executes ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Partial_application"},"partial application")," of a lambda value ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," to an argument value ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"const plus_x = lambda<nat>((a : nat * nat) -> a[0] + a[1]);\nconst plus_three = apply_lambda(plus_x, 3);\nconst r = exec_lambda(plus_three, 1);\n/* r is equal to 4 */\n")))}d.isMDXComponent=!0;const m={toc:[]};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Calls a contract's ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/declarations/view"},"view")," and returns an ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#option%3CT%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"option<T>"))," of the result."),(0,i.kt)("p",null,"For example, consider the following view declaration in contract ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"view affine(x : rational) : rational {\n    return (2 * x + 3)\n}\n")),(0,i.kt)("p",null,"Call this function from contract ",(0,i.kt)("inlineCode",{parentName:"p"},"B")," with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'const r ?= call_view<rational>(addr_A, "affine", -3/2) : "AFFINE_ERR"\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"When calling a ",(0,i.kt)("em",{parentName:"p"},"local")," view (defined in current contract), it is sufficient to prefix the view name by ",(0,i.kt)("inlineCode",{parentName:"p"},"self."),". For example, calling the local ",(0,i.kt)("inlineCode",{parentName:"p"},"affine")," view is done as follows:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'const r ?= self.affine(-3/2) : "AFFINE_ERR"\n'))))}p.isMDXComponent=!0;var u=n(7682);const k={toc:[]};function y(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Creates an operation for contract origination. The returned operation is then to be added to the ",(0,i.kt)("inlineCode",{parentName:"p"},"operations")," builtin list of generated operations."),(0,i.kt)("p",null,"For example, in order to deploy a contract from Michelson source ",(0,i.kt)("inlineCode",{parentName:"p"},"simple.tz")," with natural ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," as initial storage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'archetype anothercontract\n\nimport simple from "simple.tz"\n\nentry exec() {\n  const initial_storage : nat = 0;\n  const op_addr : (operation * address) =\n    create_contract(simple, none, 0tz, initial_storage);\n  operations := [op_addr[0]]\n}\n')),(0,i.kt)("p",null,"It is also possible to create a contract from an Archetype source."),(0,i.kt)("p",null,"Instead of passing the initial storage, a record of contract ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/declarations/contract#parameters"},"parameters")," is passed."),(0,i.kt)("p",null,"Say for example that the deployed contract declares a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/declarations/contract#variable"},"variable parameter")," named ",(0,i.kt)("inlineCode",{parentName:"p"},"owner")," typed ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'archetype anothercontract\n\nimport "simple.arl"\n\nentry exec() {\n  const op_addr : (operation * address) =\n    create_contract(simple, none, 0tz, { owner = caller });\n  operations := [op_addr[0]]\n}\n')),(0,i.kt)("p",null,"When the contract declares a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/declarations/contract#constant"},"constant parameter"),", then only a literal value can be passed. Say for example that the created contract has a constant parameter named ",(0,i.kt)("inlineCode",{parentName:"p"},"total_amount")," typed ",(0,i.kt)("inlineCode",{parentName:"p"},"nat"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'archetype anothercontract\n\nimport "simple.arl"\n\nentry exec() {\n  const op_addr : (operation * address) =\n    create_contract(simple, none, 0tz, { total_amount = 1_000_000 });\n  operations := [op_addr[0]]\n}\n')))}y.isMDXComponent=!0;const h={toc:[]};function E(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Applies a lambda value ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," to argument ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"const plus_three = lambda((x : nat) -> x + 3);\nconst r = exec_lambda(plus_three, 1);\n/* r is equal to 4 */\n")))}E.isMDXComponent=!0;const g={toc:[]};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Horner%27s_method"},"Horner's method")," applied to (the polynomial development of) the exponential function."),(0,i.kt)("p",null,"It is equivalent to the following archetype code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"function exp_horner(x : rational, precision : nat) : rational {\n  var r : rational = 1 + x / precision;\n  iter i to precision - 1 do\n      r := 1 + x * r / (precision - i)\n  done;\n  return r\n}\n")))}f.isMDXComponent=!0;const v={toc:[]};function _(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"fold")," applies the ",(0,i.kt)("em",{parentName:"p"},"inlined")," function ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"left")," of initial value ",(0,i.kt)("inlineCode",{parentName:"p"},"i"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if it returns a ",(0,i.kt)("inlineCode",{parentName:"li"},"left")," value, it applies ",(0,i.kt)("inlineCode",{parentName:"li"},"f")," to the result of ",(0,i.kt)("inlineCode",{parentName:"li"},"f(i)"),", and iteratively applies f on as long as it returns a ",(0,i.kt)("inlineCode",{parentName:"li"},"left")," value."),(0,i.kt)("li",{parentName:"ul"},"if it returns a ",(0,i.kt)("inlineCode",{parentName:"li"},"right")," value, iteration stops, and the ",(0,i.kt)("inlineCode",{parentName:"li"},"right")," value is returned.")),(0,i.kt)("p",null,"Hence the application may be represented as:\n",(0,i.kt)("inlineCode",{parentName:"p"},"fold(i, f) = right(f(...(f(i))))")),(0,i.kt)("p",null,"For example, the following expression ",(0,i.kt)("em",{parentName:"p"},"reverses")," the list ",(0,i.kt)("inlineCode",{parentName:"p"},"l")," typed ",(0,i.kt)("inlineCode",{parentName:"p"},"list<nat>"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"var empty : list<nat> = [];\nvar p : or<list<nat> * list<nat>, list<nat>> = left<list<nat>> ((empty, l));\nres := fold (p, x ->\n  match x[1] with\n   | hd::tail -> left<list<nat>> ((prepend(x[0], hd), tail))\n   | []       -> right<list<nat> * list<nat>>(x[0])\n  end\n)\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Folded function is inlined and cannot be a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#lambda%3CT,%20R%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"lambda"))," variable.")))}_.isMDXComponent=!0;const b={toc:[]};function T(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Returns an ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#option%3CT%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"option"))," of contract's entrypoint (typed ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#contract%3CT%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"contract<T>")),") to the entrypoint ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," with argument ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," at contract address ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),"."),(0,i.kt)("p",null,"For example, consider the following contract at address ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"archetype example\n\nentry exec(n : nat) { /* ... */ }\n\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"exec")," entrypoint may be retrieved with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'const e = get_entrypoint("%exec", a) ? the : fail("EXEC_NOT_FOUND")\n')),(0,i.kt)("p",null,"The entrypoint may then be used as an argument of ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/expressions/builtins#make_operation(a%20:%20tez,%20c%20:%20contract%3CT%3E,%20arg%20:%20T)"},(0,i.kt)("inlineCode",{parentName:"a"},"make_operation")),"."))}T.isMDXComponent=!0;const x={toc:[]};function w(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},x,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if an optional value ",(0,i.kt)("inlineCode",{parentName:"p"},"o")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"some"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," otherwise."),(0,i.kt)("p",null,"It is equivalent to the following expression:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"o ? false : true\n")),(0,i.kt)("p",null,"or equivalently:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"match o with\n| some(v) -> false\n| none    -> true\nend\n")))}w.isMDXComponent=!0;const N={toc:[]};function C(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},N,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if an optional value ",(0,i.kt)("inlineCode",{parentName:"p"},"o")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"some"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,i.kt)("p",null,"It is equivalent to the following expression:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"o ? true : false\n")),(0,i.kt)("p",null,"or equivalently:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"match o with\n| some(v) -> true\n| none    -> false\nend\n")))}C.isMDXComponent=!0;const Z={toc:[]};function Q(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},Z,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Builds a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#lambda%3CT,%20R%3E"},"lambda")," expression from michelson code."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"const size : lambda<string, nat> = lambda_michelson<string, nat>({SIZE});\n")))}Q.isMDXComponent=!0;const L={toc:[]};function A(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},L,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Constructs a ",(0,i.kt)("em",{parentName:"p"},"left")," value typed ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#or%3CT1,%20T2%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"or<L, R>")),"."),(0,i.kt)("p",null,"The left type ",(0,i.kt)("inlineCode",{parentName:"p"},"L")," may be omitted as it can be inferred, but the right type ",(0,i.kt)("inlineCode",{parentName:"p"},"R")," is mandatory."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"const o = left<string>(2)\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"o")," is then typed ",(0,i.kt)("inlineCode",{parentName:"p"},"option<nat, string>"),". It is equivalent to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"const o = left<nat, string>(2)\n")))}A.isMDXComponent=!0;var B=n(447),M=n(2461);const P={toc:[]};function R(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},P,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Creates an asset from identifier and data (key and value)."),(0,i.kt)("p",null,"It is typically convenient when an asset data is provided as an entry point parameter."),(0,i.kt)("p",null,"Consider for example the following asset declaration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"asset vehicle {\n  vin          : string;\n  nbrepairs    : nat  = 0;\n  dateofrepair : date = now;\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"add_vehicle")," entry point below provides a vehicle data as a record:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"entry add_vehicle(k : asset_key<vehicle>, d : asset_value<vehicle>) {\n  vehicle.put(make_asset(k, d))\n}\n")))}R.isMDXComponent=!0;const S={toc:[]};function I(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},S,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Makes an event operation."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'const op : operation = make_event<nat>("%sample", 2);\noperations := prepend(operations, op);\n')))}I.isMDXComponent=!0;const D={toc:[{value:"List",id:"list",level:3},{value:"Map",id:"map",level:3},{value:"Option",id:"option",level:3}]};function K(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},D,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Maps a value of type ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#list%3CT%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"list<T>")),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#map%3CK,%20V%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"map<K, V>")),", or ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#option%3CT%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"option<T>")),"."),(0,i.kt)("h3",{id:"list"},"List"),(0,i.kt)("p",null,"Applies an inlined function of type ",(0,i.kt)("inlineCode",{parentName:"p"},"T -> T")," on each element of a list of elements typed ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," and returns a new list."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"const l = map([ 1; 2 ; 3 ], x -> 2 * x + 1);\n/* l is [ 3; 5; 7 ] */\n")),(0,i.kt)("h3",{id:"map"},"Map"),(0,i.kt)("p",null,"Applies an inlined function of type ",(0,i.kt)("inlineCode",{parentName:"p"},"(K * V) -> V")," on each value of a map with key of type ",(0,i.kt)("inlineCode",{parentName:"p"},"K")," and value of type ",(0,i.kt)("inlineCode",{parentName:"p"},"V"),"; it returns a new map."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'const m = map([ ("a", 5); ("b", 6); ("c", 7) ], x -> 2 * x[1] + 1)\n/* m is [ ("a", 11); ("b", 13); ("c", 15) ] */\n')),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," intput of the inlined mapping function is a ",(0,i.kt)("em",{parentName:"p"},"pair")," (key and value) of the map; hence ",(0,i.kt)("inlineCode",{parentName:"p"},"x[0]")," is the key and ",(0,i.kt)("inlineCode",{parentName:"p"},"x[1]")," is the value."),(0,i.kt)("h3",{id:"option"},"Option"),(0,i.kt)("p",null,"Applies an inlined function of type ",(0,i.kt)("inlineCode",{parentName:"p"},"T -> T")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"some")," value of an ",(0,i.kt)("inlineCode",{parentName:"p"},"option<T>")," value, or returns ",(0,i.kt)("inlineCode",{parentName:"p"},"none"),"."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"const o1 = map(some(2), x -> 2 * x + 1);\n/* o1 is some(5) */\nconst o2 = map(none, x -> 2 * x + 1);\n/* o2 is none */\n")),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"}," ? :")," syntax is also available to fold an option. The above example is then equivalent to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"const o1 = some(2) ? 2 * the + 1 : none;\n/* o1 is some(5) */\n")))}K.isMDXComponent=!0;const z={toc:[]};function F(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},z,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Builds a value from Michelson instructions."),(0,i.kt)("p",null,"For example, the following michelson instructions return the sha3 value of the packed concatenation of ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"b"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'archetype michelson_expression\n\nvariable res : bytes = 0x\n\nentry exec () {\n  const a = "Hello ";\n  const b = "Archetype!";\n  res := michelson<bytes> { CONCAT; PACK; SHA3 } [a : b]\n}\n')))}F.isMDXComponent=!0;const V={toc:[]};function O(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},V,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Converts a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#tez"},(0,i.kt)("inlineCode",{parentName:"a"},"tez"))," value in mutez (millionth of tez) to a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#nat"},(0,i.kt)("inlineCode",{parentName:"a"},"nat"))," value."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"const n = mutez_to_nat(5tz);\n/* n is 5000000 */\n")))}O.isMDXComponent=!0;const X={toc:[]};function H(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},X,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Returns an option of the ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),"th element of list ",(0,i.kt)("inlineCode",{parentName:"p"},"l"),"."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Implementation is in O(n) complexity (Michelson lists are linked).")))}H.isMDXComponent=!0;const U={toc:[]};function j(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},U,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Constructs a ",(0,i.kt)("em",{parentName:"p"},"right")," value typed ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#or%3CT1,%20T2%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"or<L, R>")),"."),(0,i.kt)("p",null,"The left type ",(0,i.kt)("inlineCode",{parentName:"p"},"L")," is mandatory, while the right type ",(0,i.kt)("inlineCode",{parentName:"p"},"R")," may be omited as it can be inferred."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'const o = right<nat>("abc")\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"o")," is then typed ",(0,i.kt)("inlineCode",{parentName:"p"},"option<nat, string>"),". It is equivalent to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'const o = right<nat, string>("abc")\n')))}j.isMDXComponent=!0;const q={toc:[]};function G(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},q,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Extracts a section of a string or bytes ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," and returns it as a new string or bytes."),(0,i.kt)("p",null,"The section starts at offset postion ",(0,i.kt)("inlineCode",{parentName:"p"},"o")," is has a length of ",(0,i.kt)("inlineCode",{parentName:"p"},"l"),"."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'const s = "Hello Archetype World!";\nconst e = slice(s, 6, 9) ? the : "";  /* e is "Archetype" */\nconst b = 0x48656c6c6f2041726368657479706520576f726c64;\nconst c = slice(b, 12, 18); /* c is some(0x417263686574797065) */\nconst f = slice(b, 30, 40); /* f is none */\n')))}G.isMDXComponent=!0;const W={toc:[]};function Y(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},W,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Deserializes a value of type ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#bytes"},(0,i.kt)("inlineCode",{parentName:"a"},"bytes"))," into the corresponding value of type ",(0,i.kt)("inlineCode",{parentName:"p"},"option<T>"),"."),(0,i.kt)("p",null,"For example, suppose ",(0,i.kt)("inlineCode",{parentName:"p"},"p")," is a bytes value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'const v ?= unpack<nat>(p) : "UNPACK_FAILED";\n/* v is typed nat */\n')))}Y.isMDXComponent=!0;const J="https://tezos.gitlab.io/michelson-reference/",$=e=>e.replace(/ /g,"%20"),ee={make_sandbox_exec_operation:{sig:"make_sandbox_exec_operation(f : lambda<list<ticket<nat * option<bytes>>>, l : list<ticket<nat * option<bytes>>, a : tez)",desc:a.createElement("div",null,"Makes an operation to sandbox contract that executes the ",a.createElement("code",null,"f")," lambda."),parameters:[{type:"lambda<list<ticket<nat * option<bytes>>>",alias:"f",withLink:!1,desc:a.createElement("div",null,"Lambda to execute in sandbox")},{type:"list<ticket<nat * option<bytes>>",alias:"l",withLink:!1,desc:a.createElement("div",null,"List of tickets to pass to ",a.createElement("code",null,"f"))},{type:"tez",alias:"a",desc:a.createElement("div",null,"operation's transferred amount")}],returns:{type:"operation",desc:a.createElement("div",null,"Call operation to sandbox contract")}},call_view:{sig:"call_view<T>(a : address, id : string, arg : X)",desc:a.createElement(p,null),parameters:[{type:"address",alias:"a",desc:a.createElement("div",null,"Address of the contract to call")},{type:"string",alias:"id",desc:a.createElement("div",null,"Name of the view; must be a string literal (e.g. ",a.createElement("code",null,'"my_view"'),")")},{type:"X",withLink:!1,alias:"arg",desc:a.createElement("div",null,"Argument of the called view")}],returns:{type:"option<T>",desc:a.createElement("div",null,a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"none")," if a problem occured (view not found, or view execution failed)"),a.createElement("li",null,a.createElement("code",null,"some(v)"),", ",a.createElement("code",null,"v")," being the value returned by the view")))},michelson:"VIEW",michelson_ref_url:J+"#VIEW",related:[{keyword:"View",link:"/docs/reference/declarations/view"}]},make_asset:{sig:"make_asset(k : asset_key<A>, v : asset_value<A>)",desc:a.createElement(R,null),parameters:[{type:"asset_key<A>",alias:"k",desc:a.createElement("div",null,"Asset identifier")},{type:"asset_value<A>",alias:"v",desc:a.createElement("div",null,"Asset value")}],returns:{type:"A",withLink:!1,desc:a.createElement("div",null,"Asset literal with identifier ",a.createElement("code",null,"k")," and data ",a.createElement("code",null,"v"),".")},related:[{keyword:"Asset",link:"/docs/asset"}]},make_big_map:{sig:"make_big_map<K, T>(m)",desc:a.createElement("div",null,"Create a big_map from literal.",a.createElement("br",null),"This is used for example to create an empty big map with ",a.createElement("code",null,"make_big_map<K, V>([])"),"."),parameters:[{type:"big_map",alias:"m",desc:a.createElement("div",null,"Literal of big_map")}],returns:{type:"big_map<K, T>",desc:a.createElement("div",null,"Returns big_map")}},make_big_map:{sig:"make_big_map<K, V>(m)",desc:a.createElement("div",null,"Makes a big_map from ",a.createElement("i",null,"literal")," or variable.",a.createElement("br",null),"This is useful to solve the type amiguity of literals, like for example the empty big_map ",a.createElement("code",null,"[]"),"."),parameters:[{type:"big_map<K, V>",alias:"m",desc:a.createElement("div",null,"Big_map")}],returns:{type:"big_map<K, V>",desc:a.createElement("div",null,"Returns big_map")}},make_event:{sig:"make_event<T>(tag, v)",desc:a.createElement(I,null),parameters:[{type:"string",alias:"tag",desc:a.createElement("div",null,"The tag of the event, must be a literal string.")},{type:"T",alias:"v",desc:a.createElement("div",null,"The value of generated event")}],returns:{type:"operation",desc:a.createElement("div",null,"The generated event")},related:[{keyword:"emit",link:"/docs/reference/instructions/operation#emit"}]},make_map:{sig:"make_map<K, V>(m)",desc:a.createElement("div",null,"Makes a map from ",a.createElement("i",null,"literal")," or variable.",a.createElement("br",null),"This is useful to solve the type amiguity of literals, like for example the empty map ",a.createElement("code",null,"[]"),"."),parameters:[{type:"map<K, V>",alias:"m",desc:a.createElement("div",null,"Map")}],returns:{type:"map<K, V>",desc:a.createElement("div",null,"Returns map")}},make_list:{sig:"make_list<T>(l)",desc:a.createElement("div",null,"Makes a list from ",a.createElement("i",null,"literal")," or variable.",a.createElement("br",null),"This is useful to solve the type amiguity of literals, like for example the empty list ",a.createElement("code",null,"[]"),"."),parameters:[{type:"list<T>",alias:"l",desc:a.createElement("div",null,"List")}],returns:{type:"list<T>",desc:a.createElement("div",null,"Returns list")}},make_set:{sig:"make_set<T>(s)",desc:a.createElement("div",null,"Makes a set from ",a.createElement("i",null,"literal")," or variable.",a.createElement("br",null),"This is useful to solve the type amiguity of literals, like for example the empty set ",a.createElement("code",null,"[]"),"."),parameters:[{type:"set<T>",alias:"s",desc:a.createElement("div",null,"Set")}],returns:{type:"set<T>",desc:a.createElement("div",null,"Returns set")}},make_operation:{sig:"make_operation(a : tez, c : contract<T>, arg : T)",desc:a.createElement("div",null,"Makes an operation."),parameters:[{type:"tez",alias:"a",desc:a.createElement("div",null,"The amount of tez sent with the operation")},{type:"contract<T>",alias:"c",desc:a.createElement("div",null,"Entrypoint with argument of type ",a.createElement("code",null,"T")," (as returned by ",a.createElement("code",null,"get_entrypoint"),")")},{type:"T",withLink:!1,alias:"arg",desc:a.createElement("div",null,"The argument of the called entrypoint")}],returns:{type:"operation",desc:a.createElement("div",null,"The generated operation")},michelson:"TRANSFER_TOKENS",michelson_ref_url:J+"#instr-TRANSFER_TOKENS",related:[{keyword:"Operations",link:"/docs/reference/instructions/operation"},{keyword:"get_entrypoint",link:"/docs/reference/expressions/builtins#get_entrypoint<T>(s,%20a%20:%20address)"}]},fold:{sig:"fold (i : or<L, R>, f : L -> or<L, R>)",desc:a.createElement(_,null),parameters:[{type:"or<L, R>",alias:"i",desc:a.createElement("div",null,"Initial value")},{type:"function",withLink:!1,alias:"f",desc:a.createElement("div",null,a.createElement("i",null,"Inlined")," folding function that:",a.createElement("ul",null,a.createElement("li",null,"takes a parameter of type ",a.createElement("code",null,"L")),a.createElement("li",null,"returns a values of type ",a.createElement("code",null,"or<L, R>")," ")))}],returns:{type:"R",withLink:!1,desc:a.createElement("div",null,"Folded value")},michelson:"LOOP_LEFT",michelson_ref_url:J+"#instr-LOOP_LEFT",related:[{keyword:"or",link:"/docs/reference/types#or<T1,%20T2>"},{keyword:"left",link:"/docs/reference/expressions/builtins#left<(L,)?%20T>(x%20:%20L)"},{keyword:"right",link:"/docs/reference/expressions/builtins#right<T(,%20R)>(x%20:%20R)"}]},map:{sig:"map",desc:a.createElement(K,null),parameters:[{type:"-",withLink:!1,alias:"s",desc:a.createElement("div",null,"Input to map of type:",a.createElement("ul",null,a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#list<T>"},a.createElement("code",null,"list<T>"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#map<K,%20V>"},a.createElement("code",null,"map<K, V>"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#option<T>"},a.createElement("code",null,"option<T>")))))},{type:"function",withLink:!1,alias:"f",desc:a.createElement("div",null,a.createElement("i",null,"Inlined")," mapping function.")}],returns:{type:"-",withLink:!1,desc:a.createElement("div",null,"Returns a mapped value of the same type as the input.")},michelson:"MAP",michelson_ref_url:J+"#instr-MAP",related:[{keyword:"list<T>",link:"/docs/reference/types#list<T>"},{keyword:"map<K, V>",link:"/docs/reference/types#map<K,%20V>"},{keyword:"option<T>",link:"/docs/reference/types#option<T>"},{keyword:"? :",link:"/docs/reference/expressions/controls#a--b--c"}]},exec_lambda:{sig:"exec_lambda(f : lambda<T, R>, x : T)",desc:a.createElement(E,null),parameters:[{type:"lambda<T, R>",alias:"f",desc:a.createElement("div",null,"Lambda to execute")},{type:"T",withLink:!1,alias:"x",desc:a.createElement("div",null,"Argument")}],returns:{type:"T",desc:a.createElement("div",null,"Evaluation of ",a.createElement("i",null,"f(x)"))},michelson:"EXEC",michelson_ref_url:J+"#instr-EXEC",related:[{keyword:"lambda",link:"/docs/reference/types#lambda<T,%20R>"},{keyword:"apply_lambda",link:"/docs/reference/expressions/builtins#apply_lambda(f%20:%20lambda<A%20*%20T,%20R>,%20x%20:%20A)"}]},exp_horner:{sig:"exp_horner(v : rational, p : nat)",desc:a.createElement(f,null),parameters:[{type:"rational",alias:"v",desc:a.createElement("div",null,"exponential argument")},{type:"nat",alias:"p",desc:a.createElement("div",null,"precision (number of iterations)")}],returns:{type:"rational",desc:a.createElement("div",null,"Exponential of ",a.createElement("code",null,"v"))}},apply_lambda:{sig:"apply_lambda(f : lambda<A * T, R>, x : A)",desc:a.createElement(d,null),parameters:[{type:"lambda<A*T,R>",withLink:!1,alias:"f",desc:a.createElement("div",null,"Lambda to partially apply")},{type:"A",alias:"x",withLink:!1,desc:a.createElement("div",null,"Lambda argument")}],returns:{type:"lambda<T, R>",desc:a.createElement("div",null,"Partially applied lambda value")},michelson:"APPLY",michelson_ref_url:J+"#instr-APPLY",related:[{keyword:"lambda",link:"/docs/reference/types#lambda<T,%20R>"},{keyword:"exec_lambda",link:"/docs/reference/expressions/builtins#exec_lambda(f%20:%20lambda<T,%20R>,%20x%20:%20T)"}]},sub_nat:{sig:"sub_nat(a : nat, b : nat)",desc:a.createElement("div",null,"Subtracts ",a.createElement("code",null,"a")," to ",a.createElement("code",null,"b")," and returns an option of nat value."),parameters:[{type:"nat",alias:"a",desc:a.createElement("div",null,"Left-hand side operand to subtract")},{type:"nat",alias:"b",desc:a.createElement("div",null,"Right-hand side operand to subtract")}],returns:{type:"option<nat>",withLink:!1,desc:a.createElement("div",null,"Option of nat value:",a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"some")," of ",a.createElement("code",null,"a - b")," when ",a.createElement("code",null,"a >= b")),a.createElement("li",null,a.createElement("code",null,"none")," otherwise")))},related:[{keyword:"nat",link:"/docs/reference/types#nat"}]},sub_mutez:{sig:"sub_mutez(a : tez, b : tez)",desc:a.createElement("div",null,"Subtracts ",a.createElement("code",null,"a")," to ",a.createElement("code",null,"b")," and returns an option of tez value."),parameters:[{type:"tez",alias:"a",desc:a.createElement("div",null,"Left-hand side operand to subtract")},{type:"tez",alias:"b",desc:a.createElement("div",null,"Right-hand side operand to subtract")}],returns:{type:"option<tez>",desc:a.createElement("div",null,a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"none")," if ",a.createElement("code",null,"a - b")," is negative"),a.createElement("li",null,a.createElement("code",null,"some(v)"),", if ",a.createElement("code",null,"a - b")," is positive, with ",a.createElement("code",null,"v = a - b"))))},michelson:"SUB_MUTEZ",michelson_ref_url:J+"#instr-SUB_MUTEZ",related:[{keyword:"tez",link:"/docs/reference/types#tez"}]},lambda_michelson:{sig:"lambda_michelson<T, R>({ MICHELSON })",desc:a.createElement(Q,null),parameters:[{type:"Michelson",alias:"code",withLink:!1,desc:a.createElement("div",null,"Michleson code that takes a value of type ",a.createElement("code",null,"T")," and returns a value of type ",a.createElement("code",null,"R"))}],returns:{type:"lambda<T, R>",desc:"The lambda value"}},left:{sig:"left<(L,)? T>(x : L)",desc:a.createElement(A,null),parameters:[{type:"L",alias:"x",withLink:!1,desc:a.createElement("div",null,"Value to convert")}],returns:{type:"or<L, T>",desc:a.createElement("div",null,"Value converted to left literal")},michelson:"LEFT",michelson_ref_url:J+"#instr-LEFT",related:[{keyword:"or",link:"/docs/reference/types#or<T1,%20T2>"},{keyword:"right",link:"/docs/reference/expressions/builtins#right<T(,%20R)>(x%20:%20R)"}]},right:{sig:"right<T(, R)>(x : R)",desc:a.createElement(j,null),parameters:[{type:"R",withLink:!1,alias:"x",desc:a.createElement("div",null,"Value to convert")}],returns:{type:"or<T, R>",desc:a.createElement("div",null,"Value converted to right literal")},michelson:"RIGHT",michelson_ref_url:J+"#instr-RIGHT",related:[{keyword:"or",link:"/docs/reference/types#or<T1,%20T2>"},{keyword:"left",link:"/docs/reference/expressions/builtins#left<(L,)?%20T>(x%20:%20L)"}]},none:{sig:"none<T>",desc:a.createElement("div",null,"Optional ",a.createElement("code",null,"none")," value for type ",a.createElement("code",null,"option<T>"),"."),parameters:[],returns:{type:"option<T>",desc:a.createElement("div",null,"Value none")},michelson:"NONE",michelson_ref_url:J+"#instr-NONE",related:[{keyword:"Option",link:"/docs/language-basics/composite#option"},{keyword:"some",link:"/docs/reference/expressions/builtins#some(v%20:%20T)"},{keyword:"math with",link:"/docs/reference/instructions/control#match-with"}]},some:{sig:"some(v : T)",desc:a.createElement("div",null,"Optional ",a.createElement("code",null,"some")," value for type ",a.createElement("code",null,"option<T>"),"."),parameters:[{type:"T",alias:"v",desc:a.createElement("div",null,"Some value")}],returns:{type:"option<T>",desc:a.createElement("div",null,"Optional value of ",a.createElement("code",null,"v"))},michelson:"SOME",michelson_ref_url:J+"#instr-SOME",related:[{keyword:"Option",link:"/docs/language-basics/composite#option"},{keyword:"none",link:"/docs/reference/expressions/builtins#none<T>"},{keyword:"math with",link:"/docs/reference/instructions/control#match-with"}]},add:{sig:"add(s : set<T>, e : T)",desc:a.createElement("div",null,"Returns a copy of set ",a.createElement("code",null,"s")," augmented with element ",a.createElement("code",null,"e"),".",a.createElement("p",null),"If ",a.createElement("code",null,"e")," is already present in ",a.createElement("code",null,"s"),", it returns a copy of ",a.createElement("code",null,"s"),"."),parameters:[{type:"set<T>",alias:"s",desc:a.createElement("div",null,"Input set")},{type:"T",withLink:!1,alias:"e",desc:a.createElement("div",null,"Element to add")}],returns:{type:"set<T>",desc:a.createElement("div",null,"Set that contains all elements of ",a.createElement("code",null,"s")," and element ",a.createElement("code",null,"e"))},michelson:"UPDATE",michelson_ref_url:J+"#instr-UPDATE",related:[{keyword:"Set",link:"/docs/language-basics/container#set"},{keyword:"remove",link:"/docs/reference/expressions/builtins#remove(c%20:%20C,%20i%20:%20T)"}]},prepend:{sig:"prepend(l : list<T>, e : T)",desc:a.createElement("div",null,"Adds element ",a.createElement("code",null,"e")," at the beginning of list ",a.createElement("code",null,"l"),"."),parameters:[{type:"list<T>",alias:"l",desc:a.createElement("div",null,"List")},{type:"T",alias:"e",desc:a.createElement("div",null,"Element to add")}],returns:{type:"list<T>",desc:a.createElement("div",null,"List with element ",a.createElement("code",null,"e")," followed by list ",a.createElement("code",null,"l")," of elements.")},michelson:"CONS",michelson_ref_url:J+"#instr-CONS",related:[{keyword:"List",link:"/docs/language-basics/container#list"}]},nth:{sig:"nth(l : list<T>, n : nat)",desc:a.createElement(H,null),parameters:[{type:"list<T>",alias:"l",desc:a.createElement("div",null,"List of elements typed ",a.createElement("code",null,"T"))},{type:"nat",alias:"n",desc:a.createElement("div",null,"Position in range ",a.createElement("code",null,"0")," to ",a.createElement("code",null,"length(l)-1"))}],returns:{type:"option<T>",desc:a.createElement("div",null,a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"some")," of element at position ",a.createElement("code",null,"n")),a.createElement("li",null,a.createElement("code",null,"none")," when ",a.createElement("code",null,"n")," is out of bound")))},related:[{keyword:"List",link:"/docs/language-basics/container#list"},{keyword:"length",link:"/docs/reference/expressions/builtins#length(o%20:%20T)"}]},reverse:{sig:"reverse(l : list<T>)",desc:a.createElement("div",null,"Returns a copy of list ",a.createElement("code",null,"l")," with elements in reverse order."),parameters:[{type:"list<T>",alias:"l",desc:a.createElement("div",null,"List to reverse")}],returns:{type:"list<T>",desc:a.createElement("div",null,"List with reversed elements")},related:[{keyword:"List",link:"/docs/language-basics/container#list"},{keyword:"reverse",link:"/docs/reference/instructions/containers#lreverse"},{keyword:"prepend",link:"/docs/reference/expressions/builtins#prepend(l%20:%20list<T>,%20e%20:%20T)"}]},put:{sig:"put(m : map<K, V>, k : K, v : V)",desc:a.createElement("div",null,"Associates value ",a.createElement("code",null,"v")," with key ",a.createElement("code",null,"k")," in map (",a.createElement("code",null,"map"),", ",a.createElement("code",null,"big_map")," or ",a.createElement("code",null,"iterable_map"),")",a.createElement("code",null,"m"),"."),parameters:[{type:"map",alias:"m",desc:a.createElement("div",null,"Map (or ",a.createElement(l.Z,{to:"/docs/reference/types#big_map<K,%20V>"},a.createElement("code",null,"big_map"))," or ",a.createElement(l.Z,{to:"/docs/reference/types#iterable_big_map<K,%20V>"},a.createElement("code",null,"iterable_big_map")),")")},{type:"K",alias:"k",desc:a.createElement("div",null,"Key to put")},{type:"V",alias:"v",desc:a.createElement("div",null,"Value to put")}],returns:{type:"map<K, V>",desc:a.createElement("div",null,"Copy of map ",a.createElement("code",null,"m")," whith new key-value pair (returns same type as ",a.createElement("code",null,"m"),")")},michelson:"UPDATE",michelson_ref_url:J+"#instr-UPDATE",related:[{keyword:"Map",link:"/docs/language-basics/container#map"},{keyword:"remove",link:"/docs/reference/expressions/builtins#remove(c%20:%20C,%20i%20:%20T)"},{keyword:"update",link:"/docs/reference/expressions/builtins#update(m%20:%20map<K,%20V>,%20k%20:%20K,%20v%20:%20option<V>)"}]},update_set:{sig:"update(s : set<T>, e : T, b : bool)",index:"update",desc:a.createElement("div",null,"Adds or removes element ",a.createElement("code",null,"e")," in set ",a.createElement("code",null,"s"),": ",a.createElement("ul",null,a.createElement("li",null,"removes ",a.createElement("code",null,"e")," when ",a.createElement("code",null,"b")," is ",a.createElement("code",null,"false")),a.createElement("li",null,"adds ",a.createElement("code",null,"e")," when ",a.createElement("code",null,"b")," is ",a.createElement("code",null,"true")))),parameters:[{type:"set<T>",alias:"s",desc:a.createElement("div",null,"Set to add or remove element from")},{type:"T",withLink:!1,alias:"e",desc:a.createElement("div",null,"element to add/remove")},{type:"bool",alias:"b",desc:a.createElement("div",null,"Optional value to decide to add or remove")}],returns:{type:"setT>",desc:a.createElement("div",null,"Copy of set ",a.createElement("code",null,"s")," with element ",a.createElement("code",null,"e")," added or removed.")},related:[{keyword:"Set",link:"/docs/language-basics/container#set"},{keyword:"add",link:"/docs/reference/instructions/containers#sadde"},{keyword:"remove",link:"/docs/reference/instructions/containers#sremovee"}]},update_map:{sig:"update(m : map<K, V>, k : K, v : option<T>)",index:"update",desc:a.createElement("div",null,"Adds or removes value ",a.createElement("code",null,"v")," from associated to key ",a.createElement("code",null,"k")," in map ",a.createElement("code",null,"m"),": ",a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"none")," removes key ",a.createElement("code",null,"k")),a.createElement("li",null,a.createElement("code",null,"some(v)"),", adds key ",a.createElement("code",null,"k")," with value ",a.createElement("code",null,"v")))),parameters:[{type:"map<K, V>",alias:"m",desc:a.createElement("div",null,"Map (or ",a.createElement(l.Z,{to:"/docs/reference/types#big_map<K,%20V>"},a.createElement("code",null,"big_map"))," or ",a.createElement(l.Z,{to:"/docs/reference/types#iterable_big_map<K,%20V>"},a.createElement("code",null,"iterable_big_map")),")")},{type:"K",withLink:!1,alias:"k",desc:a.createElement("div",null,"Key to add/remove")},{type:"option<T>",alias:"v",desc:a.createElement("div",null,"Optional value to associate to ",a.createElement("code",null,"k"))}],returns:{type:"map<K, V>",desc:a.createElement("div",null,"Copy of map ",a.createElement("code",null,"m")," where ",a.createElement("code",null,"k")," is associated to ",a.createElement("code",null))},michelson:"UPDATE",michelson_ref_url:J+"#instr-UPDATE",related:[{keyword:"Map",link:"/docs/language-basics/container#map"},{keyword:"put",link:"/docs/reference/instructions/containers#mputk-v"},{keyword:"remove",link:"/docs/reference/expressions/builtins#remove(c%20:%20C,%20i%20:%20T)"}]},remove:{sig:"remove(c : C, i : T)",desc:a.createElement("div",null,"Returns a copy of ",a.createElement("code",null,"c")," without item ",a.createElement("code",null,"i"),"."),parameters:[{type:"C",withLink:!1,alias:"c",desc:a.createElement("div",null,"Container to remove element from; ",a.createElement("code",null,"C")," is either:",a.createElement("ul",null,a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#set<T>"},a.createElement("code",null,"set"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#map<K,%20V>"},a.createElement("code",null,"map"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#big_map<K,%20V>"},a.createElement("code",null,"big_map"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#iterable_big_map<K,%20V>"},a.createElement("code",null,"iterable_big_map")))))},{type:"T",withLink:!1,alias:"i",desc:a.createElement("div",null,"Item to remove (key value for map containers).")}],returns:{type:"C",desc:a.createElement("div",null,"Container that contains all elements from ",a.createElement("code",null,"c")," except ",a.createElement("code",null,"i"))},michelson:"UPDATE",michelson_ref_url:J+"#instr-UPDATE",related:[{keyword:"Containers",link:"/docs/language-basics/container"}]},contains:{sig:"contains(c : C, e : T)",desc:a.createElement("div",null,"Tests whether element ",a.createElement("code",null,"e")," is contained in ",a.createElement("code",null,"c")," or not."),parameters:[{type:"C",alias:"c",desc:a.createElement("div",null,"C must be either:",a.createElement("ul",null,a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#set<T>"},a.createElement("code",null,"set"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#list<T>"},a.createElement("code",null,"list"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#map<K,%20V>"},a.createElement("code",null,"map"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#big_map<K,%20V>"},a.createElement("code",null,"big_map"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#iterable_big_map<K,%20V>"},a.createElement("code",null,"iterable_big_map")))))},{type:"T",alias:"e",desc:a.createElement("div",null,"Element to test")}],returns:{type:"bool",desc:a.createElement("div",null,a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"true")," when ",a.createElement("code",null,"e")," is contained in ",a.createElement("code",null,"c")),a.createElement("li",null,a.createElement("code",null,"false")," when ",a.createElement("code",null,"e")," is ",a.createElement("i",null,"not")," contained in ",a.createElement("code",null,"c"))))},michelson:"MEM",michelson_ref_url:J+"#instr-MEM",related:[{keyword:"Containers",link:"/docs/language-basics/container"}]},michelson:{sig:"michelson<R>({ MICHELSON }) [ STACK ]",desc:a.createElement(F,null),parameters:[{type:"Michelson",alias:"code",withLink:!1,desc:a.createElement("div",null,"Michelson code")},{type:"Stack",alias:"args",withLink:!1,desc:a.createElement("div",null,"Arguments")}]},min:{sig:"min(a : T, b : T)",desc:a.createElement("div",null,"Returns minimum value between ",a.createElement("code",null,"a")," and ",a.createElement("code",null,"b")),parameters:[{type:"T",alias:"a",desc:a.createElement("div",null,"First element to compare")},{type:"T",alias:"b",desc:a.createElement("div",null,"Second element to compare")}],returns:{type:"T",desc:a.createElement("div",null,"Minimum value. ",a.createElement("code",null,"T")," must be a ",a.createElement(l.Z,{to:"/docs/language-basics/types#comparable"},"comparable")," type.")},related:[{keyword:"Basic types",link:"/docs/language-basics/types"}]},max:{sig:"max(a : T, b : T)",desc:a.createElement("div",null,"Returns maximum value between ",a.createElement("code",null,"a")," and ",a.createElement("code",null,"b")),parameters:[{type:"T",alias:"a",desc:a.createElement("div",null,"First element to compare")},{type:"T",alias:"b",desc:a.createElement("div",null,"Second element to compare")}],returns:{type:"T",desc:a.createElement("div",null,"Maximum value. ",a.createElement("code",null,"T")," must be a ",a.createElement(l.Z,{to:"/docs/language-basics/types#comparable"},"comparable")," type.")},related:[{keyword:"Basic types",link:"/docs/language-basics/types"}]},abs:{sig:"abs(t : T)",desc:a.createElement(o,null),parameters:[{type:"T",alias:"t",desc:a.createElement("div",null,"Value of type ",a.createElement("code",null,"int")," or ",a.createElement("code",null,"rational"))}],returns:{type:"R",withLink:!1,desc:a.createElement("div",null,"Absolute value of ",a.createElement("code",null,"t"))},michelson:"ABS",michelson_ref_url:J+"#instr-ABS",related:[{keyword:"int_to_nat",link:"/docs/reference/expressions/builtins#int_to_nat(i%20:%20int)"}]},concat:{sig:"concat",desc:a.createElement(u.ZP,null),returns:{type:"T",withLink:!1,desc:a.createElement("div",null,"Concantenation of 2 values or list of values of type",a.createElement("ul",null,a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#string"},a.createElement("code",null,"string"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#bytes"},a.createElement("code",null,"bytes"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#list<T>"},a.createElement("code",null,"list<T>")))))},michelson:"CONCAT",michelson_ref_url:J+"#instr-CONCAT",related:[{keyword:"string",link:"/docs/reference/types#string"},{keyword:"bytes",link:"/docs/reference/types#bytes"},{keyword:"+",link:"/docs/reference/expressions/operators/arithmetic#a--b"}]},slice:{sig:"slice(s : T, o : nat, l : nat)",desc:a.createElement(G,null),parameters:[{type:"T",alias:"s",desc:a.createElement("div",null,"Sequence to slice, T must be either:",a.createElement("ul",null,a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#string"},a.createElement("code",null,"string"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#bytes"},a.createElement("code",null,"bytes")))))},{type:"nat",alias:"o",desc:a.createElement("div",null,"Offset to start sub sequence")},{type:"nat",alias:"l",desc:a.createElement("div",null,"Length of sub sequence")}],returns:{type:"option<T>",desc:a.createElement("div",null,a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"none")," if a problem occured (offset + length out of bounds)"),a.createElement("li",null,a.createElement("code",null,"some(v)"),", ",a.createElement("code",null,"v")," being the value of sub sequence")))},michelson:"SLICE",michelson_ref_url:J+"#instr-SLICE",related:[{keyword:"string",link:"/docs/reference/types#string"}]},length:{sig:"length(o : T)",desc:a.createElement("div",null,"Returns the length of a string or bytes value, or the number of elements of a container."),parameters:[{type:"T",alias:"o",desc:a.createElement("div",null,"T must be either:",a.createElement("ul",null,a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#string"},a.createElement("code",null,"string"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#bytes"},a.createElement("code",null,"bytes"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#set<T>"},a.createElement("code",null,"set"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#list<T>"},a.createElement("code",null,"list"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#map<K,%20V>"},a.createElement("code",null,"map"))),a.createElement("li",null,a.createElement(l.Z,{to:"/docs/reference/types#iterable_big_map<K,%20V>"},a.createElement("code",null,"iterable_big_map")))))}],returns:{type:"nat",desc:a.createElement("div",null,"Length or size of argument ",a.createElement("code",null,"o"))},michelson:"SIZE",michelson_ref_url:J+"#instr-SIZE",related:[{keyword:"string",link:"/docs/reference/types#string"},{keyword:"bytes",link:"/docs/reference/types#bytes"},{keyword:"Containers",link:"/docs/language-basics/container"}]},is_implicit_address:{sig:"is_implicit_address(a : address)",desc:a.createElement("div",null,"Returns whether the address parameter is a ",a.createElement("code",null,"tz1")," ",a.createElement("code",null,"tz2")," ",a.createElement("code",null,"tz3")," or ",a.createElement("code",null,"tz4"),", that is whether it is an ",a.createElement("a",{href:"https://opentezos.com/tezos-basics/operations/#implicit-accounts-and-originated-accounts",target:"_blank"},"implicit address"),"."),parameters:[{type:"address",alias:"a",desc:a.createElement("div",null,"Address to check")}],returns:{type:"bool",desc:a.createElement("div",null,a.createElement("code",null,"true")," if a is implicit, ",a.createElement("code",null,"false")," otherwise")}},is_none:{sig:"is_none(o : option<T>)",desc:a.createElement(w,null),parameters:[{type:"option<T>",alias:"o",desc:a.createElement("div",null,"Optional value to test if it is none")}],returns:{type:"bool",desc:a.createElement("div",null,a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"true")," when ",a.createElement("code",null,"o")," is none"),a.createElement("li",null,a.createElement("code",null,"false")," when ",a.createElement("code",null,"o")," is some ")))},related:[{keyword:"Option",link:"/docs/language-basics/composite#option"}]},is_some:{sig:"is_some(o : option<T>)",desc:a.createElement(C,null),parameters:[{type:"option<T>",alias:"o",desc:a.createElement("div",null,"Optional value to test if it is some")}],returns:{type:"bool",desc:a.createElement("div",null,a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"true")," when ",a.createElement("code",null,"o")," is some"),a.createElement("li",null,a.createElement("code",null,"false")," when ",a.createElement("code",null,"o")," is none ")))},related:[{keyword:"Option",link:"/docs/language-basics/composite#option"}]},int_to_nat:{sig:"int_to_nat(i : int)",desc:a.createElement("div",null,"Converts an ",a.createElement(l.Z,{to:"/docs/reference/types#int"},a.createElement("code",null,"int"))," value to an ",a.createElement(l.Z,{to:"/docs/reference/types#option<T>"},a.createElement("code",null,"option")),"` of ",a.createElement(l.Z,{to:"/docs/reference/types#nat"},a.createElement("code",null,"nat"))," value."),parameters:[{type:"int",alias:"i",desc:a.createElement("div",null,"Integer to convert")}],returns:{type:"option<nat>",withLink:!1,desc:a.createElement("div",null,"Optional natural value:",a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"some(n)")," when ",a.createElement("code",null,"i")," is positive"),a.createElement("li",null,a.createElement("code",null,"none")," otherwise")))},michelson:"ISNAT",michelson_ref_url:J+"#instr-ISNAT",related:[{keyword:"nat",link:"/docs/reference/types#nat"},{keyword:"int",link:"/docs/reference/types#int"},{keyword:"option",link:"/docs/reference/types#option<T>"},{keyword:"abs",link:"/docs/reference/expressions/builtins#abs(t%20:%20T)"}]},floor:{sig:"floor(r : rational)",desc:a.createElement("div",null,"Converts a ",a.createElement(l.Z,{to:"/docs/reference/types#rational"},a.createElement("code",null,"rational"))," to an ",a.createElement(l.Z,{to:"/docs/reference/types#int"},a.createElement("code",null,"int"))," with ",a.createElement("a",{href:"https://en.wikipedia.org/wiki/Floor_and_ceiling_functions",target:"_blank"},"floor")," policy"),parameters:[{type:"rational",alias:"r",desc:a.createElement("div",null)}],returns:{type:"int",desc:a.createElement("div",null,"Floored integer")},related:[{keyword:"ceil",link:"/docs/reference/expressions/builtins#ceil(r%20:%20rational)"}]},ceil:{sig:"ceil(r : rational)",desc:a.createElement("div",null,"Converts a ",a.createElement(l.Z,{to:"/docs/reference/types#rational"},a.createElement("code",null,"rational"))," to an ",a.createElement(l.Z,{to:"/docs/reference/types#int"},a.createElement("code",null,"int"))," with ",a.createElement("a",{href:"https://en.wikipedia.org/wiki/Floor_and_ceiling_functions",target:"_blank"},"ceiling")," policy"),parameters:[{type:"rational",alias:"r",desc:a.createElement("div",null)}],returns:{type:"int",desc:a.createElement("div",null,"Ceiled integer")},related:[{keyword:"floor",link:"/docs/reference/expressions/builtins#floor(r%20:%20rational)"}]},simplify_rational:{sig:"simplify_rational(r : rational)",desc:a.createElement("div",null,"Simplifies a ",a.createElement(l.Z,{to:"/docs/reference/types#rational"},a.createElement("code",null,"rational"))," with ",a.createElement(l.Z,{to:"https://en.wikipedia.org/wiki/Euclidean_algorithm"},"Euclidean")," algorithm"),parameters:[{type:"rational",alias:"r",desc:a.createElement("div",null)}],returns:{type:"rational",desc:a.createElement("div",null,"Rational simplified")},related:[{keyword:"rational",link:"/docs/reference/types#rational"},{keyword:"get_numerator",link:"/docs/reference/expressions/builtins#get_numerator(r%20:%20rational)"},{keyword:"get_denominator",link:"/docs/reference/expressions/builtins#get_denominator(r%20:%20rational)"}]},get_numerator:{sig:"get_numerator(r : rational)",desc:a.createElement("div",null,"Gets the numerator of a ",a.createElement(l.Z,{to:"/docs/reference/types#rational"},a.createElement("code",null,"rational"))),parameters:[{type:"rational",alias:"r",desc:a.createElement("div",null)}],returns:{type:"int",desc:a.createElement("div",null,"Numerator of the rational")},related:[{keyword:"rational",link:"/docs/reference/types#rational"},{keyword:"int",link:"/docs/reference/types#int"},{keyword:"simplify_rational",link:"/docs/reference/expressions/builtins#simplify_rational(r%20:%20rational)"},{keyword:"get_denominator",link:"/docs/reference/expressions/builtins#get_denominator(r%20:%20rational)"}]},get_denominator:{sig:"get_denominator(r : rational)",desc:a.createElement("div",null,"Gets the denominator of a ",a.createElement(l.Z,{to:"/docs/reference/types#rational"},a.createElement("code",null,"rational"))),parameters:[{type:"rational",alias:"r",desc:a.createElement("div",null)}],returns:{type:"nat",desc:a.createElement("div",null,"Denominator of the rational")},related:[{keyword:"rational",link:"/docs/reference/types#rational"},{keyword:"nat",link:"/docs/reference/types#nat"},{keyword:"simplify_rational",link:"/docs/reference/expressions/builtins#simplify_rational(r%20:%20rational)"},{keyword:"get_numerator",link:"/docs/reference/expressions/builtins#get_numerator(r%20:%20rational)"}]},bytes_to_nat:{sig:"bytes_to_nat(b : bytes)",desc:a.createElement("div",null,"Converts bytes to a natural."),parameters:[{type:"bytes",alias:"b",desc:a.createElement("div",null,"Bytes to convert")}],returns:{type:"nat",desc:a.createElement("div",null,"Natural converted to bytes")},related:[{keyword:"Conversion",link:"/docs/language-basics/types#conversion"},{keyword:"bytes",link:"/docs/reference/types#bytes"},{keyword:"nat",link:"/docs/reference/types#nat"}]},nat_to_bytes:{sig:"nat_to_bytes(n : nat)",desc:a.createElement("div",null,"Converts a natural to bytes."),parameters:[{type:"nat",alias:"n",desc:a.createElement("div",null,"Nat to convert")}],returns:{type:"bytes",desc:a.createElement("div",null,"Bytes converted to nat")},related:[{keyword:"Conversion",link:"/docs/language-basics/types#conversion"},{keyword:"nat",link:"/docs/reference/types#nat"},{keyword:"bytes",link:"/docs/reference/types#bytes"}]},nat_to_string:{sig:"nat_to_string(n : nat)",desc:a.createElement("div",null,"Converts a natural to a string."),parameters:[{type:"nat",alias:"n",desc:a.createElement("div",null,"Nat to convert")}],returns:{type:"string",desc:a.createElement("div",null,"String converted to nat")},related:[{keyword:"Conversion",link:"/docs/language-basics/types#conversion"},{keyword:"nat",link:"/docs/reference/types#nat"},{keyword:"string",link:"/docs/reference/types#string"}]},pack:{sig:"pack(o : T)",desc:a.createElement("div",null,"Serializes any value of ",a.createElement(l.Z,{to:"/docs/language-basics/types#packable"},"packable")," type to a ",a.createElement(l.Z,{to:"/docs/reference/types#bytes"},a.createElement("code",null,"bytes"))," representation."),parameters:[{type:"T",alias:"o",desc:a.createElement("div",null,"Value of ",a.createElement(l.Z,{to:"/docs/language-basics/types#packable"},"packable")," type ",a.createElement("code",null,"T"))}],returns:{type:"bytes",desc:a.createElement("div",null,"Packed value")},michelson:"PACK",michelson_ref_url:J+"#instr-PACK",related:[{keyword:"bytes",link:"/docs/reference/types#bytes"},{keyword:"unpack",link:"/docs/reference/expressions/builtins#unpack<T>(b%20:%20bytes)"}]},unpack:{sig:"unpack<T>(b : bytes)",desc:a.createElement(Y,null),parameters:[{type:"bytes",alias:"b",desc:a.createElement("div",null,"Bytes to unpack")}],returns:{type:"option<T>",desc:a.createElement("div",null,a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"none")," when ",a.createElement("code",null,"b")," is unpackable of type ",a.createElement("code",null,"T")),a.createElement("li",null,a.createElement("code",null,"some(v)")," ",a.createElement("code",null,"v")," being the value returned by unpacking process ")))},michelson:"UNPACK",michelson_ref_url:J+"#instr-UNPACK",related:[{keyword:"bytes",link:"/docs/reference/types#bytes"},{keyword:"pack",link:"/docs/reference/expressions/builtins#pack(o%20:%20T)"}]},set_delegate:{sig:"set_delegate(opkh : option<key_hash>)",desc:a.createElement("div",null,"Sets delegate account for current contract."),parameters:[{type:"option<key_hash>",alias:"opkh",desc:a.createElement("div",null,a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"none")," remove delegation of current contract"),a.createElement("li",null,a.createElement("code",null,"some(pkh)")," update delegation of current contract with address behind ",a.createElement("code",null,"pkh")," ")))}],returns:{type:"operation",desc:a.createElement("div",null,"Operation of type ")},michelson:"SET_DELEGATE",michelson_ref_url:J+"#instr-SET_DELEGATE",related:[]},key_hash_to_contract:{sig:"key_hash_to_contract(pkh : key_hash)",desc:a.createElement("div",null,"Converts key_hash to contract."),parameters:[{type:"key_hash",alias:"pkh",desc:a.createElement("div",null,"key hash to convert")}],returns:{type:"contract<unit>",withLink:!1,desc:a.createElement("div",null,"The extracted contract unit")},michelson:"IMPLICIT_ACCOUNT",michelson_ref_url:J+"#instr-IMPLICIT_ACCOUNT",related:[{keyword:"Cryptography",link:"/docs/language-basics/crypto"}]},contract_to_address:{sig:"contract_to_address(c : contract<T>)",desc:a.createElement("div",null,"Returns the address of a contract."),parameters:[{type:"contract",alias:"c",desc:a.createElement("div",null,"Contract to get the address of")}],returns:{type:"address",desc:a.createElement("div",null,"Address of ",a.createElement("code",null,"c"))},related:[{keyword:"Cryptography",link:"/docs/language-basics/crypto"}]},address_to_contract:{sig:"address_to_contract<T>(a : address)",desc:a.createElement("div",null,a.createElement("p",null,"Converts address ",a.createElement("code",null,"a")," to a ",a.createElement("code",null,"contract<T>")," value to be used as parameter of ",a.createElement(l.Z,{to:"/docs/reference/expressions/builtins#make_operation(a%20:%20tez,%20c%20:%20contract<T>,%20arg%20:%20T)"},a.createElement("code",null,"make_operation")),"."),a.createElement("p",null,a.createElement("code",null,"T")," is:",a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"unit")," for an account address (",a.createElement("code",null,"tz1..."),")"),a.createElement("li",null,"the type of the ",a.createElement("i",null,"parameter")," section for a contract address")),"When the contract's parameter is annotated it is easier to use ",a.createElement(l.Z,{to:"/docs/reference/expressions/builtins#get_entrypoint<T>(s,%20a%20:%20address)"},a.createElement("code",null,"get_entrypoint"))," builtin.")),parameters:[{type:"address",alias:"a",desc:a.createElement("div",null,"Address to convert")}],returns:{type:"option<contract<T>>",withLink:!1,desc:a.createElement("div",null,a.createElement("ul",null,a.createElement("li",null,a.createElement("code",null,"none")," when the address or the path to entrypoint is invalid"),a.createElement("li",null,a.createElement("code",null,"some")," of a ",a.createElement("code",null,"contract<T>")," value")))},related:[{keyword:"Operation",link:"/docs/reference/instructions/operation"},{keyword:"get_entrypoint",link:"/docs/reference/expressions/builtins#get_entrypoint<T>(s,%20a%20:%20address)"},{keyword:"make_operation",link:"/docs/reference/expressions/builtins#make_operation(a%20:%20tez,%20c%20:%20contract<T>,%20arg%20:%20T)"}]},key_to_address:{sig:"key_to_address(k : key)",desc:a.createElement("div",null,"Converts a key to an address"),parameters:[{type:"key",alias:"k",desc:a.createElement("div",null,"Key to convert")}],returns:{type:"address",desc:a.createElement("div",null,"Key converted to address")},related:[{keyword:"Cryptography",link:"/docs/language-basics/crypto"}]},blake2b:{sig:"blake2b(b : bytes)",desc:a.createElement("div",null,"Hashes bytes value with ",a.createElement("a",{href:"https://en.wikipedia.org/wiki/BLAKE_%28hash_function%29",target:"_blank"},"blake2b")," algorithm."),parameters:[{type:"bytes",alias:"b",desc:a.createElement("div",null,"Array of byte to hash")}],returns:{type:"bytes",desc:a.createElement("div",null,"Hash of bytes ",a.createElement("code",null,"b"))},michelson:"BLAKE2B",michelson_ref_url:J+"#instr-BLAKE2B",related:[{keyword:"Hash",link:"/docs/language-basics/crypto#hash"},{keyword:"keccak",link:"/docs/reference/expressions/builtins#keccak(b%20:%20bytes)"},{keyword:"sha256",link:"/docs/reference/expressions/builtins#sha256(b%20:%20bytes)"},{keyword:"sha3",link:"/docs/reference/expressions/builtins#sha3(b%20:%20bytes)"},{keyword:"sha512",link:"/docs/reference/expressions/builtins#sha512(b%20:%20bytes)"}]},sha256:{sig:"sha256(b : bytes)",desc:a.createElement("div",null,"Hashes bytes value with sha256 algorithm."),parameters:[{type:"bytes",alias:"b",desc:a.createElement("div",null,"Message to be hashed")}],returns:{type:"bytes",desc:a.createElement("div",null,"Hash of b bytes")},michelson:"SHA256",michelson_ref_url:J+"#instr-SHA256",related:[{keyword:"Hash",link:"/docs/language-basics/crypto#hash"},{keyword:"blake2b",link:"/docs/reference/expressions/builtins#blake2b(b%20:%20bytes)"},{keyword:"keccak",link:"/docs/reference/expressions/builtins#keccak(b%20:%20bytes)"},{keyword:"sha3",link:"/docs/reference/expressions/builtins#sha3(b%20:%20bytes)"},{keyword:"sha512",link:"/docs/reference/expressions/builtins#sha512(b%20:%20bytes)"}]},sha512:{sig:"sha512(b : bytes)",desc:a.createElement("div",null,"Hashes bytes value with sha512 algorithm."),parameters:[{type:"bytes",alias:"b",desc:a.createElement("div",null,"Message to be hashed")}],returns:{type:"bytes",desc:a.createElement("div",null,"Hash of b bytes")},michelson:"SHA512",michelson_ref_url:J+"#instr-SHA512",related:[{keyword:"Hash",link:"/docs/language-basics/crypto#hash"},{keyword:"blake2b",link:"/docs/reference/expressions/builtins#blake2b(b%20:%20bytes)"},{keyword:"keccak",link:"/docs/reference/expressions/builtins#keccak(b%20:%20bytes)"},{keyword:"sha256",link:"/docs/reference/expressions/builtins#sha256(b%20:%20bytes)"},{keyword:"sha3",link:"/docs/reference/expressions/builtins#sha3(b%20:%20bytes)"}]},sha3:{sig:"sha3(b : bytes)",desc:a.createElement("div",null,"Hashes bytes value with ",a.createElement("a",{href:"https://en.wikipedia.org/wiki/SHA-3",target:"_blank"},"sha3")," algorithm."),parameters:[{type:"bytes",alias:"b",desc:a.createElement("div",null,"Message to be hashed")}],returns:{type:"bytes",desc:a.createElement("div",null,"Hash of b bytes")},michelson:"SHA3",michelson_ref_url:J+"#instr-SHA3",related:[{keyword:"Hash",link:"/docs/language-basics/crypto#hash"},{keyword:"blake2b",link:"/docs/reference/expressions/builtins#blake2b(b%20:%20bytes)"},{keyword:"keccak",link:"/docs/reference/expressions/builtins#keccak(b%20:%20bytes)"},{keyword:"sha256",link:"/docs/reference/expressions/builtins#sha256(b%20:%20bytes)"},{keyword:"sha512",link:"/docs/reference/expressions/builtins#sha512(b%20:%20bytes)"}]},keccak:{sig:"keccak(b : bytes)",desc:a.createElement("div",null,"Hashes bytes value with ",a.createElement("a",{href:"https://en.wikipedia.org/wiki/SHA-3",target:"_blank"},"keccak")," algorithm."),parameters:[{type:"bytes",alias:"b",desc:a.createElement("div",null,"Array of byte to hash")}],returns:{type:"bytes",desc:a.createElement("div",null,"Hash of ",a.createElement("code",null,"b"))},michelson:"KECCAK",michelson_ref_url:J+"#instr-KECCAK",related:[{keyword:"Hash",link:"/docs/language-basics/crypto#hash"},{keyword:"blake2b",link:"/docs/reference/expressions/builtins#blake2b(b%20:%20bytes)"},{keyword:"sha256",link:"/docs/reference/expressions/builtins#sha256(b%20:%20bytes)"},{keyword:"sha3",link:"/docs/reference/expressions/builtins#sha3(b%20:%20bytes)"},{keyword:"sha512",link:"/docs/reference/expressions/builtins#sha512(b%20:%20bytes)"}]},key_to_key_hash:{sig:"key_to_key_hash(k : key)",desc:a.createElement("div",null,"Converts a key to key_hash."),parameters:[{type:"key",alias:"k",desc:a.createElement("div",null,"key to hash")}],returns:{type:"key_hash",desc:a.createElement("div",null,"hashed value of ",a.createElement("code",null,"k"))},michelson:"HASH_KEY",michelson_ref_url:J+"#instr-HASH_KEY",related:[{keyword:"Cryptography",link:"/docs/language-basics/crypto"}]},check_signature:{sig:"check_signature(k : key, s : signature, b : bytes)",desc:a.createElement("div",null,"Checks whether signature ",a.createElement("code",null,"s")," is obtained by signing sequence of bytes ",a.createElement("code",null,"b")," with account public key ",a.createElement("code",null,"k"),"."),parameters:[{type:"key",alias:"k",desc:a.createElement("div",null,"Public key of the account to sign ",a.createElement("code",null,"b"),".")},{type:"signature",alias:"s",desc:a.createElement("div",null,"Signature to be compared with the one obtained by signing ",a.createElement("code",null,"b")," with ",a.createElement("code",null,"k"),".")},{type:"bytes",alias:"b",desc:a.createElement("div",null,"Sequence of bytes to sign with ",a.createElement("code",null,"k")," and to compare to ",a.createElement("code",null,"s"),".")}],returns:{type:"bool",desc:a.createElement("div",null,"Returns ",a.createElement("code",null,"true")," if ",a.createElement("code",null,"s")," is obtained by signing ",a.createElement("code",null,"b")," with ",a.createElement("code",null,"k"),", ",a.createElement("code",null,"false")," otherwise.")},michelson:"CHECK_SIGNATURE",michelson_ref_url:J+"#instr-CHECK_SIGNATURE",related:[{keyword:"Cryptography",link:"/docs/language-basics/crypto"}]},voting_power:{sig:"voting_power(k : key_hash)",desc:a.createElement("div",null,"Gets the voting power from a ",a.createElement("code",null,"key_hash")," value."),parameters:[{type:"key_hash",alias:"k",desc:a.createElement("div",null,"Value to get the voting power of")}],returns:{type:"nat",desc:a.createElement("div",null,"Voting power")},michelson:"VOTING_POWER",michelson_ref_url:J+"#instr-VOTING_POWER",related:[]},create_ticket:{sig:"create_ticket(s : T, n : nat)",desc:a.createElement("div",null,"Creates a ",a.createElement(l.Z,{to:"/docs/reference/types#s-t"},"ticket")," from a value typed T and an amount."),parameters:[{type:"T",alias:"s",desc:a.createElement("div",null,"The information of the ticket")},{type:"nat",alias:"n",desc:a.createElement("div",null,"The amount of the ticket")}],returns:{type:"option<ticket<T>>",withLink:!1,desc:a.createElement("div",null,"Returns an ",a.createElement(l.Z,{to:"/docs/reference/types#option<T>"},"option")," of ticket. It is ",a.createElement(l.Z,{to:"/docs/reference/expressions/builtins#none<T>"},a.createElement("code",null,"none"))," if ",a.createElement("code",null,"n")," is equal to ",a.createElement("code",null,"0")," (ie. it is not possible to create 0-valued ticket).")},michelson:"TICKET",michelson_ref_url:J+"#instr-TICKET",related:[{keyword:"join_tickets",link:"/docs/reference/expressions/builtins#join_tickets(t1%20:%20ticket<T>,%20t2%20:%20ticket<T>)"},{keyword:"read_ticket",link:"/docs/reference/expressions/builtins#read_ticket(t%20:%20ticket<T>)"},{keyword:"split_ticket",link:"/docs/reference/expressions/builtins#split_ticket(t%20:%20ticket<T>,%20n1%20:%20nat,%20n2%20:%20nat)"}]},read_ticket:{sig:"read_ticket(t : ticket<T>)",desc:a.createElement("div",null,"Reads ticket's origin contract, value and amount."),parameters:[{type:"ticket<T>",alias:"t",desc:a.createElement("div",null,"Ticket to read")}],returns:{type:"address * T * nat",withLink:!1,desc:a.createElement("div",null,"Tuple of ticket's address of origin contract, value and the amount")},michelson:"READ_TICKET",michelson_ref_url:J+"#instr-READ_TICKET",related:[{keyword:"create_ticket",link:"/docs/reference/expressions/builtins#create_ticket(s%20:%20T,%20n%20:%20nat)"},{keyword:"join_tickets",link:"/docs/reference/expressions/builtins#join_tickets(t1%20:%20ticket<T>,%20t2%20:%20ticket<T>)"},{keyword:"split_ticket",link:"/docs/reference/expressions/builtins#split_ticket(t%20:%20ticket<T>,%20n1%20:%20nat,%20n2%20:%20nat)"}]},split_ticket:{sig:"split_ticket(t : ticket<T>, n1 : nat, n2 : nat)",desc:a.createElement("div",null,"Splits ticket in two new tickets."),parameters:[{type:"ticket<T>",alias:"t",desc:a.createElement("div",null,"Ticket to split")},{type:"nat",alias:"n1",desc:a.createElement("div",null,"Amount of first created ticket")},{type:"nat",alias:"n2",desc:a.createElement("div",null,"Amount of second created ticket")}],returns:{type:"option<ticket<T> * ticket<T>>",withLink:!1,desc:a.createElement("div",null,"Option of pair of created tickets, respectively with ",a.createElement("code",null,"n1")," and ",a.createElement("code",null,"n2")," values.")},michelson:"SPLIT_TICKET",michelson_ref_url:J+"#instr-SPLIT_TICKET",related:[{keyword:"create_ticket",link:"/docs/reference/expressions/builtins#create_ticket(s%20:%20T,%20n%20:%20nat)"},{keyword:"join_tickets",link:"/docs/reference/expressions/builtins#join_tickets(t1%20:%20ticket<T>,%20t2%20:%20ticket<T>)"},{keyword:"read_ticket",link:"/docs/reference/expressions/builtins#read_ticket(t%20:%20ticket<T>)"}]},join_tickets:{sig:"join_tickets(t1 : ticket<T>, t2 : ticket<T>)",desc:a.createElement("div",null,"Joins two compatible tickets (same value, same origin contract)."),parameters:[{type:"ticket<T>",alias:"t1",desc:a.createElement("div",null,"First ticket to join")},{type:"ticket<T>",alias:"t2",desc:a.createElement("div",null,"Second ticket to join")}],returns:{type:"option<ticket<T>>",withLink:!1,desc:a.createElement("div",null,"Joined ticket")},michelson:"JOIN_TICKETS",michelson_ref_url:J+"#instr-JOIN_TICKETS",related:[{keyword:"create_ticket",link:"/docs/reference/expressions/builtins#create_ticket(s%20:%20T,%20n%20:%20nat)"},{keyword:"read_ticket",link:"/docs/reference/expressions/builtins#read_ticket(t%20:%20ticket<T>)"},{keyword:"split_ticket",link:"/docs/reference/expressions/builtins#split_ticket(t%20:%20ticket<T>,%20n1%20:%20nat,%20n2%20:%20nat)"}]},sapling_empty_state:{sig:"sapling_empty_state(k : key_hash)",desc:a.createElement("div",null,"Creates a sapling state with the specified memo size. The memo is an arbitrary string message encrypted and available to anyone owning the outgoing viewing key."),parameters:[{type:"nat",alias:"n",desc:a.createElement("div",null,"Memo size")}],returns:{type:"sapling_state(n)",desc:a.createElement("div",null,"The fresh sapling state")},michelson:"SAPLING_EMPTY_STATE",michelson_ref_url:J+"#instr-SAPLING_EMPTY_STATE",related:[{keyword:"Sapling",link:"/docs/language-basics/crypto#sapling"}]},sapling_verify_update:{sig:"sapling_verify_update(s, t)",desc:a.createElement("div",null,"Applies sapling transaction on sapling state."),parameters:[{type:"sapling_state(n)",alias:"s",desc:a.createElement("div",null,"Sapling state")},{type:"sapling_transaction(n)",alias:"t",desc:a.createElement("div",null,"Sapling transaction")}],returns:{type:"option<bytes * int * sapling_state(n)>",withLink:!1,desc:a.createElement("div",null,"The result")},michelson:"SAPLING_VERIFY_UPDATE",michelson_ref_url:J+"#instr-SAPLING_VERIFY_UPDATE",related:[{keyword:"Sapling",link:"/docs/language-basics/crypto#sapling"}]},pairing_check:{sig:"pairing_check(l : list<bls12_381_g1 * bls12_381_g2>)",desc:a.createElement("div",null,"Checks pairing of pairs of ",a.createElement("a",{href:"https://en.wikipedia.org/wiki/BLS_digital_signature",target:"_blank"},"BLS")," values."),parameters:[{type:"list<bls12_381_g1 * bls12_381_g2>",withLink:!1,alias:"l",desc:a.createElement("div",null,"List of pairs of bls curves")}],returns:{type:"bool",desc:a.createElement("div",null,"The result")},michelson:"PAIRING_CHECK",michelson_ref_url:J+"#instr-PAIRING_CHECK",related:[{keyword:"Elliptic curves",link:"/docs/language-basics/crypto#elliptic-curves"}]},open_chest:{sig:"open_chest(k : chest_key, c : chest, t : nat)",desc:a.createElement("div",null,"Opens chest ",a.createElement("code",null,"c")," with key ",a.createElement("code",null,"k")," under time ",a.createElement("code",null,"t"),"."),parameters:[{type:"chest_key",alias:"k",desc:a.createElement("div",null,"Chest key")},{type:"chest",alias:"c",desc:a.createElement("div",null,"Chest")},{type:"nat",alias:"t",desc:a.createElement("div",null,'"Time" (number of operations) used to lock the chest')}],returns:{type:"option<bytes>",withLink:!1,desc:a.createElement("div",null,"The result is a byte option depending if the opening is correct or not. See ",a.createElement("a",{href:"https://tezos.gitlab.io/alpha/timelock.html",target:"_blank"},"Timelock")," for more")},michelson:"OPEN_CHEST",michelson_ref_url:J+"#instr-OPEN_CHEST",related:[{keyword:"Cryptography",link:"/docs/language-basics/crypto"}]},int_to_date:{sig:"int_to_date(i : int)",desc:a.createElement("div",null,"Converts an integer value ",a.createElement("code",null,"i")," to a date, where ",a.createElement("code",null,"i")," is considered as a tiemstamp value, that is the number of seconds since ",a.createElement("code",null,"1970-01-01"),"."),parameters:[{type:"int",alias:"i",desc:a.createElement("div",null,"The timestamp to convert")}],returns:{type:"date",desc:a.createElement("div",null,"Date corresponding to timestamp ",a.createElement("code",null,"i"))},related:[{keyword:"Conversion",link:"/docs/language-basics/types#conversion"},{keyword:"int",link:"/docs/reference/types#int"},{keyword:"date",link:"/docs/reference/types#date"}]},mutez_to_nat:{sig:"mutez_to_nat(v : tez)",desc:a.createElement(O,null),parameters:[{type:"tez",alias:"v",desc:a.createElement("div",null,"The amount of tez to convert")}],returns:{type:"nat",desc:a.createElement("div",null,"The amount of mutez")},related:[{keyword:"tez",link:"/docs/reference/types#tez"},{keyword:"nat",link:"/docs/reference/types#nat"}]},get_entrypoint:{sig:"get_entrypoint<T>(s, a : address)",desc:a.createElement(T,null),parameters:[{type:"string literal",withLink:!1,alias:"s",desc:a.createElement("div",null,"Entrypoint name as string literal prefixed by ",a.createElement("code",null,"%"))},{type:"address",alias:"a",desc:a.createElement("div",null,"Address of the entrypoint's contract")}],returns:{type:"option<contract<T>>",withLink:!1,desc:a.createElement("div",null,"Option of entrypoint as a ",a.createElement("code",null,"contract")," value")},related:[{keyword:"transfer",link:"/docs/reference/instructions/operation#transfer"},{keyword:"make_operation",link:"/docs/reference/expressions/builtins#make_operation(a%20:%20tez,%20c%20:%20contract<T>,%20arg%20:%20T)"}],michelson:"CONTRACT",michelson_ref_url:J+"#instr-CONTRACT"},greedy_and:{sig:"greedy_and(a : bool, b : bool)",desc:a.createElement("div",null,"Greedy evaluation of boolean conjonction of ",a.createElement("code",null,"a")," and ",a.createElement("code",null,"b"),", meaning that ",a.createElement("code",null,"b")," is evaluated even if ",a.createElement("code",null,"a")," is false."),parameters:[{type:"bool",alias:"a",desc:a.createElement("div",null,"Boolean input")},{type:"bool",alias:"b",desc:a.createElement("div",null,"Boolean input")}],returns:{type:"bool",desc:a.createElement("div",null,"true if ",a.createElement("code",null,"a")," ",a.createElement("i",null,"and")," ",a.createElement("code",null,"b")," are true, false otherwise.")},related:[{keyword:"and",link:"/docs/reference/expressions/operators/arithmetic#a-and-b"},{keyword:"greedy_or",link:"/docs/reference/expressions/builtins#greedy_or(a%20:%20bool,%20b%20:%20bool)"}],michelson:"AND",michelson_ref_url:J+"#instr-AND"},greedy_or:{sig:"greedy_or(a : bool, b : bool)",desc:a.createElement("div",null,"Greedy evaluation of boolean disjonction of ",a.createElement("code",null,"a")," and ",a.createElement("code",null,"b"),", meaning that ",a.createElement("code",null,"b")," is evaluated even if ",a.createElement("code",null,"a")," is true."),parameters:[{type:"bool",alias:"a",desc:a.createElement("div",null,"Boolean input")},{type:"bool",alias:"b",desc:a.createElement("div",null,"Boolean input")}],returns:{type:"bool",desc:a.createElement("div",null,"true if ",a.createElement("code",null,"a")," ",a.createElement("i",null,"or")," ",a.createElement("code",null,"b")," is true, false otherwise.")},related:[{keyword:"or",link:"/docs/reference/expressions/operators/arithmetic#a-or-b"},{keyword:"greedy_and",link:"/docs/reference/expressions/builtins#greedy_and(a%20:%20bool,%20b%20:%20bool)"}],michelson:"OR",michelson_ref_url:J+"#instr-OR"},create_contract:{sig:"create_contract(handler, delegator, amount, init)",desc:a.createElement(y,null),parameters:[{type:"identifier",withLink:!1,alias:"handler",desc:a.createElement("div",null,"Contract handler declared with ",a.createElement(l.Z,{to:"/docs/reference/declarations/external-contract"},"import")," declaration")},{type:"option<address>",alias:"del",withLink:!1,desc:a.createElement("div",null,"Option of delegate address")},{type:"amount",alias:"tez",desc:a.createElement("div",null,"Amount of balance to transfer to new contract")},{type:"any",withLink:!1,alias:"init",desc:a.createElement("div",null,a.createElement("ul",null,a.createElement("li",null,"Record of parameters for Archetype contract"),a.createElement("li",null,"Initial storage value for Michelson contrat")))}],returns:{type:"operation * address",withLink:!1,desc:a.createElement("div",null,"Returns a pair of:",a.createElement("ul",null,a.createElement("li",null,"Operation for contract creation"),a.createElement("li",null,"Address of created contract")))},related:[{keyword:"operation",link:"/docs/reference/types#operation"},{keyword:"set_delegate",link:"/docs/reference/expressions/builtins#set_delegate(opkh%20:%20option<key_hash>)"}],michelson:"CREATE_CONTRACT",michelson_ref_url:J+"#instr-CREATE_CONTRACT"},head:{sig:"head(l : list<T>, n : nat)",desc:a.createElement(B.ZP,null),parameters:[{type:"list<T>",alias:"l",desc:a.createElement("div",null,"List to get n first elements")},{type:"nat",withLink:!0,alias:"n",desc:a.createElement("div",null,"Number of elements to consider")}],returns:{type:"list<T>",desc:a.createElement("div",null,"List with n first elements")},fails:[],related:[{keyword:"list",link:"/docs/reference/types#list<T>"},{keyword:"length",link:"/docs/reference/expressions/builtins#length(o%20:%20T)"}]},tail:{desc:a.createElement(M.ZP,null),sig:"tail(l : list<T>, n : nat)",parameters:[{type:"list<T>",alias:"l",desc:a.createElement("div",null,"List to get n last elements")},{type:"nat",withLink:!0,alias:"n",desc:a.createElement("div",null,"Number of elements to consider")}],returns:{type:"list<T>",desc:a.createElement("div",null,"List with n last elements")},fails:[],related:[{keyword:"list",link:"/docs/reference/types#list<T>"},{keyword:"length",link:"/docs/reference/expressions/builtins#length(o%20:%20T)"}]},global_constant:{sig:"global_constant<T>(hash)",desc:a.createElement("div",null,"Gets the ",a.createElement(l.Z,{to:"https://tezos.gitlab.io/active/global_constants.html"},"global constant")," associated to ",a.createElement("code",null,"hash"),". ",a.createElement("br",null)," ",a.createElement("br",null),"Check ",a.createElement(l.Z,{to:"https://tzkt.io/constants"},"here")," the list of available global constants on mainnet."),parameters:[{type:"T",alias:"hash",desc:a.createElement("div",null,"Hash of the michelson expression (e.g. ",a.createElement("code",null,"expruQN5r2umbZVHy6WynYM8f71F8zS4AERz9bugF8UkPBEqrHLuU8"),")")}],returns:{type:"T",desc:a.createElement("div",null,"Global constant")}}}},432:(e,t,n)=>{n.d(t,{Z:()=>y});var l=n(9960),a=n(6886),r=n(1519),i=n(5861),s=n(4810),o=n(7294),c=n(2321),d=n(3465);const m=[{label:"asset",link:"/docs/asset"},{label:"asset to big_map",link:"/docs/asset"},{label:"asset to iterable_big_map",link:"/docs/asset"},{label:"aggregate",link:"/docs/reference/types#aggregate<A>"},{label:"partition",link:"/docs/reference/types#partition<A>"},{label:"asset_view",link:"/docs/reference/types#asset_view<A>"}];function p(e){return o.createElement(a.ZP,{item:!0,xs:12,style:{marginTop:"12px"}},o.createElement(a.ZP,{container:!0},o.createElement(a.ZP,{item:!0},o.createElement("h4",{style:{marginBottom:"0px",color:"grey",fontWeight:"normal",marginBottom:"12px"}},"Type of collection ",o.createElement("code",null,"A"))),o.createElement(a.ZP,{item:!0,xs:12},o.createElement(r.Z,{className:c.Z.divider,style:{marginBottom:"12px"}})),o.createElement(a.ZP,{item:!0,xs:12},o.createElement(a.ZP,{container:!0,spacing:2},m.map(((t,n)=>o.createElement(a.ZP,{item:!0},o.createElement(l.Z,{to:t.link},o.createElement("code",{style:{textDecoration:e.data.includes(t.label)?"none":"line-through"}},t.label)))))))))}const u=e=>o.createElement(a.ZP,{item:!0,xs:12},o.createElement(a.ZP,{container:!0},o.createElement(a.ZP,{item:!0,xs:12},o.createElement(r.Z,{className:c.Z.divider,style:{marginBottom:"12px"}})),o.createElement(a.ZP,{item:!0,md:e.xs,sm:6,xs:6},o.createElement(a.ZP,{container:!0},o.createElement(a.ZP,{item:!0,xs:e.xs>4?2:4},o.createElement(i.Z,null,o.createElement("code",null,e.alias)," :")),o.createElement(a.ZP,{item:!0,xs:e.xs>4?10:8},o.createElement(i.Z,null," ",void 0===e.withLink||e.withLink?o.createElement(l.Z,{to:e.prefix+e.type.toLowerCase()},o.createElement("code",null,e.type)):o.createElement("code",null,e.type))))),o.createElement(a.ZP,{item:!0,md:12-e.xs,sm:6,xs:6},o.createElement(i.Z,{style:{fontFamily:"IBM Plex Sans"}},e.desc)))),k=e=>o.createElement(a.ZP,{item:!0,xs:12},o.createElement(a.ZP,{container:!0},o.createElement(a.ZP,{item:!0,xs:12},o.createElement(r.Z,{className:c.Z.divider,style:{marginBottom:"12px"}})),o.createElement(a.ZP,{item:!0,xs:12,style:{marginBottom:"6px"}},o.createElement(i.Z,null,void 0===e.withLink||e.withLink?o.createElement(l.Z,{to:e.prefix+e.type.toLowerCase()},o.createElement("code",null,e.type)):o.createElement("code",null,e.type))),o.createElement(a.ZP,{item:!0,xs:10},o.createElement(i.Z,{style:{fontFamily:"IBM Plex Sans"}},e.desc))));function y(e){const t=void 0!==e.data.parameters?(e=>{const t=((e,t,n)=>{let l=-1/0;for(const a of n)l=e(l,a);return l})(((e,t)=>e>=t?e:t),0,e.map((e=>e.alias.length+e.type.length)));return t>30?6:t>20?5:t>10?3:2})(e.data.parameters):0;return o.createElement(s.Z,{injectFirst:!0},o.createElement(a.ZP,{container:!0,direction:"row",justifyContent:"flex-start",alignItems:"center",spacing:1,style:{marginBottom:"60px"}},o.createElement(a.ZP,{item:!0,xs:12},o.createElement(i.Z,{style:{fontFamily:"IBM Plex Sans"}},e.data.desc)),void 0!==e.data.appliesto?o.createElement(p,{data:e.data.appliesto}):o.createElement("div",null),void 0!==e.data.parameters&&e.data.parameters.length>0?o.createElement(a.ZP,{item:!0},o.createElement("h4",{style:{marginBottom:"0px",marginTop:"12px",color:"grey",fontWeight:"normal"}},e.data.parameters.length>1?"Parameters":"Parameter")):o.createElement("div",null),void 0!==e.data.parameters&&e.data.parameters.length>0?e.data.parameters.map(((e,n)=>o.createElement(u,{key:"bp"+n,alias:e.alias,type:e.type,desc:e.desc,xs:t,withLink:e.withLink,prefix:e.prefix?e.prefix:"/docs/reference/types#"}))):o.createElement("div",null),void 0!==e.data.returns?o.createElement(a.ZP,{item:!0,style:{marginTop:"12px",color:"grey"}},o.createElement("h4",{style:{marginTop:"12px",marginBottom:"0px",fontWeight:"normal"}},"Returns")):o.createElement(a.ZP,{item:!0,style:{marginTop:"12px",color:"grey"}},o.createElement("h4",{style:{marginTop:"12px",marginBottom:"0px",fontWeight:"normal"}})),void 0!==e.data.returns?o.createElement(k,{type:e.data.returns.type,withLink:e.data.returns.withLink,desc:e.data.returns.desc,prefix:e.data.returns.prefix?e.data.returns.prefix:"/docs/reference/types#"}):o.createElement("div",null),o.createElement(a.ZP,{item:!0,xs:12},o.createElement(d.Z,{fails:e.data.fails,michelson:e.data.michelson,michelson_ref_url:e.data.michelson_ref_url,emits:e.data.emits,related:e.data.related,showfail:e.data.showfail}))))}},3465:(e,t,n)=>{n.d(t,{Z:()=>m});var l=n(5861),a=n(6886),r=n(1519),i=n(7294),s=n(2321),o=n(8271),c=n(563);const d=e=>void 0===e.fails||0===e.fails.length?i.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey",fontStyle:"italic"}},"does not fail"):i.createElement(a.ZP,{container:!0},e.fails.map(((t,n)=>i.createElement(a.ZP,{container:!0,style:{marginBottom:e.fails.length>1?"22px":"0px"}},i.createElement(a.ZP,{key:"fk"+n,item:!0,xs:t.keyword.length>12?12:2,style:{marginBottom:t.keyword.length>12?"12px":"0px"}},i.createElement(l.Z,null,i.createElement("code",null,t.keyword))),i.createElement(a.ZP,{key:"fd"+n,item:!0,xs:t.keyword.length>12?12:10},i.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans"}},t.desc)),n<e.fails.length-1?i.createElement(a.ZP,{item:!0,xs:12},i.createElement(r.Z,{className:s.Z.divider,style:{marginTop:"12px"}})):i.createElement("div",null)))));function m(e){return i.createElement(a.ZP,{container:!0,direction:"row",justifyContent:"flex-start",alignItems:"center",spacing:1,style:{marginTop:"0px"}},null==e.showfail||null!=e.showfail&&e.showfail?i.createElement(i.Fragment,null,i.createElement(a.ZP,{item:!0,xs:3,sm:2,md:2},i.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey"}},"Fails with")),i.createElement(a.ZP,{item:!0,xs:9,sm:10,md:10},i.createElement(d,{fails:e.fails}))):i.createElement("div",null),void 0!==e.michelson?i.createElement(a.ZP,{item:!0,xs:12},i.createElement(r.Z,{className:s.Z.divider})):i.createElement("div",null),void 0!==e.michelson?i.createElement(a.ZP,{item:!0,xs:3,sm:2,md:2},i.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey"}},"Michelson")):i.createElement("div",null),void 0!==e.michelson?i.createElement(a.ZP,{item:!0,xs:9,sm:10,md:10},i.createElement(o.R,{michelson:e.michelson,michelson_ref_url:e.michelson_ref_url})):i.createElement("div",null),void 0!==e.emits?i.createElement(a.ZP,{item:!0,xs:12},i.createElement(r.Z,{className:s.Z.divider})):i.createElement("div",null),void 0!==e.emits?i.createElement(a.ZP,{item:!0,xs:3,sm:2,md:2},i.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey"}},"Emits")):i.createElement("div",null),void 0!==e.emits?i.createElement(a.ZP,{item:!0,xs:9,sm:10,md:10},i.createElement(a.ZP,{container:!0,direction:"row",spacing:3},e.emits.map(((e,t)=>i.createElement(c.n,{key:"rel"+t,value:e.keyword,link:e.link,code:e.code}))))):i.createElement("div",null),void 0!==e.related?i.createElement(a.ZP,{item:!0,xs:12},i.createElement(r.Z,{className:s.Z.divider})):i.createElement("div",null),void 0!==e.related?i.createElement(a.ZP,{item:!0,xs:3,sm:2,md:2},i.createElement(l.Z,{style:{fontFamily:"IBM Plex Sans",color:"grey"}},"Related")):i.createElement("div",null),void 0!==e.related?i.createElement(a.ZP,{item:!0,xs:9,sm:10,md:10},i.createElement(a.ZP,{container:!0,direction:"row",spacing:3},e.related.map(((e,t)=>i.createElement(c.n,{key:"rel"+t,value:e.keyword,link:e.link,code:e.code}))))):i.createElement("div",null))}},8271:(e,t,n)=>{n.d(t,{R:()=>o});var l=n(7294),a=n(6292),r=n(6886),i=n(9960),s=n(4048);const o=e=>void 0===e.michelson_ref_url?"[object Array]"!==Object.prototype.toString.call(e.michelson)?l.createElement(a.Z,{style:{textTransform:"none",fontFamily:"Roboto Mono",color:"var(--ifm-color-primary)"},disableFocusRipple:!0,size:"small",disableRipple:!0},e.michelson):l.createElement(r.ZP,{container:!0,spacing:1},e.michelson.map(((e,t)=>l.createElement(r.ZP,{item:!0,key:"mt"+t},l.createElement(a.Z,{style:{textTransform:"none",fontFamily:"Roboto Mono",color:"var(--ifm-color-primary)"},disableFocusRipple:!0,size:"small",disableRipple:!0},e))))):l.createElement(i.Z,{to:e.michelson_ref_url},l.createElement(a.Z,{style:{textTransform:"none",fontFamily:"Roboto Mono",color:"var(--ifm-color-primary)"},size:"small",disableRipple:!0,endIcon:l.createElement(s.Z,{fontSize:"small"})},e.michelson))},563:(e,t,n)=>{n.d(t,{n:()=>s});var l=n(9960),a=n(6886),r=n(5861),i=n(7294);const s=e=>i.createElement(a.ZP,{item:!0},i.createElement(l.Z,{to:e.link},i.createElement(r.Z,{style:{fontFamily:"IBM Plex Sans"}},null!=e.code&&!1===e.code?e.value:i.createElement("code",null,e.value))))},8173:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var l=n(7462),a=(n(7294),n(3905)),r=n(432),i=n(77);const s={sidebar_position:5,toc_max_heading_level:2},o="Builtins",c={unversionedId:"reference/expressions/builtins",id:"reference/expressions/builtins",title:"Builtins",description:"A B",source:"@site/docs/reference/expressions/builtins.md",sourceDirName:"reference/expressions",slug:"/reference/expressions/builtins",permalink:"/docs/reference/expressions/builtins",draft:!1,editUrl:"https://github.com/completium/archetype-docs/blob/main/docs/reference/expressions/builtins.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,toc_max_heading_level:2},sidebar:"docs",previous:{title:"Arithmetic",permalink:"/docs/reference/expressions/operators/arithmetic"},next:{title:"Control",permalink:"/docs/reference/expressions/controls"}},d={},m=[{value:"<code>A B</code>",id:"a-b",level:2},{value:"<code>C D</code>",id:"c-d",level:2},{value:"<code>E F</code>",id:"e-f",level:2},{value:"<code>G H</code>",id:"g-h",level:2},{value:"<code>I J</code>",id:"i-j",level:2},{value:"<code>K L</code>",id:"k-l",level:2},{value:"<code>M N</code>",id:"m-n",level:2},{value:"<code>O P</code>",id:"o-p",level:2},{value:"<code>Q R</code>",id:"q-r",level:2},{value:"<code>S T</code>",id:"s-t",level:2},{value:"<code>T U</code>",id:"t-u",level:2},{value:"<code>V W</code>",id:"v-w",level:2}],p={toc:m};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"builtins"},"Builtins"),(0,a.kt)("h2",{id:"a-b"},(0,a.kt)("inlineCode",{parentName:"h2"},"A B")),(0,a.kt)("h3",{id:i.Q.abs.sig}," ",(0,a.kt)("code",null," ",i.Q.abs.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.abs,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.add.sig}," ",(0,a.kt)("code",null," ",i.Q.add.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.add,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.address_to_contract.sig}," ",(0,a.kt)("code",null," ",i.Q.address_to_contract.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.address_to_contract,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.apply_lambda.sig}," ",(0,a.kt)("code",null," ",i.Q.apply_lambda.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.apply_lambda,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.blake2b.sig}," ",(0,a.kt)("code",null," ",i.Q.blake2b.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.blake2b,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.bytes_to_nat.sig}," ",(0,a.kt)("code",null," ",i.Q.bytes_to_nat.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.bytes_to_nat,mdxType:"Builtin"}),(0,a.kt)("h2",{id:"c-d"},(0,a.kt)("inlineCode",{parentName:"h2"},"C D")),(0,a.kt)("h3",{id:i.Q.call_view.sig}," ",(0,a.kt)("code",null," ",i.Q.call_view.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.call_view,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.ceil.sig}," ",(0,a.kt)("code",null," ",i.Q.ceil.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.ceil,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.check_signature.sig}," ",(0,a.kt)("code",null," ",i.Q.check_signature.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.check_signature,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.concat.sig}," ",(0,a.kt)("code",null," ",i.Q.concat.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.concat,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.contains.sig}," ",(0,a.kt)("code",null," ",i.Q.contains.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.contains,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.contract_to_address.sig}," ",(0,a.kt)("code",null," ",i.Q.contract_to_address.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.contract_to_address,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.create_contract.sig}," ",(0,a.kt)("code",null," ",i.Q.create_contract.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.create_contract,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.create_ticket.sig}," ",(0,a.kt)("code",null," ",i.Q.create_ticket.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.create_ticket,mdxType:"Builtin"}),(0,a.kt)("h2",{id:"e-f"},(0,a.kt)("inlineCode",{parentName:"h2"},"E F")),(0,a.kt)("h3",{id:i.Q.exec_lambda.sig}," ",(0,a.kt)("code",null," ",i.Q.exec_lambda.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.exec_lambda,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.exp_horner.sig}," ",(0,a.kt)("code",null," ",i.Q.exp_horner.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.exp_horner,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.floor.sig}," ",(0,a.kt)("code",null," ",i.Q.floor.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.floor,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.fold.sig}," ",(0,a.kt)("code",null," ",i.Q.fold.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.fold,mdxType:"Builtin"}),(0,a.kt)("h2",{id:"g-h"},(0,a.kt)("inlineCode",{parentName:"h2"},"G H")),(0,a.kt)("h3",{id:i.Q.get_denominator.sig}," ",(0,a.kt)("code",null," ",i.Q.get_denominator.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.get_denominator,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.get_entrypoint.sig}," ",(0,a.kt)("code",null," ",i.Q.get_entrypoint.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.get_entrypoint,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.get_numerator.sig}," ",(0,a.kt)("code",null," ",i.Q.get_numerator.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.get_numerator,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.global_constant.sig}," ",(0,a.kt)("code",null," ",i.Q.global_constant.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.global_constant,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.greedy_and.sig}," ",(0,a.kt)("code",null," ",i.Q.greedy_and.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.greedy_and,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.greedy_or.sig}," ",(0,a.kt)("code",null," ",i.Q.greedy_or.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.greedy_or,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.head.sig}," ",(0,a.kt)("code",null," ",i.Q.head.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.head,mdxType:"Builtin"}),(0,a.kt)("h2",{id:"i-j"},(0,a.kt)("inlineCode",{parentName:"h2"},"I J")),(0,a.kt)("h3",{id:i.Q.int_to_date.sig}," ",(0,a.kt)("code",null," ",i.Q.int_to_date.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.int_to_date,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.int_to_nat.sig}," ",(0,a.kt)("code",null," ",i.Q.int_to_nat.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.int_to_nat,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.is_implicit_address.sig}," ",(0,a.kt)("code",null," ",i.Q.is_implicit_address.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.is_implicit_address,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.is_none.sig}," ",(0,a.kt)("code",null," ",i.Q.is_none.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.is_none,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.is_some.sig}," ",(0,a.kt)("code",null," ",i.Q.is_some.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.is_some,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.join_tickets.sig}," ",(0,a.kt)("code",null," ",i.Q.join_tickets.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.join_tickets,mdxType:"Builtin"}),(0,a.kt)("h2",{id:"k-l"},(0,a.kt)("inlineCode",{parentName:"h2"},"K L")),(0,a.kt)("h3",{id:i.Q.keccak.sig}," ",(0,a.kt)("code",null," ",i.Q.keccak.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.keccak,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.key_hash_to_contract.sig}," ",(0,a.kt)("code",null," ",i.Q.key_hash_to_contract.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.key_hash_to_contract,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.key_to_address.sig}," ",(0,a.kt)("code",null," ",i.Q.key_to_address.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.key_to_address,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.key_to_key_hash.sig}," ",(0,a.kt)("code",null," ",i.Q.key_to_key_hash.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.key_to_key_hash,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.lambda_michelson.sig}," ",(0,a.kt)("code",null," ",i.Q.lambda_michelson.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.lambda_michelson,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.left.sig}," ",(0,a.kt)("code",null," ",i.Q.left.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.left,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.length.sig}," ",(0,a.kt)("code",null," ",i.Q.length.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.length,mdxType:"Builtin"}),(0,a.kt)("h2",{id:"m-n"},(0,a.kt)("inlineCode",{parentName:"h2"},"M N")),(0,a.kt)("h3",{id:i.Q.make_asset.sig}," ",(0,a.kt)("code",null," ",i.Q.make_asset.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.make_asset,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.make_big_map.sig}," ",(0,a.kt)("code",null," ",i.Q.make_big_map.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.make_big_map,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.make_event.sig}," ",(0,a.kt)("code",null," ",i.Q.make_event.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.make_event,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.make_map.sig}," ",(0,a.kt)("code",null," ",i.Q.make_map.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.make_map,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.make_list.sig}," ",(0,a.kt)("code",null," ",i.Q.make_list.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.make_list,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.make_operation.sig}," ",(0,a.kt)("code",null," ",i.Q.make_operation.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.make_operation,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.make_sandbox_exec_operation.sig}," ",(0,a.kt)("code",null," ",i.Q.make_sandbox_exec_operation.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.make_sandbox_exec_operation,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.make_set.sig}," ",(0,a.kt)("code",null," ",i.Q.make_set.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.make_set,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.map.sig}," ",(0,a.kt)("code",null," ",i.Q.map.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.map,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.max.sig}," ",(0,a.kt)("code",null," ",i.Q.max.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.max,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.michelson.sig}," ",(0,a.kt)("code",null," ",i.Q.michelson.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.michelson,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.min.sig}," ",(0,a.kt)("code",null," ",i.Q.min.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.min,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.mutez_to_nat.sig}," ",(0,a.kt)("code",null," ",i.Q.mutez_to_nat.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.mutez_to_nat,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.nat_to_bytes.sig}," ",(0,a.kt)("code",null," ",i.Q.nat_to_bytes.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.nat_to_bytes,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.nat_to_string.sig}," ",(0,a.kt)("code",null," ",i.Q.nat_to_string.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.nat_to_string,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.none.sig}," ",(0,a.kt)("code",null," ",i.Q.none.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.none,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.nth.sig}," ",(0,a.kt)("code",null," ",i.Q.nth.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.nth,mdxType:"Builtin"}),(0,a.kt)("h2",{id:"o-p"},(0,a.kt)("inlineCode",{parentName:"h2"},"O P")),(0,a.kt)("h3",{id:i.Q.open_chest.sig}," ",(0,a.kt)("code",null," ",i.Q.open_chest.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.open_chest,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.pack.sig}," ",(0,a.kt)("code",null," ",i.Q.pack.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.pack,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.pairing_check.sig}," ",(0,a.kt)("code",null," ",i.Q.pairing_check.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.pairing_check,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.prepend.sig}," ",(0,a.kt)("code",null," ",i.Q.prepend.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.prepend,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.put.sig}," ",(0,a.kt)("code",null," ",i.Q.put.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.put,mdxType:"Builtin"}),(0,a.kt)("h2",{id:"q-r"},(0,a.kt)("inlineCode",{parentName:"h2"},"Q R")),(0,a.kt)("h3",{id:i.Q.read_ticket.sig}," ",(0,a.kt)("code",null," ",i.Q.read_ticket.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.read_ticket,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.remove.sig}," ",(0,a.kt)("code",null," ",i.Q.remove.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.remove,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.reverse.sig}," ",(0,a.kt)("code",null," ",i.Q.reverse.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.reverse,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.right.sig}," ",(0,a.kt)("code",null," ",i.Q.right.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.right,mdxType:"Builtin"}),(0,a.kt)("h2",{id:"s-t"},(0,a.kt)("inlineCode",{parentName:"h2"},"S T")),(0,a.kt)("h3",{id:i.Q.sapling_empty_state.sig}," ",(0,a.kt)("code",null," ",i.Q.sapling_empty_state.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.sapling_empty_state,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.sapling_verify_update.sig}," ",(0,a.kt)("code",null," ",i.Q.sapling_verify_update.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.sapling_verify_update,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.set_delegate.sig}," ",(0,a.kt)("code",null," ",i.Q.set_delegate.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.set_delegate,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.sha256.sig}," ",(0,a.kt)("code",null," ",i.Q.sha256.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.sha256,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.sha3.sig}," ",(0,a.kt)("code",null," ",i.Q.sha3.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.sha3,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.sha512.sig}," ",(0,a.kt)("code",null," ",i.Q.sha512.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.sha512,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.simplify_rational.sig}," ",(0,a.kt)("code",null," ",i.Q.simplify_rational.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.simplify_rational,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.slice.sig}," ",(0,a.kt)("code",null," ",i.Q.slice.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.slice,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.some.sig}," ",(0,a.kt)("code",null," ",i.Q.some.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.some,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.split_ticket.sig}," ",(0,a.kt)("code",null," ",i.Q.split_ticket.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.split_ticket,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.sub_mutez.sig}," ",(0,a.kt)("code",null," ",i.Q.sub_mutez.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.sub_mutez,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.sub_nat.sig}," ",(0,a.kt)("code",null," ",i.Q.sub_nat.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.sub_nat,mdxType:"Builtin"}),(0,a.kt)("h2",{id:"t-u"},(0,a.kt)("inlineCode",{parentName:"h2"},"T U")),(0,a.kt)("h3",{id:i.Q.tail.sig}," ",(0,a.kt)("code",null," ",i.Q.tail.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.tail,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.unpack.sig}," ",(0,a.kt)("code",null," ",i.Q.unpack.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.unpack,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.update_map.sig}," ",(0,a.kt)("code",null," ",i.Q.update_map.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.update_map,mdxType:"Builtin"}),(0,a.kt)("h3",{id:i.Q.update_set.sig}," ",(0,a.kt)("code",null," ",i.Q.update_set.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.update_set,mdxType:"Builtin"}),(0,a.kt)("h2",{id:"v-w"},(0,a.kt)("inlineCode",{parentName:"h2"},"V W")),(0,a.kt)("h3",{id:i.Q.voting_power.sig}," ",(0,a.kt)("code",null," ",i.Q.voting_power.sig," ")," "),(0,a.kt)(r.Z,{data:i.Q.voting_power,mdxType:"Builtin"}))}u.isMDXComponent=!0},2321:(e,t,n)=>{n.d(t,{Z:()=>l});const l={divider:"divider_LuCZ",gradient:"gradient_kJ7D"}}}]);