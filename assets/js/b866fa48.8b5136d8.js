"use strict";(self.webpackChunkarchetype_docs=self.webpackChunkarchetype_docs||[]).push([[2658],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>h});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=m(a),u=i,h=c["".concat(o,".").concat(u)]||c[u]||d[u]||r;return a?n.createElement(h,l(l({ref:t},s),{},{components:a})):n.createElement(h,l({ref:t},s))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[c]="string"==typeof e?e:i,l[1]=p;for(var m=2;m<r;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9485:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>p,metadata:()=>m,toc:()=>c});var n=a(7462),i=(a(7294),a(3905)),r=a(4996),l=a(941);const p={slug:"iterable-big-map",title:"Iterable big map",authors:["br"],tags:["big map","new feature"]},o=void 0,m={permalink:"/blog/iterable-big-map",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-04-24-iterable-big-map.md",source:"@site/blog/2022-04-24-iterable-big-map.md",title:"Iterable big map",description:"We present a new type of map called iterablebigmap, which has the scalability property of a bigmap, and which can be iterated like a basic map.",date:"2022-04-24T00:00:00.000Z",formattedDate:"April 24, 2022",tags:[{label:"big map",permalink:"/blog/tags/big-map"},{label:"new feature",permalink:"/blog/tags/new-feature"}],readingTime:2.875,hasTruncateMarker:!0,authors:[{name:"Benoit Rognier",title:"CEO Completium",url:"https://www.linkedin.com/in/benoitrognier/",imageURL:"/img/blog/br.jpeg",key:"br"}],frontMatter:{slug:"iterable-big-map",title:"Iterable big map",authors:["br"],tags:["big map","new feature"]},prevItem:{title:"Accessing assets",permalink:"/blog/asset-access"},nextItem:{title:"Events",permalink:"/blog/events"}},s={authorsImageUrls:[void 0]},c=[{value:"Example",id:"example",level:2},{value:"Principle",id:"principle",level:2},{value:"Add",id:"add",level:3},{value:"Update",id:"update",level:3},{value:"Remove",id:"remove",level:3},{value:"Implementation",id:"implementation",level:2}],d={toc:c};function u(e){let{components:t,...p}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,p,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We present a new type of map called ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#iterable_big_map%3CK,%20V%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"iterable_big_map")),", which has the scalability property of a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#big_map%3CK,%20V%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"big_map")),", and which can be ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/instructions/containers#map"},"iterated")," like a basic ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#map%3CK,%20V%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"map")),"."),(0,i.kt)("p",null,"This feature was suggested by ",(0,i.kt)("a",{parentName:"p",href:"https://www.nomadic-labs.com/"},"Nomadic Labs"),". Thank you to ",(0,i.kt)("a",{parentName:"p",href:"https://www.linkedin.com/in/lucas-felli-815653111/"},"Lucas Feli")," and ",(0,i.kt)("a",{parentName:"p",href:"https://www.linkedin.com/in/charles-dehlinger-a34699166/"},"Charles Delhinger")," for the algorithm."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Consider the following declaration of an iterable big map between a ",(0,i.kt)("inlineCode",{parentName:"p"},"nat")," key and a ",(0,i.kt)("inlineCode",{parentName:"p"},"bytes")," value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"variable ibm : iterable_big_map<nat, bytes> = []\n")),(0,i.kt)("p",null,"While ",(0,i.kt)("inlineCode",{parentName:"p"},"ibm")," has the scalability of a big map (in terms of number of entries), it can also be iterated with the ",(0,i.kt)("inlineCode",{parentName:"p"},"for")," control instruction:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"for (k,v) in ibm do\n  /* k is the key, v is the value */\ndone\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Note that:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"the natural order of the key values is not garanteed (unlike basic ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/types#map%3CK,%20V%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"map")),")"),(0,i.kt)("li",{parentName:"ul"},"the cost of operations increases compared to a ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/types#big_map%3CK,%20V%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"big_map"))))),(0,i.kt)("p",null,"An Archetype ",(0,i.kt)("a",{parentName:"p",href:"/docs/asset"},"asset")," may now be compiled as an iterable big map; it then benefits from the ",(0,i.kt)("em",{parentName:"p"},"whole")," asset ",(0,i.kt)("a",{parentName:"p",href:"/docs/asset#api"},"API"),". For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"asset car to iterable_big_map {\n  vin       : string;\n  nbdoors   : nat;\n  nbrepairs : nat;\n  owner     : address;\n}\n")),(0,i.kt)("h2",{id:"principle"},"Principle"),(0,i.kt)("p",null,"Since it is always possible to iterate from ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", the idea is to create a big map that associates the iteration integer value to the map's key value. It is also necessary to associate the map key back to this iteration integer (see ",(0,i.kt)("em",{parentName:"p"},"remove")," operation below)."),(0,i.kt)("p",null,"The following example illustrates the design of two big maps called ",(0,i.kt)("em",{parentName:"p"},"Keys")," and ",(0,i.kt)("em",{parentName:"p"},"Values")," derived from the original map:"),(0,i.kt)("center",null,(0,i.kt)(l.Z,{style:{width:"80%"},alt:"IBM1",sources:{light:(0,r.Z)("/img/blog/ibm1-light.svg"),dark:(0,r.Z)("/img/blog/ibm1-dark.svg")},mdxType:"ThemedImage"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Keys")," associates the iteration integer with the map key"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Values")," is the original map where the value is augmented with the iteration integer")),(0,i.kt)("h3",{id:"add"},"Add"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"add")," operation consists in:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"associating the next iteration value (",(0,i.kt)("inlineCode",{parentName:"li"},"Size + 1"),") with the new key in the ",(0,i.kt)("em",{parentName:"li"},"Keys")," map"),(0,i.kt)("li",{parentName:"ul"},"associating the new key to the pair of next iteration value and new value in the ",(0,i.kt)("em",{parentName:"li"},"Values")," map"),(0,i.kt)("li",{parentName:"ul"},"incrementing the ",(0,i.kt)("em",{parentName:"li"},"Size")," value")),(0,i.kt)("p",null,"The operation is illustrated below with the addition of the key ",(0,i.kt)("inlineCode",{parentName:"p"},"131")," with value ",(0,i.kt)("inlineCode",{parentName:"p"},"e5"),":"),(0,i.kt)("center",null,(0,i.kt)(l.Z,{style:{width:"80%"},alt:"IBM1",sources:{light:(0,r.Z)("/img/blog/ibm2-light.svg"),dark:(0,r.Z)("/img/blog/ibm2-dark.svg")},mdxType:"ThemedImage"})),(0,i.kt)("h3",{id:"update"},"Update"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"update")," operation is straightforward and consists in updating the ",(0,i.kt)("em",{parentName:"p"},"Values")," map with the new value."),(0,i.kt)("h3",{id:"remove"},"Remove"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"remove")," operation is a step-wise process:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the iteration index of the removed key is retrieved from the ",(0,i.kt)("em",{parentName:"li"},"Values")," map and used to remove the entry in the ",(0,i.kt)("em",{parentName:"li"},"Keys")," map"),(0,i.kt)("li",{parentName:"ul"},"the entry is then removed from the ",(0,i.kt)("em",{parentName:"li"},"Values")," map")),(0,i.kt)("p",null,"At this stage, the iteration values are not consistent since one iteration value has been removed."),(0,i.kt)("p",null,"It is then necessary to associate the last added element with the removed iteration integer by:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"removing the last iteration integer and associate back the removed iteration integer with the last added key in the ",(0,i.kt)("em",{parentName:"li"},"Keys")," mpa"),(0,i.kt)("li",{parentName:"ul"},"updating the iteration integer of last added key in the ",(0,i.kt)("em",{parentName:"li"},"Values")," map")),(0,i.kt)("p",null,"The process is illustrated below with the removal of the entry ",(0,i.kt)("inlineCode",{parentName:"p"},"29")," (associated with iteration value ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),"):"),(0,i.kt)("center",null,(0,i.kt)(l.Z,{style:{width:"80%"},alt:"IBM1",sources:{light:(0,r.Z)("/img/blog/ibm3-light.svg"),dark:(0,r.Z)("/img/blog/ibm3-dark.svg")},mdxType:"ThemedImage"})),(0,i.kt)("h2",{id:"implementation"},"Implementation"),(0,i.kt)("p",null,"An iterable big map is implemented as a triplet of two big maps (",(0,i.kt)("em",{parentName:"p"},"Keys")," and ",(0,i.kt)("em",{parentName:"p"},"Values"),") and one ",(0,i.kt)("em",{parentName:"p"},"Size")," integer."),(0,i.kt)("p",null,"The screenshot below of ",(0,i.kt)("a",{parentName:"p",href:"https://better-call.dev/"},"Better Call Dev")," shows the resulting triplet:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"ibm4",src:a(1923).Z,width:"1238",height:"226"})))}u.isMDXComponent=!0},1923:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/ibm4-4f2e1d8cdb6958333d4639b10c76426d.png"}}]);