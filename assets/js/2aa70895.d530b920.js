"use strict";(self.webpackChunkarchetype_docs=self.webpackChunkarchetype_docs||[]).push([[3896],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[m]="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8337:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:8},i="External contract",c={unversionedId:"reference/declarations/external-contract",id:"reference/declarations/external-contract",title:"External contract",description:"It is possible to import external Archetype contracts (.arl extension), or contracts compiled in Michelson (.tz extension).",source:"@site/docs/reference/declarations/external-contract.md",sourceDirName:"reference/declarations",slug:"/reference/declarations/external-contract",permalink:"/docs/reference/declarations/external-contract",draft:!1,editUrl:"https://github.com/completium/archetype-docs/blob/main/docs/reference/declarations/external-contract.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"docs",previous:{title:"View",permalink:"/docs/reference/declarations/view"},next:{title:"Types",permalink:"/docs/reference/types"}},l={},s=[{value:"Composite types",id:"composite-types",level:2},{value:"Entrypoint",id:"entrypoint",level:2},{value:"View",id:"view",level:2},{value:"Functions",id:"functions",level:2},{value:"Michelson",id:"michelson",level:2}],p={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"external-contract"},"External contract"),(0,r.kt)("p",null,"It is possible to import external Archetype contracts (",(0,r.kt)("inlineCode",{parentName:"p"},".arl")," extension), or contracts compiled in Michelson (",(0,r.kt)("inlineCode",{parentName:"p"},".tz")," extension)."),(0,r.kt)("p",null,"Importing an Archetype contract gives access to the following elements in the current contract:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"named composite types (",(0,r.kt)("a",{parentName:"li",href:"/docs/reference/declarations/compositetypes#enum"},"enum"),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/reference/declarations/compositetypes#record"},"record"),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/reference/declarations/compositetypes#event"},"event")," and ",(0,r.kt)("a",{parentName:"li",href:"/docs/reference/instructions/asset"},"asset"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/reference/declarations/entrypoint"},"entrypoints"),"' signatures"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/reference/declarations/view"},"views"),"' signatures"),(0,r.kt)("li",{parentName:"ul"},"pure ",(0,r.kt)("a",{parentName:"li",href:"/docs/reference/declarations/function"},"functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/reference/declarations/inlined#constant"},"constants")," declarations")),(0,r.kt)("p",null,"When importing a Michelson contract, only entrpoint's signatures are available."),(0,r.kt)("h2",{id:"composite-types"},"Composite types"),(0,r.kt)("p",null,"In order to use a type declared in a contract, the contract is imported and the type name is prefixed by the imported contract name followed by ",(0,r.kt)("inlineCode",{parentName:"p"},"::"),"."),(0,r.kt)("p",null,"For example, consider the following record declaration in ",(0,r.kt)("inlineCode",{parentName:"p"},"somecontract.arl"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="somecontract.arl"',title:'"somecontract.arl"'},"archetype somecontract\n\nrecord person {\n  name : string;\n  age : nat;\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"person")," record may be used in ",(0,r.kt)("inlineCode",{parentName:"p"},"anothercontract.arl")," by importing ",(0,r.kt)("inlineCode",{parentName:"p"},"somecontract"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="anothercontract.arl" {7}',title:'"anothercontract.arl"',"{7}":!0},'archetype anothercontract\n\nimport "somecontract.arl"\n\nvariable max_age : nat = 0\n\nentry register(p : somecontract::person) {\n  max_age := max(max_age, p.age)\n}\n')),(0,r.kt)("p",null,"Note that in order to use a type declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"somecontract"),", it is prefixed by ",(0,r.kt)("inlineCode",{parentName:"p"},"somecontract::"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The path is relative to the current importing contract.")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"somecontract")," contract, the file name and the archetype identifier (id after ",(0,r.kt)("inlineCode",{parentName:"p"},"archetype"),") must be the same!")),(0,r.kt)("h2",{id:"entrypoint"},"Entrypoint"),(0,r.kt)("p",null,"External contract's ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint"},"entrypoints")," can be used without specifying their signature, as it is required by the ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/instructions/operation#transfer"},"transfer")," instruction when only the contract address available."),(0,r.kt)("p",null,"The imported contract handler is passed the contract address, followed by the entrypoint name as illustrated in the following example. Consider the ",(0,r.kt)("inlineCode",{parentName:"p"},"register")," entry declaration in ",(0,r.kt)("inlineCode",{parentName:"p"},"somecontract.arl"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="somecontract.arl"',title:'"somecontract.arl"'},"archetype somecontract\n\nasset person {\n  name : string;\n  age : nat;\n}\n\nentry register(n : string, a : nat) {\n  person.add({ n; a })\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"register")," entrypoint may be called in ",(0,r.kt)("inlineCode",{parentName:"p"},"anothercontract.arl")," by importing ",(0,r.kt)("inlineCode",{parentName:"p"},"somecontract"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="anothercontract.arl" {9}',title:'"anothercontract.arl"',"{9}":!0},'archetype anothercontract(person_storage : address)\n\nimport "somecontract.arl"\n\nvariable max_age : nat = 0\n\nentry declare(n : string, a : nat) {\n  max_age := max(max_age, a);\n  transfer 0tz to entry somecontract(person_storage).register((n, a))\n}\n')),(0,r.kt)("h2",{id:"view"},"View"),(0,r.kt)("p",null,"External contract's views can be used without specifying their signature. The imported contract handler is passed the contract address, followed by the view name as illustrated in the following example."),(0,r.kt)("p",null,"Consider the ",(0,r.kt)("inlineCode",{parentName:"p"},"get_age_average")," view declaration in ",(0,r.kt)("inlineCode",{parentName:"p"},"somecontract.arl"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="somecontract.arl"',title:'"somecontract.arl"'},"archetype somecontract\n\nasset person {\n  name : string;\n  age : nat;\n}\n\nview get_age_average() : rational {\n  return (person.sum(the.age) / person.count())\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"get_age_average")," view may be called in ",(0,r.kt)("inlineCode",{parentName:"p"},"anothercontract.arl")," by importing ",(0,r.kt)("inlineCode",{parentName:"p"},"somecontract"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="anothercontract.arl" {8}',title:'"anothercontract.arl"',"{8}":!0},'archetype anothercontract(person_storage : address)\n\nimport "somecontract.arl"\n\nvariable max_average : rational = 0.0\n\nentry get_info() {\n  max_average ?:= somecontract(person_storage).get_age_average(Unit) : "ERROR"\n}\n')),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("p",null,"An external contract function can be imported ",(0,r.kt)("em",{parentName:"p"},"if and only if")," it does not read or write the local storage (it may fail). Such a function is called ",(0,r.kt)("em",{parentName:"p"},"pure")," (potentially divergent)."),(0,r.kt)("p",null,"Consider the pure function ",(0,r.kt)("inlineCode",{parentName:"p"},"get_area"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="circle.arl"',title:'"circle.arl"'},"archetype circle\n\nconstant pi : rational = 3.14159265358979323846264338327950288419716939937510\n\nfunction get_area(radius : rational) : rational {\n  return (pi * radius * radius)\n}\n")),(0,r.kt)("p",null,"It may be used in another contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="another.arl"',title:'"another.arl"'},'archetype another\n\nimport "./circle.arl"\n\nvariable area : rational = 0\n\nentry exec(radius : rational) {\n area := circle::get_area(radius)\n}\n')),(0,r.kt)("h2",{id:"michelson"},"Michelson"),(0,r.kt)("p",null,"It is also possible to import a Michelson contract."),(0,r.kt)("p",null,"Consider the following Michelson contract that provides one entrypoint that takes a ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/types#nat"},(0,r.kt)("inlineCode",{parentName:"a"},"nat"))," parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="simple.tz"',title:'"simple.tz"'},'{ storage nat ;\n  parameter (or (nat %inc) (nat %dec)) ;\n  code { UNPAIR ;\n         IF_LEFT\n           { DUP ;\n             DUP 3 ;\n             ADD ;\n             DIP 1 { SWAP ; DROP 1 } ;\n             SWAP ;\n             DROP 1 ;\n             NIL operation ;\n             PAIR }\n           { PUSH int 0 ;\n             DUP 2 ;\n             INT ;\n             DUP 4 ;\n             SUB ;\n             COMPARE ;\n             GE ;\n             IF { DUP ; INT ; DUP 3 ; SUB ; ABS }\n                { PUSH string "NAT_NEG_ASSIGN" ; FAILWITH } ;\n             DIP 1 { SWAP ; DROP 1 } ;\n             SWAP ;\n             DROP 1 ;\n             NIL operation ;\n             PAIR } } }\n')),(0,r.kt)("p",null,"This contract declares two entrypoints ",(0,r.kt)("inlineCode",{parentName:"p"},"inc")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"dec")," that takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"nat")," value as parameter."),(0,r.kt)("p",null,"The following contract calls these entrypoints:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="anothercontract.arl" {3,6-7}',title:'"anothercontract.arl"',"{3,6-7}":!0},'archetype anothercontract(simple_addr : address)\n\nimport simple from "simple.tz"\n\nentry exec () {\n  transfer 0tz to entry simple(simple_addr).inc(3);\n  transfer 0tz to entry simple(simple_addr).dec(2);\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Note that the imported contract is ",(0,r.kt)("em",{parentName:"p"},"named")," (",(0,r.kt)("inlineCode",{parentName:"p"},"simple")," above) when imported from Michelson format.")))}m.isMDXComponent=!0}}]);