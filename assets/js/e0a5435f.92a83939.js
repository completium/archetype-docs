"use strict";(self.webpackChunkarchetype_docs=self.webpackChunkarchetype_docs||[]).push([[992],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3512:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:7},i="Operation",l={unversionedId:"reference/instructions/operation",id:"reference/instructions/operation",title:"Operation",description:"transfer",source:"@site/docs/reference/instructions/operation.md",sourceDirName:"reference/instructions",slug:"/reference/instructions/operation",permalink:"/docs/reference/instructions/operation",draft:!1,editUrl:"https://github.com/completium/archetype-docs/blob/main/docs/reference/instructions/operation.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"docs",previous:{title:"Asset",permalink:"/docs/reference/instructions/asset"},next:{title:"Constants",permalink:"/docs/reference/expressions/constants"}},c={},p=[{value:"<code>transfer</code>",id:"transfer",level:2},{value:"Transfer balance",id:"transfer-balance",level:3},{value:"Call another contract",id:"call-another-contract",level:3},{value:"Call current contract",id:"call-current-contract",level:3},{value:"Low level instruction",id:"low-level-instruction",level:3},{value:"<code>emit</code>",id:"emit",level:2}],s={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"operation"},"Operation"),(0,a.kt)("h2",{id:"transfer"},(0,a.kt)("inlineCode",{parentName:"h2"},"transfer")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"transfer")," instruction generates an ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/types#operation"},"operation"),"."),(0,a.kt)("p",null,"This operation is either a simple transfer operation of a part of the contract ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/expressions/constants#balance"},(0,a.kt)("inlineCode",{parentName:"a"},"balance"))," to an account or a contract, or a call to another contract's entrypoint."),(0,a.kt)("h3",{id:"transfer-balance"},"Transfer balance"),(0,a.kt)("p",null,"The following transfers an amount ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," of tez to address ",(0,a.kt)("inlineCode",{parentName:"p"},"c"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"transfer a to c\n")),(0,a.kt)("p",null,"It fails if amount ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," is greater than the contract ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/expressions/constants#balance"},(0,a.kt)("inlineCode",{parentName:"a"},"balance")),"."),(0,a.kt)("h3",{id:"call-another-contract"},"Call another contract"),(0,a.kt)("p",null,"Consider a contract with address ",(0,a.kt)("inlineCode",{parentName:"p"},"c")," that declares an ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint"},"entrypoint")," ",(0,a.kt)("inlineCode",{parentName:"p"},"e")," with argument of type ",(0,a.kt)("inlineCode",{parentName:"p"},"T")," as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"entry e(x : T) { /* ... */ }\n")),(0,a.kt)("p",null,"The following calls entrypoint ",(0,a.kt)("inlineCode",{parentName:"p"},"e")," with argument value ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," of type ",(0,a.kt)("inlineCode",{parentName:"p"},"T"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"transfer a to c call e<T>(x)\n")),(0,a.kt)("p",null,"It fails if amount ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," is greater than the contract balance or if contract ",(0,a.kt)("inlineCode",{parentName:"p"},"c")," does not have entrypoint ",(0,a.kt)("inlineCode",{parentName:"p"},"e")," with corresponding signature."),(0,a.kt)("p",null,"For example, consider the following contract:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"archetype called_contract\n\nvariable r : nat = 0\n\nentry exec(x : nat, y : nat) {\n    r := r * x + y\n}\n")),(0,a.kt)("p",null,"Then the following ",(0,a.kt)("inlineCode",{parentName:"p"},"transfer")," instruction calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"exec")," entrypoint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"transfer 0tz to c call exec<nat * nat>((4,5))\n")),(0,a.kt)("p",null,"Note that the multiple arguments of ",(0,a.kt)("inlineCode",{parentName:"p"},"exec")," is turned into a tuple of corresponding values."),(0,a.kt)("h3",{id:"call-current-contract"},"Call current contract"),(0,a.kt)("p",null,"It is possible to call another entrypoint ",(0,a.kt)("inlineCode",{parentName:"p"},"e")," of the current contract with the follwing instruction:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"transfer a to entry self.e(x)\n")),(0,a.kt)("p",null,"For example, the following would call the ",(0,a.kt)("inlineCode",{parentName:"p"},"exec")," entrypoint from another entrypoint of the same contract:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"transfer 0tz to entry self.exec(4,5)\n")),(0,a.kt)("h3",{id:"low-level-instruction"},"Low level instruction"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"transfer")," instruction is pre-compiled to the low level instruction ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/expressions/builtins#make_operation(a%20:%20tez,%20c%20:%20contract%3CT%3E,%20arg%20:%20T)"},(0,a.kt)("inlineCode",{parentName:"a"},"make_operation")),"."),(0,a.kt)("p",null,"The following instruction:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"transfer a to c call e<T>(x)\n")),(0,a.kt)("p",null,"is equivalent to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},'const e ?= get_entrypoint<T>("%e", c) : "ENTRY_NOT_FOUND";\nconst o  = make_operation(a, e, x);\noperations := reverse(prepend(reverse(operations), o))\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"operations")," is the builtin list of operations returned by the entrypoint."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Operations generated by the ",(0,a.kt)("inlineCode",{parentName:"p"},"transfer")," instruction will be executed in the order ",(0,a.kt)("inlineCode",{parentName:"p"},"transfer")," instructions appear in the code.")),(0,a.kt)("h2",{id:"emit"},(0,a.kt)("inlineCode",{parentName:"h2"},"emit")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"emit")," instruction emits an event of type ",(0,a.kt)("inlineCode",{parentName:"p"},"T")," and value ",(0,a.kt)("inlineCode",{parentName:"p"},"x"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"emit<T>(x)\n")),(0,a.kt)("p",null,"For example, consider the event declaration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"event HighestBidIncreased {\n  bidder : address;\n  amount : tez\n}\n")),(0,a.kt)("p",null,"Then the following emits the ",(0,a.kt)("inlineCode",{parentName:"p"},"HighestBidIncreased")," event:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"emit<HighestBidIncreased>({ source; transferred })\n")),(0,a.kt)("p",null,"The low level instruction is ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/expressions/builtins#make_event%3CT%3E(tag,%20v)"},(0,a.kt)("inlineCode",{parentName:"a"},"make_event"))),(0,a.kt)("p",null,"See this ",(0,a.kt)("a",{parentName:"p",href:"/blog/events"},"blog entry")," for further information."))}u.isMDXComponent=!0}}]);