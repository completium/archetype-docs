"use strict";(self.webpackChunkarchetype_docs=self.webpackChunkarchetype_docs||[]).push([[9268],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4413:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={slug:"events",title:"Events",authors:["br"],tags:["events","new feature"]},s=void 0,p={permalink:"/blog/events",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-03-21-events.md",source:"@site/blog/2022-03-21-events.md",title:"Events",description:"We present the new instruction emit to emit an event, in a similar an event is emitted in languages like solidity.",date:"2022-03-21T00:00:00.000Z",formattedDate:"March 21, 2022",tags:[{label:"events",permalink:"/blog/tags/events"},{label:"new feature",permalink:"/blog/tags/new-feature"}],readingTime:2.33,truncated:!0,authors:[{name:"Benoit Rognier",title:"CEO Completium",url:"https://www.linkedin.com/in/benoitrognier/",imageURL:"/img/blog/br.jpeg",key:"br"}],frontMatter:{slug:"events",title:"Events",authors:["br"],tags:["events","new feature"]},prevItem:{title:"Iterable big map",permalink:"/blog/iterable-big-map"},nextItem:{title:"Welcome",permalink:"/blog/welcome"}},c={authorsImageUrls:[void 0]},d=[{value:"Event well",id:"event-well",level:3},{value:"Event",id:"event",level:3},{value:"Retrieve events",id:"retrieve-events",level:3},{value:"DApp example",id:"dapp-example",level:3}],m={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We present the new instruction ",(0,i.kt)("inlineCode",{parentName:"p"},"emit")," to emit an event, in a similar an event is emitted in languages like solidity."),(0,i.kt)("p",null,"This feater was suggested by ",(0,i.kt)("a",{parentName:"p",href:"https://www.nomadic-labs.com/"},"Nomadic Labs"),". Thank you to ",(0,i.kt)("a",{parentName:"p",href:"https://www.linkedin.com/in/brunobernardo/"},"Bruno Bernardo")," for the event well mechanism."),(0,i.kt)("p",null,"An event is declared with the ",(0,i.kt)("inlineCode",{parentName:"p"},"event")," keyword, similarly to a record:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"event HighestBidIncreased {\n  bidder : address;\n  amount : tez\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"emit")," instruction is then used in an entrypoint as illustrated below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"entry bid() {\n  /* ... */\n  if transferred > highestbid then begin\n    highestbid := transferred;\n    emit<HighestBidIncreased>({ source; transferred })\n  end\n}\n")),(0,i.kt)("h3",{id:"event-well"},"Event well"),(0,i.kt)("p",null,"The emition of an event generates a call to a contract called ",(0,i.kt)("em",{parentName:"p"},"event well"),". This contract provides a single entrypoint named ",(0,i.kt)("em",{parentName:"p"},"event")," which takes an argument typed ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#bytes"},(0,i.kt)("inlineCode",{parentName:"a"},"bytes")),"."),(0,i.kt)("p",null,"The code of the event well contract is then:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"archetype event_well\n\nentry %event(arg : bytes) {}\n")),(0,i.kt)("p",null,"The event well is deployed at the address ",(0,i.kt)("a",{parentName:"p",href:"https://better-call.dev/ithacanet/KT1AHVF5m8XaWPQCGgfAsZ9eSJJZ7WVGV2hE/operations"},(0,i.kt)("inlineCode",{parentName:"a"},"KT1AHVF5m8XaWPQCGgfAsZ9eSJJZ7WVGV2hE"))," on the mainnet, and at ",(0,i.kt)("a",{parentName:"p",href:"https://better-call.dev/ithacanet/KT1ReVgfaUqHzWWiNRfPXQxf7TaBLVbxrztw/operations"},(0,i.kt)("inlineCode",{parentName:"a"},"KT1ReVgfaUqHzWWiNRfPXQxf7TaBLVbxrztw")),"on Ithacanet."),(0,i.kt)("h3",{id:"event"},"Event"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"emit")," instruction builds the event argument as a triplet of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the event name"),(0,i.kt)("li",{parentName:"ul"},"the event annotated Michelson type"),(0,i.kt)("li",{parentName:"ul"},"packed value of the event data")),(0,i.kt)("p",null,"In the example of the ",(0,i.kt)("em",{parentName:"p"},"HighestBidIncreased")," presented above, the following ",(0,i.kt)("inlineCode",{parentName:"p"},"emit")," instruction:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"emit<HighestBidIncreased>({ source; transferred })\n")),(0,i.kt)("p",null,"is equivalent to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'const e = pack((\n  "HighestBidIncreased",\n  "pair (address %bidder) (tez %amount)",\n  pack({\n    bidder = source;\n    amount = transferred\n  })\n});\nconst event_well = KT1AHVF5m8XaWPQCGgfAsZ9eSJJZ7WVGV2hE;\ntransfer 0tz to event_well call event<bytes>(e)\n')),(0,i.kt)("h3",{id:"retrieve-events"},"Retrieve events"),(0,i.kt)("p",null,"A Typescript library, called the ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@completium/event-well-crank"},(0,i.kt)("em",{parentName:"a"},"crank")),", is available to retrieve event data from a DApp."),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"crank")," receives events from contracts and executes event handler functions."),(0,i.kt)("p",null,"For example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleHBI")," function below is executed when a ",(0,i.kt)("inlineCode",{parentName:"p"},"HighestBidIncreased")," event is emitted by the contract:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { startCrank } from '@completium/event-well-crank'\nimport {\n  HighestBidIncreased,\n  register_HighestBidIncreased } from './bid-bindings.ts'\n\nconst contract = \"KT1...\" // address of the emitter contract\n\nconst handleHBI = (hbi : HighestBidIncreased) => {\n  // ...\n  console.log(`${hbi.bidder} is now the highest bid bidder.`)\n}\n\n// register Handler\nregister_HighestBidIncreased(contract, handleHBI);\n\n// Start crank\nawait startCrank();\n")),(0,i.kt)("p",null,"The HighestBidIncreased type and register_HighestBidIncreased function are bindings code generated by completium CLI:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ completium-cli generate bindings-ts bid.arl > bid-bindings.ts\n")),(0,i.kt)("h3",{id:"dapp-example"},"DApp example"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"Bulb")," DApp example is available ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/completium/bulb-event-demo"},"here"),"."),(0,i.kt)("p",null,"The bulb is switched on/off by receiving events from the bulb contract. The contract is designed as a simplistic state machine with On and Off states. Two events ",(0,i.kt)("inlineCode",{parentName:"p"},"SwitchedOn")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"SwitchedOff")," are defined and emitted respectively by ",(0,i.kt)("inlineCode",{parentName:"p"},"switchOn")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"switchOff")," entrypoints:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"archetype bulb\n\nstates = | On | Off\n\nevent SwitchedOn {}\n\nevent SwitchedOff {}\n\ntransition switchOn() {\n  from Off to On\n  with effect { emit<SwitchedOn>({}) }\n}\n\ntransition switchOff() {\n  from On to Off\n  with effect { emit<SwitchedOff>({}) }\n}\n")),(0,i.kt)("p",null,"A live bulb demo is available ",(0,i.kt)("a",{parentName:"p",href:"https://completium.github.io/bulb-event-demo/"},"here"),"."))}u.isMDXComponent=!0}}]);