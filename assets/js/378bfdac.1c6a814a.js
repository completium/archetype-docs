"use strict";(self.webpackChunkarchetype_docs=self.webpackChunkarchetype_docs||[]).push([[8671],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=s(n),u=l,k=m["".concat(p,".").concat(u)]||m[u]||c[u]||r;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function u(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3818:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var a=n(7462),l=n(3366),r=(n(7294),n(3905)),o=["components"],i={sidebar_position:2,sidebar_label:"Contract Integration"},p="Contract Integration",s={unversionedId:"dapps/example/interaction",id:"dapps/example/interaction",title:"Contract Integration",description:"This section presents in detail the interaction between the DApp's UI and the poll contract:",source:"@site/docs/dapps/example/interaction.md",sourceDirName:"dapps/example",slug:"/dapps/example/interaction",permalink:"/docs/dapps/example/interaction",draft:!1,editUrl:"https://github.com/completium/archetype-docs/blob/main/docs/dapps/example/interaction.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Contract Integration"},sidebar:"dapps",previous:{title:"Smart Contract",permalink:"/docs/dapps/example/contract"},next:{title:"APIs",permalink:"/docs/dapps/example/apis"}},d={},c=[{value:"Generate bindings",id:"generate-bindings",level:2},{value:"Retrieving poll data",id:"retrieving-poll-data",level:2},{value:"Invoking <code>respond</code> entry",id:"invoking-respond-entry",level:2},{value:"Invoking <code>add_poll</code> entry",id:"invoking-add_poll-entry",level:2},{value:"Invoking <code>already_responded</code> view",id:"invoking-already_responded-view",level:2},{value:"Listening to events",id:"listening-to-events",level:2}],m={toc:c};function u(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"contract-integration"},"Contract Integration"),(0,r.kt)("p",null,"This section presents in detail the interaction between the DApp's UI and the ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract"},"poll contract"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"how polls data are retrieved from contract?"),(0,r.kt)("li",{parentName:"ul"},"how entries and views are invoked?")),(0,r.kt)("h2",{id:"generate-bindings"},"Generate bindings"),(0,r.kt)("p",null,"The following ",(0,r.kt)("a",{parentName:"p",href:"/docs/cli/introduction"},"Completium CLI")," command generates the contract(s) bindings for a DApp:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-completium"},"completium-cli generate binding-dapp-ts ./poll-contract/contracts/poll.arl > ./src/bindings/poll.ts\n")),(0,r.kt)("h2",{id:"retrieving-poll-data"},"Retrieving poll data"),(0,r.kt)("p",null,"The Typescript binding provides the method ",(0,r.kt)("inlineCode",{parentName:"p"},"get_poll")," that returns the ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#poll"},"poll")," ",(0,r.kt)("em",{parentName:"p"},"container")," as a list of pair of poll key and ",(0,r.kt)("inlineCode",{parentName:"p"},"poll_value"),", whose type finally reduces to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"Array<[ Nat, {\n  ipfs_hash : Bytes,\n  responses : Array<[ Nat, Nat ]>,\n  creation  : Date\n}]>;\n")),(0,r.kt)("p",null,"The binding is using types from ",(0,r.kt)("inlineCode",{parentName:"p"},"@completium/archtype-ts-types")," package:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Nat")," to represent Michelson's natural integer type ",(0,r.kt)("inlineCode",{parentName:"li"},"nat")," of arbitrary precision"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Bytes"),"to represent bytes values")),(0,r.kt)("p",null,"It is convienient to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"downcast ",(0,r.kt)("inlineCode",{parentName:"li"},"Nat")," values to native TypeScript values typed ",(0,r.kt)("inlineCode",{parentName:"li"},"number")),(0,r.kt)("li",{parentName:"ul"},"turn Hex-encoded IPFS hash to poll definition's fields (",(0,r.kt)("inlineCode",{parentName:"li"},"utterance")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"choices"),")")),(0,r.kt)("p",null,"A dedicated type ",(0,r.kt)("inlineCode",{parentName:"p"},"Poll")," is created to merge contract's polls data with IPFS stored poll definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export interface Poll {\n  id        : number,\n  utterance : string,\n  img       : string,\n  choices   : Array<string>\n  creation  : Date,\n  responses : Array<[ number, number]>\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"load_data")," function from ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/apis#store"},(0,r.kt)("inlineCode",{parentName:"a"},"Polls.tsx")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"loads data from contract"),(0,r.kt)("li",{parentName:"ol"},"maps each poll data to the ",(0,r.kt)("inlineCode",{parentName:"li"},"Poll")," Typescript")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const loadData = async () => {\n  const poll_data = await contract.get_poll()\n  const polls     = await Promise.all(poll_data.map(async ([poll_id, poll_value]) => {\n    const url = ipfs + poll_value.ipfs_hash.hex_decode()\n    const res = await fetch(url)\n    const ui : UIPoll = await res.json()\n    return {\n      id        : poll_id.to_number(),\n      utterance : ui.utterance,\n      img       : ui.img,\n      choices   : ui.choices,\n      creation  : poll_value.creation,\n      responses : poll_value.responses.map(x => [ x[0].to_number(), x[1].to_number() ])\n    }\n  }))\n  setPolls(polls.sort((p1,p2) => p1.creation.getTime() - p2.creation.getTime()))\n}\n")),(0,r.kt)("p",null,"Comments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contrat")," object has been locally obtained with hook ",(0,r.kt)("inlineCode",{parentName:"li"},"useContract")," from ",(0,r.kt)("a",{parentName:"li",href:"/docs/dapps/example/apis#store"},(0,r.kt)("inlineCode",{parentName:"a"},"PollContract.tsx"))),(0,r.kt)("li",{parentName:"ul"},"async method ",(0,r.kt)("inlineCode",{parentName:"li"},"get_poll")," is used to retrieve poll container"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Nat"),"'s ",(0,r.kt)("inlineCode",{parentName:"li"},"to_number")," method is used to downcast to native type ",(0,r.kt)("inlineCode",{parentName:"li"},"number")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Bytes"),"'s ",(0,r.kt)("inlineCode",{parentName:"li"},"hex_decode")," method is used to decode the IPFS hash"),(0,r.kt)("li",{parentName:"ul"},"polls are sorted by creation date to present more recent polls first")),(0,r.kt)("h2",{id:"invoking-respond-entry"},"Invoking ",(0,r.kt)("inlineCode",{parentName:"h2"},"respond")," entry"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"RespondPoll")," UI component displays the ",(0,r.kt)("inlineCode",{parentName:"p"},"SUBMIT")," button that calls contract's ",(0,r.kt)("inlineCode",{parentName:"p"},"respond")," entry point."),(0,r.kt)("p",null,"The code that handles the click button event is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const respond = async () => {\n  try {\n    if (choice !== undefined) {\n      await contract.respond(new Nat(selected), new Nat(choice), {})\n    }\n  } catch(e) {\n    console.log(e)\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Button onClick={respond}>submit</Button>\n")),(0,r.kt)("p",null,"Comments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contract")," object has been locally obtained with hook ",(0,r.kt)("inlineCode",{parentName:"li"},"useContract")," from ",(0,r.kt)("a",{parentName:"li",href:"/docs/dapps/example/apis#store"},(0,r.kt)("inlineCode",{parentName:"a"},"PollContract.tsx"))),(0,r.kt)("li",{parentName:"ul"},"poll identifier ",(0,r.kt)("inlineCode",{parentName:"li"},"selected")," and answer identifier ",(0,r.kt)("inlineCode",{parentName:"li"},"choice")," are upcasted to ",(0,r.kt)("inlineCode",{parentName:"li"},"Nat")," type as specified by contract's entry ",(0,r.kt)("a",{parentName:"li",href:"/docs/dapps/example/contract#respond"},(0,r.kt)("inlineCode",{parentName:"a"},"respond"))),(0,r.kt)("li",{parentName:"ul"},"last argument ",(0,r.kt)("inlineCode",{parentName:"li"},"{}")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"respond")," method is the call's optional parameters (typically the amount of tez to send the contract)")),(0,r.kt)("h2",{id:"invoking-add_poll-entry"},"Invoking ",(0,r.kt)("inlineCode",{parentName:"h2"},"add_poll")," entry"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AddPoll")," UI component displays the ",(0,r.kt)("inlineCode",{parentName:"p"},"SUBMIT")," button that calls contract's ",(0,r.kt)("inlineCode",{parentName:"p"},"add_poll")," entry point."),(0,r.kt)("p",null,"The code that handles the click button event is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const add_poll = async () => {\n  try {\n    await contract.add_poll(Bytes.hex_encode(uri), {})\n  } catch (e) {\n    console.log(e)\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Button onClick={add_poll}>submit</Button>\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contract")," object has been locally obtained with hook ",(0,r.kt)("inlineCode",{parentName:"li"},"useContract")," from ",(0,r.kt)("a",{parentName:"li",href:"/docs/dapps/example/apis#store"},(0,r.kt)("inlineCode",{parentName:"a"},"PollContract.tsx"))),(0,r.kt)("li",{parentName:"ul"},"poll's definition IPFS hash is converted to bytes with ",(0,r.kt)("inlineCode",{parentName:"li"},"Bytes")," utility method ",(0,r.kt)("inlineCode",{parentName:"li"},"hex_encode"),", as specified by the contract's entry ",(0,r.kt)("a",{parentName:"li",href:"/docs/dapps/example/contract#add_poll"},(0,r.kt)("inlineCode",{parentName:"a"},"add_poll"))),(0,r.kt)("li",{parentName:"ul"},"last argument ",(0,r.kt)("inlineCode",{parentName:"li"},"{}")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"respond")," method is the call's optional parameters (typically the amount of tez to send the contract)")),(0,r.kt)("h2",{id:"invoking-already_responded-view"},"Invoking ",(0,r.kt)("inlineCode",{parentName:"h2"},"already_responded")," view"),(0,r.kt)("p",null,"When loaded, ",(0,r.kt)("inlineCode",{parentName:"p"},"RespondPoll")," UI component checks whether wallet address has already responded to the poll by invoking ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#already_responded"},(0,r.kt)("inlineCode",{parentName:"a"},"already_responded"))," view. If so, poll statistics are displayed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const RespondPoll = () => {\n  useEffect(() => {\n    const responded = await contract.view_already_responded(\n      new Nat(poll.id),\n      { as : new Address(wallet_address) }\n    )\n    if (responded) {\n      await loadResponses(poll.id)\n    }\n  }, [])\n}\n")),(0,r.kt)("p",null,"Comments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/hooks-effect.html"},(0,r.kt)("inlineCode",{parentName:"a"},"useEffect"))," React hook is invoked after UI component is loaded"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contract")," object has been locally obtained with hook ",(0,r.kt)("inlineCode",{parentName:"li"},"useContract")," from ",(0,r.kt)("a",{parentName:"li",href:"/docs/dapps/example/apis#store"},(0,r.kt)("inlineCode",{parentName:"a"},"PollContract.tsx"))),(0,r.kt)("li",{parentName:"ul"},"call parameter provides the ",(0,r.kt)("inlineCode",{parentName:"li"},"as")," field to set the ",(0,r.kt)("a",{parentName:"li",href:"/docs/reference/expressions/constants#source"},(0,r.kt)("inlineCode",{parentName:"a"},"source"))," value used by the view")),(0,r.kt)("h2",{id:"listening-to-events"},"Listening to events"),(0,r.kt)("p",null,"The poll contracts emits ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapps/example/contract#events"},"events")," on poll addition/approval and when a response is submitted. When an event is emitted, the DApp notifies the user with a snack message and a notification appears in the events' panel."),(0,r.kt)("p",null,"Contract's binding offers methods to register event's handlers. An event handler is a function called when an event is emitted, and that takes this new event as argument. It takes a second optional argument that provides blockchain-related information:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"emitter contract address"),(0,r.kt)("li",{parentName:"ul"},"block hash"),(0,r.kt)("li",{parentName:"ul"},"operation hash"),(0,r.kt)("li",{parentName:"ul"},"operation timestamp"),(0,r.kt)("li",{parentName:"ul"},"event name")),(0,r.kt)("p",null,"Event handlers are registered in the ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect")," hook of constate ",(0,r.kt)("inlineCode",{parentName:"p"},"Events")," component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useEffect(() => {\n  const startListener = async () => {\n    contract.register_Response(async (e : Response, d ?: EventData) => {\n      setAlertMsg(make_response_msg(e))\n      setAlerOpen(true)\n      await loadResponses(e.poll_id.to_big_number().toNumber())\n      if (d) addEvent(d)\n    })\n    contract.register_NewPoll((np : NewPoll, d ?: EventData) => {\n      setAlertMsg(make_new_poll_msg(np))\n      setAlerOpen(true)\n      if (d) addEvent(d)\n    })\n    contract.register_ApprovePoll((ap : ApprovePoll, d ?: EventData) => {\n      setAlertMsg(make_poll_confirmed_msg(ap))\n      setAlerOpen(true)\n      if (d) addEvent(d)\n    })\n    await run_listener({\n      endpoint: endpoint,\n      verbose: false,\n      horizon: 0\n    })\n  };\n  startListener()\n}, [])\n")),(0,r.kt)("p",null,"Comments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"register_Response"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"register_NewPoll")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"register_Approve")," are binder's event handler registration methods"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"run_listener")," is the function to start the event listener process (provided by ",(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@completium/event-listener"},(0,r.kt)("inlineCode",{parentName:"a"},"@completium/event-listener"))," package)")))}u.isMDXComponent=!0}}]);