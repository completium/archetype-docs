"use strict";(self.webpackChunkarchetype_docs=self.webpackChunkarchetype_docs||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"v143","metadata":{"permalink":"/blog/v143","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-06-02-v1.4.3.md","source":"@site/blog/2023-06-02-v1.4.3.md","title":"Version 1.4.3","description":"We present version 1.4.3 of Archetype language.","date":"2023-06-02T00:00:00.000Z","formattedDate":"June 2, 2023","tags":[{"label":"version","permalink":"/blog/tags/version"}],"readingTime":1.095,"hasTruncateMarker":true,"authors":[{"name":"Benoit Rognier","title":"CEO Completium","url":"https://www.linkedin.com/in/benoitrognier/","imageURL":"/img/blog/br.jpeg","key":"br"},{"name":"Guillaume Duhamel","title":"CTO Completium","url":"https://www.linkedin.com/in/guillaumeduhamel/","imageURL":"/img/blog/gd.jpeg","key":"gd"}],"frontMatter":{"slug":"v143","title":"Version 1.4.3","authors":["br","gd"],"tags":["version"]},"nextItem":{"title":"Version 1.4.2","permalink":"/blog/v142"}},"content":"We present version [`1.4.3`](/docs/installation) of Archetype language.\\n\\n## Added\\n\\n### Functions\\n\\n[Functions](/docs/reference/declarations/function) can now have side effects on storage. For example, it is now valid to write:\\n\\n```archetype {5-7}\\narchetype function_side_effect\\n\\nvariable res : nat = 0\\n\\nfunction set_res(v : nat) {\\n  res := v\\n}\\n\\nentry exec(value : nat) { set_res(value) }\\n```\\n\\n\x3c!--truncate--\x3e\\n\\nThe `set_res` function above illustrates that:\\n* function can now have side effects (here on `res`)\\n* return value may now be omitted, the function may then be used as an instruction\\n\\n\\n### Native Michelson code\\n\\nIt is now possible to write native michelson code with the follwing elements:\\n* `michelson` [instruction](/docs/reference/instructions/sequence#michelson) and [expression](/docs/reference/expressions/builtins#michelson<R>({%20MICHELSON%20})%20[%20STACK%20])\\n* [`lambda_michelson`](/docs/reference/expressions/builtins#lambda_michelson<T,%20R>({%20MICHELSON%20})) expression\\n\\nFor example:\\n```archetype\\narchetype michelson_instruction\\n\\nentry exec (i : nat) {\\n  michelson {\\n    PUSH nat 0;\\n    COMPARE;\\n    NEQ;\\n    IF { PUSH string \\"NOT_ZERO\\"; FAILWITH } { PUSH nat 0 }\\n  }\\n}\\n```\\n\\n### Exponential builtin\\n\\nA builtin for exponential function [`exp_horner`](/docs/reference/expressions/builtins#exp_horner(v%20:%20rational,%20p%20:%20nat)) is now available. It is computed with the Horner method applied to the polynomial approwimation of the exponential function.\\n\\n## Changed\\n\\nLiterals for BLS curves types [`bls12_381_fr`](/docs/reference/types#bls12_381_fr) [`bls12_381_g1`](/docs/reference/types#bls12_381_g1) and [`bls12_381_g2`](/docs/reference/types#bls12_381_g2) are now suffixed by `fr` `g1` and `g2` respectively; moreover:\\n* `int`, `nat` and `bytes` literals cannot be used anymore as `bls12_381_fr` literals\\n* `bytes` literals cannot be used anymore as `bls12_381_g1` and `bls12_381_g2` literals"},{"id":"v142","metadata":{"permalink":"/blog/v142","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-05-03-v1.4.2.md","source":"@site/blog/2023-05-03-v1.4.2.md","title":"Version 1.4.2","description":"We present version 1.4.2 of Archetype language.","date":"2023-05-03T00:00:00.000Z","formattedDate":"May 3, 2023","tags":[{"label":"version","permalink":"/blog/tags/version"}],"readingTime":0.945,"hasTruncateMarker":true,"authors":[{"name":"Benoit Rognier","title":"CEO Completium","url":"https://www.linkedin.com/in/benoitrognier/","imageURL":"/img/blog/br.jpeg","key":"br"},{"name":"Guillaume Duhamel","title":"CTO Completium","url":"https://www.linkedin.com/in/guillaumeduhamel/","imageURL":"/img/blog/gd.jpeg","key":"gd"}],"frontMatter":{"slug":"v142","title":"Version 1.4.2","authors":["br","gd"],"tags":["version"]},"prevItem":{"title":"Version 1.4.3","permalink":"/blog/v143"},"nextItem":{"title":"TS Binding","permalink":"/blog/binding"}},"content":"We present version [`1.4.2`](/docs/installation) of Archetype language.\\n\\n## Added\\n\\n### Contract import\\n\\nIt is now possible to use types and entrypoints declared in another archetype contract with the [`import`](/docs/reference/declarations/external-contract) declaration.\\n\\nIt is also now possible to originate a contract from an Archetype source with [`create_contract`](/docs/reference/expressions/builtins#create_contract(handler,%20delegator,%20amount,%20init)) builtin.\\n\\n\x3c!--truncate--\x3e\\n\\nFor example, in order to import the `person` record from a contract, use the `import` declaration:\\n```archetype {3,7}\\narchetype anothercontract\\n\\nimport \\"somecontract.arl\\"\\n\\nvariable max_age : nat = 0\\n\\nentry register(p : somecontract::person) {\\n  max_age := max(max_age, p.age)\\n}\\n```\\n\\n### Global constants\\n\\nIt is now possible use global constants with [`global_constant`](/docs/reference/expressions/builtins#global_constant<T>(hash)) builtin.\\n\\n### Initial support for Tickets\\n\\nAn initial working version of FA 2.1 with tickets is now available [here](https://github.com/completium/archetype-fa2.1).\\n\\n:::info\\nWork in progress. Use with caution.\\n:::\\n\\n### Improved Michelson generation\\n\\nMichelson output has been upgraded.\\n\\n### `rational` API\\n\\nThe [`rational`](/docs/reference/types#rational) type API has been enriched with the following builtins:\\n* [`simplify_rational`](/docs/reference/expressions/builtins#simplify_rational(r%20:%20rational))\\n* [`get_numerator`](/docs/reference/expressions/builtins#get_numerator(r%20:%20rational))\\n* [`get_denominator`](/docs/reference/expressions/builtins#get_denominator(r%20:%20rational))\\n\\n### `list` API\\n\\nThe [`list`](/docs/reference/types#list<T>) type API has been enriched with the following builtins:\\n* [`head`](/docs/reference/expressions/builtins#head(l%20:%20list<T>,%20n%20:%20nat))\\n* [`tail`](/docs/reference/expressions/builtins#tail(l%20:%20list<T>,%20n%20:%20nat))\\n\\n## Removed\\n\\n* the formal verification language and the why3 generation have been removed\\n* `tx_rollup_l2_address` type"},{"id":"binding","metadata":{"permalink":"/blog/binding","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-01-02-binding.md","source":"@site/blog/2023-01-02-binding.md","title":"TS Binding","description":"We are glad to present the new contract binding generation in TypeScript language. We consider this as a major improvement in the way we are working with Archetype and Michelson contracts.","date":"2023-01-02T00:00:00.000Z","formattedDate":"January 2, 2023","tags":[{"label":"binding","permalink":"/blog/tags/binding"}],"readingTime":2.2,"hasTruncateMarker":true,"authors":[{"name":"Benoit Rognier","title":"CEO Completium","url":"https://www.linkedin.com/in/benoitrognier/","imageURL":"/img/blog/br.jpeg","key":"br"},{"name":"Guillaume Duhamel","title":"CTO Completium","url":"https://www.linkedin.com/in/guillaumeduhamel/","imageURL":"/img/blog/gd.jpeg","key":"gd"}],"frontMatter":{"slug":"binding","title":"TS Binding","authors":["br","gd"],"tags":["binding"]},"prevItem":{"title":"Version 1.4.2","permalink":"/blog/v142"},"nextItem":{"title":"Version 1.3.2","permalink":"/blog/v132"}},"content":"We are glad to present the new contract binding generation in TypeScript language. We consider this as a *major improvement* in the way we are working with Archetype and Michelson contracts.\\n\\n[Completium CLI](/docs/cli/introduction) now provides a simple command to generate the TypeScript binding:\\n\\n```completium\\ncompletium-cli generate binding-ts mycontract.arl > mycontract.ts\\n```\\n\x3c!--truncate--\x3e\\n\\nContract binding refers here to a generated interface to interact with a contract (mainly call its entry points and retrieve data from its storage); this interface is expressed in a native language with native types (here TypeScript).\\n\\nThe main benefits are that it removes the burden of manipulating complex JSON structures of Micheline values; it also integrates well with IDE and, in the case of TypeScript, provides *strong type checking* at compilation time, rather than at execution time.\\n\\nAs a consequence, it drastically reduces the effort to write [Tests](/docs/tests/introduction) and [DApps](/docs/dapps/introduction).\\n\\n\\n## First example\\n\\nConsider the following Archetype contract:\\n\\n```archetype\\narchetype binding_example\\n\\nvariable msg : string = \\"Hello Binding World!\\"\\n\\nentry exec(\\n  l : list<int>,\\n  r : rational,\\n  o : or<nat, string>) {\\n /* \u2026 do something \u2026 */\\n}\\n```\\n\\nThe following code illustrates how to interact in TypeScript with this contract:\\n\\n```ts\\nimport { bind_example } from \'./binding/bind_example\'\\nimport { get_account } from \'@completium/experiment-ts\'\\nimport { Int, Or, Rational } from \'@completium/archetype-ts-types\'\\n\\nconst alice = get_account(\u2018alice\u2019)\u2019\\n\\nawait bind_example.deploy({ as : alice })\\n\\nconst msg = await bind_example.get_msg()\\n\\nassert(msg == \\"Hello Binding World!\\")\\n\\nawait bind_example.exec(\\n  [new Int(4), new Int(-6)],\\n  new Rational(0.2),\\n  Or.Right<Nat, string>(\\"Hello exec!\\"),\\n  { as : alice }\\n)\\n```\\n\\nNote that the `msg` storage element is retrieved with the dedicated `get_msg` method of automatically generated binding object `bind_example`.\\n\\nThe `exec` entry point is called with the method with same name. Its signature is fully specified with native TS types:\\n\\n```ts\\n(method) bind_example.exec(l: Int[], r: Rational, o: Or<Nat, string>, p : Optional<Parameters>): Promise<CallResult>\\n```\\n\\nThe mapping from Archetype/Michelson types to TypeScript types is presented [here](/docs/tests/binding#type-bindings).\\n\\n## Test framework\\n\\nThe Archetype test framework has been totally redesigned to integrate the binding feature seamlessly.\\n\\nThe commands below creates an Node.js project in the `myproject` directory and installs the required packages.\\n\\n```completium\\n$ completium-cli create project myproject\\n$ cd ./myproject\\n$ npm install\\n```\\n\\nThe command below generates the bindings for contracts found in `./contracts` directory:\\n```completium\\n$ npm run gen-binding\\n```\\n\\nThe test framework is presented in details [here](/docs/tests/framework).\\n\\n## DApp\\n\\nBinding is also available to integrate smart contracts in Dapps.\\n\\nThe command to generate the binding for integration in a DApp:\\n\\n```completium\\ncompletium-cli generate binding-dapp-ts mycontract.arl > mycontract.ts\\n```\\n\\nGeneral considerations about DApp are presented [here](/docs/dapps/introduction). An fully functional DApp example with source code is presented [here](/docs/dapps/example/)."},{"id":"v132","metadata":{"permalink":"/blog/v132","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-07-07-v1.3.2.md","source":"@site/blog/2022-07-07-v1.3.2.md","title":"Version 1.3.2","description":"We present version 1.3.2 of Archetype language.","date":"2022-07-07T00:00:00.000Z","formattedDate":"July 7, 2022","tags":[{"label":"version","permalink":"/blog/tags/version"}],"readingTime":1.28,"hasTruncateMarker":true,"authors":[{"name":"Benoit Rognier","title":"CEO Completium","url":"https://www.linkedin.com/in/benoitrognier/","imageURL":"/img/blog/br.jpeg","key":"br"},{"name":"Guillaume Duhamel","title":"CTO Completium","url":"https://www.linkedin.com/in/guillaumeduhamel/","imageURL":"/img/blog/gd.jpeg","key":"gd"}],"frontMatter":{"slug":"v132","title":"Version 1.3.2","authors":["br","gd"],"tags":["version"]},"prevItem":{"title":"TS Binding","permalink":"/blog/binding"},"nextItem":{"title":"Version 1.3.1","permalink":"/blog/v131"}},"content":"import { Grid } from \'@mui/material\';\\nimport ThemedDivider from \'@site/src/components/Divider.js\'\\n\\nimport { renamings } from \'./renamings.js\';\\nimport Api from \'@site/src/components/Api.js\';\\n\\nWe present version [`1.3.2`](/docs/installation) of Archetype language.\\n\\n## Added\\n\\n<Grid container container\\n  direction=\\"row\\"\\n  justifyContent=\\"center\\"\\n  alignItems=\\"center\\">\\n<Grid xs={12} sm={12} md={3} >\\n\\n#### `update` for `set`\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\n[`update`](/docs/reference/instructions/containers#supdatee-b) instruction adds or removes an element in a [`set`](/docs/reference/types#set<T>).\\n</Grid>\\n</Grid>\\n\\n<ThemedDivider />\\n\\n\x3c!--truncate--\x3e\\n\\n<Grid container container\\n  direction=\\"row\\"\\n  justifyContent=\\"center\\"\\n  alignItems=\\"center\\" style={{ marginTop: \'12px\'}}>\\n<Grid xs={12} sm={12} md={3}>\\n\\n#### `asset_container`\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\n[`asset_container<A>`](/docs/reference/types#asset_container<A>) type is evaluated to container type of asset collection `A`.\\n\\n</Grid>\\n</Grid>\\n\\n<ThemedDivider />\\n\\n<Grid container container\\n  direction=\\"row\\"\\n  justifyContent=\\"center\\"\\n  alignItems=\\"center\\" style={{ marginTop: \'12px\'}}>\\n<Grid xs={12} sm={12} md={3}>\\n\\n#### `to_container`\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\n[`to_container`](/docs/reference/expressions/asset#ato_container) builtin returns the container object of an asset collection.\\n\\n</Grid>\\n</Grid>\\n\\n<ThemedDivider />\\n\\n<Grid container container\\n  direction=\\"row\\"\\n  justifyContent=\\"center\\"\\n  alignItems=\\"center\\" style={{ marginTop: \'12px\'}}>\\n<Grid xs={12} sm={12} md={3}>\\n\\n#### `put_remove`\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\n[`put_remove`](/docs/reference/instructions/asset#aput_removek-o) asset method puts or removes an asset in a collection.\\n\\n</Grid>\\n</Grid>\\n\\n<ThemedDivider />\\n\\n<Grid container container\\n  direction=\\"row\\"\\n  justifyContent=\\"center\\"\\n  alignItems=\\"center\\" style={{ marginTop: \'12px\'}}>\\n<Grid xs={12} sm={12} md={3}>\\n\\n#### `make_asset`\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\n[`make_asset`](/docs/reference/expressions/builtins#make_asset(k%20:%20asset_key<A>,%20v%20:%20asset_value<A>)) builin creates an asset from key and value.\\n\\n</Grid>\\n</Grid>\\n\\n<ThemedDivider />\\n\\n<Grid container container\\n  direction=\\"row\\"\\n  justifyContent=\\"center\\"\\n  alignItems=\\"center\\" style={{ marginTop: \'12px\'}}>\\n<Grid xs={12} sm={12} md={3}>\\n\\n#### `create_contract`\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\n[`create_contract`](/docs/reference/expressions/builtins#create_contract(path,%20del,%20amount,%20storage)) creates the operation to originate a contract.\\n\\n</Grid>\\n</Grid>\\n\\n## Breaking Change\\n\\nConstant `caller` (and any other [constant](/docs/reference/expressions/constants)) are no longer available as initial storage value.\\n\\nIt is recommended to use [constant parameters](http://localhost:3000/docs/reference/declarations/contract#constant) instead."},{"id":"v131","metadata":{"permalink":"/blog/v131","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-24-v1.3.1.md","source":"@site/blog/2022-06-24-v1.3.1.md","title":"Version 1.3.1","description":"We present version 1.3.1 of Archetype language.","date":"2022-06-24T00:00:00.000Z","formattedDate":"June 24, 2022","tags":[{"label":"version","permalink":"/blog/tags/version"}],"readingTime":0.895,"hasTruncateMarker":true,"authors":[{"name":"Benoit Rognier","title":"CEO Completium","url":"https://www.linkedin.com/in/benoitrognier/","imageURL":"/img/blog/br.jpeg","key":"br"},{"name":"Guillaume Duhamel","title":"CTO Completium","url":"https://www.linkedin.com/in/guillaumeduhamel/","imageURL":"/img/blog/gd.jpeg","key":"gd"}],"frontMatter":{"slug":"v131","title":"Version 1.3.1","authors":["br","gd"],"tags":["version"]},"prevItem":{"title":"Version 1.3.2","permalink":"/blog/v132"},"nextItem":{"title":"Version 1.3.0","permalink":"/blog/v13"}},"content":"import { Grid } from \'@mui/material\';\\nimport ThemedDivider from \'@site/src/components/Divider.js\'\\n\\nimport { renamings } from \'./renamings.js\';\\nimport Api from \'@site/src/components/Api.js\';\\n\\nWe present version [`1.3.1`](/docs/installation) of Archetype language.\\n\\n## Added\\n\\n<Grid container container\\n  direction=\\"row\\"\\n  justifyContent=\\"center\\"\\n  alignItems=\\"center\\">\\n<Grid xs={12} sm={12} md={3} >\\n\\n#### Constant section\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\nThis new entrypoint\'s section [`constant`](/docs/reference/declarations/entrypoint#constant) allows the declaration of local constants to be used in other sections.\\n\\n</Grid>\\n</Grid>\\n\\n<ThemedDivider />\\n\\n\x3c!--truncate--\x3e\\n\\n<Grid container container\\n  direction=\\"row\\"\\n  justifyContent=\\"center\\"\\n  alignItems=\\"center\\" style={{ marginTop: \'12px\'}}>\\n<Grid xs={12} sm={12} md={3}>\\n\\n#### `const` parameter\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\nA contract [parameter](/docs/reference/declarations/contract#parameters) can new be declared [`const`](/docs/reference/declarations/contract#constant). Its occurences are replaced by the value provided at deployment.\\n\\n</Grid>\\n</Grid>\\n\\n<ThemedDivider />\\n\\n<Grid container container\\n  direction=\\"row\\"\\n  justifyContent=\\"center\\"\\n  alignItems=\\"center\\" style={{ marginTop: \'12px\'}}>\\n<Grid xs={12} sm={12} md={3}>\\n\\n#### Asset\'s `update` instruction\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\nAn asset field typed [map](/docs/language-basics/container#map) or [set](/docs/language-basics/container#set), can now be updated with [update](/docs/reference/instructions/asset#aupdatek--u-) (or [`add_update`](/docs/reference/instructions/asset#aadd_updatek--u-)) instructions `+=` `-=` `:=` update instructions. See [details](/docs/reference/instructions/asset#basic-containers).\\n\\n</Grid>\\n</Grid>\\n\\n### Changed\\n\\nFollowing new Jakarta protocol, the return type of builtin [`verify_sapling_update`](/docs/reference/expressions/builtins/#sapling_verify_update(s,%20t)) is now `option<bytes * int * sapling_state(n)>`"},{"id":"v13","metadata":{"permalink":"/blog/v13","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-16-v1.3.0.md","source":"@site/blog/2022-06-16-v1.3.0.md","title":"Version 1.3.0","description":"We present new version 1.3.0 of Archetype language.","date":"2022-06-16T00:00:00.000Z","formattedDate":"June 16, 2022","tags":[{"label":"version","permalink":"/blog/tags/version"}],"readingTime":1.935,"hasTruncateMarker":true,"authors":[{"name":"Benoit Rognier","title":"CEO Completium","url":"https://www.linkedin.com/in/benoitrognier/","imageURL":"/img/blog/br.jpeg","key":"br"},{"name":"Guillaume Duhamel","title":"CTO Completium","url":"https://www.linkedin.com/in/guillaumeduhamel/","imageURL":"/img/blog/gd.jpeg","key":"gd"}],"frontMatter":{"slug":"v13","title":"Version 1.3.0","authors":["br","gd"],"tags":["version"]},"prevItem":{"title":"Version 1.3.1","permalink":"/blog/v131"},"nextItem":{"title":"Shortcut evaluation","permalink":"/blog/shortcut-evaluation"}},"content":"import { Grid } from \'@mui/material\';\\nimport ThemedDivider from \'@site/src/components/Divider.js\'\\n\\nimport { renamings } from \'./renamings.js\';\\nimport Api from \'@site/src/components/Api.js\';\\n\\n\\nWe present new version [`1.3.0`](/docs/installation) of Archetype language.\\n\\n:::caution\\nThis version introduces breaking changes in the [naming](/blog/v13#renamings) of some builtins.\\n:::\\n\x3c!--truncate--\x3e\\n\\n### Added\\n\\n<Grid container>\\n<Grid xs={12} sm={12} md={3}>\\n\\n#### Asset access\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\nPresentation in this blog [entry](/blog/asset-access).\\n\\n</Grid>\\n</Grid>\\n\\n<ThemedDivider />\\n\\n<Grid container style={{ marginTop: \'18px\' }}>\\n<Grid xs={12} sm={12} md={3}>\\n\\n#### `otherwise`\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\n`otherwise` command is now available in *all* [sections](/docs/reference/declarations/entrypoint#sections) to define a specific error message.\\n\\nFor example:\\n```archetype\\nentry set_owner_candidate(oc : address) {\\n  called by owner otherwise \\"CALLER_NOT_OWNER\\"\\n  /* ... other sections ... */\\n}\\n```\\n\\n</Grid>\\n</Grid>\\n\\n<ThemedDivider />\\n\\n<Grid container style={{ marginTop: \'18px\' }}>\\n<Grid xs={12} sm={12} md={3}>\\n\\n#### `/` `%`\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\nIt is now possible to divide and apply modulo between [`tez`](/docs/reference/types#tez) values:\\n```archetype\\nconst a : rational = 5tz / 3tz;\\nconst b : tez = 5tz % 2tz\\n```\\n\\n</Grid>\\n</Grid>\\n\\n### Changed\\n\\n<Grid container style={{ marginTop: \'18px\' }}>\\n<Grid xs={12} sm={12} md={3}>\\n\\n#### `and` `or`\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\nPresentation in this blog [entry](/blog/shortcut-evaluation).\\n\\n</Grid>\\n</Grid>\\n\\n<ThemedDivider />\\n\\n<Grid container style={{ marginTop: \'18px\' }}>\\n<Grid xs={12} sm={12} md={3}>\\n\\n#### `add_update`\\n\\n</Grid>\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\nWhen [`add_update`](/docs/reference/instructions/asset#aadd_updatek--u-) is used to update all asset fields it is now optimized and compiled in Michelson as a [`UPDATE`](https://tezos.gitlab.io/michelson-reference/#instr-UPDATE) instruction.\\n\\n</Grid>\\n</Grid>\\n\\n<ThemedDivider />\\n\\n<Grid container style={{ marginTop: \'18px\' }}>\\n<Grid xs={12} sm={12} md={3}>\\n\\n#### `reverse`\\n\\n</Grid>\\n\\n\\n<Grid xs={12} sm={12} md={9}>\\n\\n[`reverse`](/docs/reference/expressions/builtins#reverse(l%20:%20list<T>)) \'s Michelson code is now optimized with:\\n```js\\nNIL string ;\\nPUSH (list string) {\\"i0\\"; \\"i1\\"; \\"i2\\"};\\nITER { CONS };\\n```\\n\\n</Grid>\\n</Grid>\\n\\n## Fixed\\n\\nMultiplication between [`rational`](/docs/reference/types#rational) and big amount of [`tez`](/docs/reference/types#tez) could fail with an overflow; the following now works:\\n```archetype\\nconst a = (2 / 3) * 9223372036854775807utz;\\n```\\n\\n## Renamings\\n\\nSome builtins\' have been renamed (for ex. snake-cased) to be more consistent, and error values have been capitalised.\\n\\nBelow is the list of renamings. *New* names are on the left, *previous* on the right:\\n\\n<Api title=\\"Sections\\" data={renamings.sections} xs={4}/>\\n<br/>\\n\\n<Api title=\\"Types\\" data={renamings.types} xs={4}/>\\n<br/>\\n\\n<Api title=\\"Instructions\\" data={renamings.instructions} xs={4}/>\\n<br/>\\n\\n<Api title=\\"Constants\\" data={renamings.constants} xs={4}/>\\n<br/>\\n\\n<Api title=\\"Builtins\\" data={renamings.builtins} xs={4}/>\\n<br/>\\n\\n<Api title=\\"Assets\\" data={renamings.assets} xs={4}/>\\n<br/>\\n\\n<Api title=\\"Error messages\\" data={renamings.errors} xs={5}/>\\n<br/>"},{"id":"shortcut-evaluation","metadata":{"permalink":"/blog/shortcut-evaluation","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-04-shortcut-evaluation.md","source":"@site/blog/2022-06-04-shortcut-evaluation.md","title":"Shortcut evaluation","description":"We present a change in version 1.3.0 of the evaluation process of boolean operators and and or in test expression of the if instruction and expression.","date":"2022-06-04T00:00:00.000Z","formattedDate":"June 4, 2022","tags":[{"label":"and","permalink":"/blog/tags/and"},{"label":"or","permalink":"/blog/tags/or"},{"label":"if","permalink":"/blog/tags/if"},{"label":"new feature","permalink":"/blog/tags/new-feature"}],"readingTime":0.645,"hasTruncateMarker":true,"authors":[{"name":"Guillaume Duhamel","title":"CTO Completium","url":"https://www.linkedin.com/in/guillaumeduhamel/","imageURL":"/img/blog/gd.jpeg","key":"gd"}],"frontMatter":{"slug":"shortcut-evaluation","title":"Shortcut evaluation","authors":["gd"],"tags":["and","or","if","new feature"]},"prevItem":{"title":"Version 1.3.0","permalink":"/blog/v13"},"nextItem":{"title":"Accessing assets","permalink":"/blog/asset-access"}},"content":"We present a change in version `1.3.0` of the evaluation process of boolean operators [`and`](/docs/reference/expressions/operators/arithmetic#a-and-b) and [`or`](/docs/reference/expressions/operators/arithmetic#a-or-b) in test expression of the [`if`](/docs/reference/instructions/control#if) instruction and expression.\\n\\nConsider the following `if` instruction:\\n```archetype\\nif a and b then\\n /* */\\nend\\n```\\n\x3c!--truncate--\x3e\\n\\nBefore version `1.3.0`, both expressions `a` and `b` were evaluated, meaning that if `b` is a [failing](/docs/reference/instructions/divergent#faile) expression, the evaluation fails even if `a` is false.\\n\\nSince version `1.3.0`, `a and b` is replaced by [conditional](/docs/reference/expressions/controls#if) expression:\\n```archetype\\nif a then b else false\\n```\\n\\nEquivalently, expression `a or b` is replaced by:\\n```archetype\\nif a then true else b\\n```\\n\\nSuch that expression `b` is evaluated only when necessary.\\n\\n### Greedy evaluation\\n\\nThe previous *greedy evaluation*  mechanism is still  available with the [`greedy_and`](/docs/reference/expressions/builtins#greedy_and(a%20:%20bool,%20b%20:%20bool)) and [`greedy_or`](/docs/reference/expressions/builtins#greedy_or(a%20:%20bool,%20b%20:%20bool)) builtins."},{"id":"asset-access","metadata":{"permalink":"/blog/asset-access","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-05-25-asset-access.md","source":"@site/blog/2022-05-25-asset-access.md","title":"Accessing assets","description":"We present an improvement in the way assets data are accessed in version 1.3.0.","date":"2022-05-25T00:00:00.000Z","formattedDate":"May 25, 2022","tags":[{"label":"asset","permalink":"/blog/tags/asset"},{"label":"new feature","permalink":"/blog/tags/new-feature"}],"readingTime":2.105,"hasTruncateMarker":true,"authors":[{"name":"Guillaume Duhamel","title":"CTO Completium","url":"https://www.linkedin.com/in/guillaumeduhamel/","imageURL":"/img/blog/gd.jpeg","key":"gd"}],"frontMatter":{"slug":"asset-access","title":"Accessing assets","authors":["gd"],"tags":["asset","new feature"]},"prevItem":{"title":"Shortcut evaluation","permalink":"/blog/shortcut-evaluation"},"nextItem":{"title":"Iterable big map","permalink":"/blog/iterable-big-map"}},"content":"We present an improvement in the way [assets](/docs/asset) data are accessed in version [`1.3.0`](/docs/installation).\\n\\n### Problems\\n\\nUntil this version, the only way to access an asset data was the field accessor operator of the form [`A[k].f`](/docs/reference/expressions/asset#ak--asset_keyaf), where `A` is the asset collection, `k` the asset key and `f` the asset field.\\n\\n\x3c!--truncate--\x3e\\n\\nThe first problem was the access to multiple fields; for example, consider the following asset declaration:\\n```archetype\\nasset vehicle {\\n  vin          : string;\\n  manufacturer : string;\\n  year         : nat;\\n  nbdoors      : nat\\n}\\n```\\n\\nAccessing several fields would end up accessing the underlying map several times:\\n\\n```archetype\\nconst k = \\"1G1AF1F57A7192174\\";\\nconst m = vehicle[k].manufacturer;\\nconst y = vehicle[k].year;\\nconst n = vehicle[k].nbdoors\\n```\\n\\nHere the test and fail instructions are repeated three times.\\n\\nThe second problem is the *implicit* fail of the `[]` operator in situations where it is implicit that the asset exists.\\n\\nIt is typically the case when the asset field is accessed in the `true` branch of a [`contains`](/docs/reference/expressions/asset#acontainsk--asset_keya) test:\\n\\n```archetype\\nconst k = \\"1G1AF1F57A7192174\\";\\nif vehicle.contains(k) then begin\\n  const m = vehicle[k].manufacturer;\\n  /* ... do something with m ... */\\nend\\n```\\n\\nThe `[].` operator treats the case when asset is not found while it has already been tested.\\n\\n### Solution\\n\\nVersion [`1.3.0`](/docs/installation) provides new operator [`[]`](/docs/reference/expressions/asset#ak--asset_keya) that returns an [`option`](/docs/reference/types#option<T>) of [asset value](/docs/reference/types#asset_value<A>).\\n\\nCombined with the new [`?=`](/docs/reference/instructions/localvariable#-) declaration instruction, the proper way to retrieve all vehicle data presented above, is now as follows:\\n\\n```archetype\\nconst v ?= vehicle[\\"1G1AF1F57A7192174\\"];\\nconst m = v.manufacturer;\\nconst y = v.year;\\nconst n = v.nbdoors\\n```\\n\\nThe declaration of `v` fails with `\\"OPTION_IS_NONE\\"` if vehicle is not found. It is possible to specify an error message with:\\n```archetype\\nconst v ?= vehicle[\\"1G1AF1F57A7192174\\"] : \\"VEHICLE_NOT_FOUND\\"\\n```\\n\\n### Single field access\\n\\nSituations where a single asset field is accessed is very common though.\\n\\nVersion [`1.3.0`](/docs/installation) provides a new operator [`[]?.`](/docs/reference/expressions/asset#ak--asset_keyaf) that returns an [`option`](/docs/reference/types#option<T>) of field value, so that the non existence case may be *explicitely* treated.\\n\\nFor example, the following retrieves an option of [`nat`](/docs/reference/types#nat) to treat more specifically the case when the asset is not found:\\n```archetype\\nconst opt_n = vehicle[\\"1G1AF1F57A7192174\\"]?.nbdoors;\\n/* treat case when on is none ... */\\n```\\n\\n`opt_n` is typed `option<nat>` and is `none` if the vehicle is not found.\\n\\nOperator [`[].`](/docs/reference/expressions/asset#ak--asset_keyaf) is still available: it fails when asset is not found, which is syntactically convenient when there is an *implicit* existence invariant on the asset:\\n```archetype\\nconst n = vehicle[\\"1G1AF1F57A7192174\\"].nbdoors;\\n```\\n\\nIt implictely fails with `(\\"ASSET_NOT_FOUND\\", \\"vehicle\\")` if `\\"1G1AF1F57A7192174\\"` is not found."},{"id":"iterable-big-map","metadata":{"permalink":"/blog/iterable-big-map","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-04-24-iterable-big-map.md","source":"@site/blog/2022-04-24-iterable-big-map.md","title":"Iterable big map","description":"We present a new type of map called iterablebigmap, which has the scalability property of a bigmap, and which can be iterated like a basic map.","date":"2022-04-24T00:00:00.000Z","formattedDate":"April 24, 2022","tags":[{"label":"big map","permalink":"/blog/tags/big-map"},{"label":"new feature","permalink":"/blog/tags/new-feature"}],"readingTime":2.875,"hasTruncateMarker":true,"authors":[{"name":"Benoit Rognier","title":"CEO Completium","url":"https://www.linkedin.com/in/benoitrognier/","imageURL":"/img/blog/br.jpeg","key":"br"}],"frontMatter":{"slug":"iterable-big-map","title":"Iterable big map","authors":["br"],"tags":["big map","new feature"]},"prevItem":{"title":"Accessing assets","permalink":"/blog/asset-access"},"nextItem":{"title":"Events","permalink":"/blog/events"}},"content":"import useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport ThemedImage from \'@theme/ThemedImage\';\\n\\nWe present a new type of map called [`iterable_big_map`](/docs/reference/types#iterable_big_map<K,%20V>), which has the scalability property of a [`big_map`](/docs/reference/types#big_map<K,%20V>), and which can be [iterated](/docs/reference/instructions/containers#map) like a basic [`map`](/docs/reference/types#map<K,%20V>).\\n\\nThis feature was suggested by [Nomadic Labs](https://www.nomadic-labs.com/). Thank you to [Lucas Feli](https://www.linkedin.com/in/lucas-felli-815653111/) and [Charles Delhinger](https://www.linkedin.com/in/charles-dehlinger-a34699166/) for the algorithm.\\n\\n## Example\\n\\nConsider the following declaration of an iterable big map between a `nat` key and a `bytes` value:\\n```archetype\\nvariable ibm : iterable_big_map<nat, bytes> = []\\n```\\n\x3c!--truncate--\x3e\\n\\nWhile `ibm` has the scalability of a big map (in terms of number of entries), it can also be iterated with the `for` control instruction:\\n```archetype\\nfor (k,v) in ibm do\\n  /* k is the key, v is the value */\\ndone\\n```\\n\\n:::info\\nNote that:\\n* the natural order of the key values is not garanteed (unlike basic [`map`](/docs/reference/types#map<K,%20V>))\\n* the cost of operations increases compared to a [`big_map`](/docs/reference/types#big_map<K,%20V>)\\n:::\\n\\nAn Archetype [asset](/docs/asset) may now be compiled as an iterable big map; it then benefits from the *whole* asset [API](/docs/asset#api). For example:\\n```archetype\\nasset car to iterable_big_map {\\n  vin       : string;\\n  nbdoors   : nat;\\n  nbrepairs : nat;\\n  owner     : address;\\n}\\n```\\n\\n## Principle\\n\\nSince it is always possible to iterate from `1` to `n`, the idea is to create a big map that associates the iteration integer value to the map\'s key value. It is also necessary to associate the map key back to this iteration integer (see *remove* operation below).\\n\\nThe following example illustrates the design of two big maps called *Keys* and *Values* derived from the original map:\\n<center>\\n<ThemedImage style={{ width: \'80%\' }}\\n  alt=\\"IBM1\\"\\n  sources={{\\n    light: useBaseUrl(\'/img/blog/ibm1-light.svg\'),\\n    dark: useBaseUrl(\'/img/blog/ibm1-dark.svg\'),\\n  }}\\n/>\\n</center>\\n\\n* *Keys* associates the iteration integer with the map key\\n* *Values* is the original map where the value is augmented with the iteration integer\\n\\n### Add\\n\\nThe *add* operation consists in:\\n* associating the next iteration value (`Size + 1`) with the new key in the *Keys* map\\n* associating the new key to the pair of next iteration value and new value in the *Values* map\\n* incrementing the *Size* value\\n\\nThe operation is illustrated below with the addition of the key `131` with value `e5`:\\n<center>\\n<ThemedImage style={{ width: \'80%\' }}\\n  alt=\\"IBM1\\"\\n  sources={{\\n    light: useBaseUrl(\'/img/blog/ibm2-light.svg\'),\\n    dark: useBaseUrl(\'/img/blog/ibm2-dark.svg\'),\\n  }}\\n/>\\n</center>\\n\\n### Update\\n\\nThe *update* operation is straightforward and consists in updating the *Values* map with the new value.\\n\\n### Remove\\n\\nThe *remove* operation is a step-wise process:\\n- the iteration index of the removed key is retrieved from the *Values* map and used to remove the entry in the *Keys* map\\n- the entry is then removed from the *Values* map\\n\\nAt this stage, the iteration values are not consistent since one iteration value has been removed.\\n\\nIt is then necessary to associate the last added element with the removed iteration integer by:\\n- removing the last iteration integer and associate back the removed iteration integer with the last added key in the *Keys* mpa\\n- updating the iteration integer of last added key in the *Values* map\\n\\nThe process is illustrated below with the removal of the entry `29` (associated with iteration value `2`):\\n<center>\\n<ThemedImage style={{ width: \'80%\' }}\\n  alt=\\"IBM1\\"\\n  sources={{\\n    light: useBaseUrl(\'/img/blog/ibm3-light.svg\'),\\n    dark: useBaseUrl(\'/img/blog/ibm3-dark.svg\'),\\n  }}\\n/>\\n</center>\\n\\n## Implementation\\n\\nAn iterable big map is implemented as a triplet of two big maps (*Keys* and *Values*) and one *Size* integer.\\n\\nThe screenshot below of [Better Call Dev](https://better-call.dev/) shows the resulting triplet:\\n\\n![ibm4](/img/blog/ibm4.png)"},{"id":"events","metadata":{"permalink":"/blog/events","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-03-21-events.md","source":"@site/blog/2022-03-21-events.md","title":"Events","description":"Edit : from version 1.3.5, the event sink mechansim is now replaced by native protocol\'s events from Kathmandu.","date":"2022-03-21T00:00:00.000Z","formattedDate":"March 21, 2022","tags":[{"label":"events","permalink":"/blog/tags/events"},{"label":"new feature","permalink":"/blog/tags/new-feature"}],"readingTime":2.385,"hasTruncateMarker":true,"authors":[{"name":"Benoit Rognier","title":"CEO Completium","url":"https://www.linkedin.com/in/benoitrognier/","imageURL":"/img/blog/br.jpeg","key":"br"}],"frontMatter":{"slug":"events","title":"Events","authors":["br"],"tags":["events","new feature"]},"prevItem":{"title":"Iterable big map","permalink":"/blog/iterable-big-map"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":":::info\\nEdit : from version `1.3.5`, the event sink mechansim is now replaced by native protocol\'s [events](https://tezos.gitlab.io/active/event.html) from [Kathmandu](https://tezos.gitlab.io/protocols/014_kathmandu.html).\\n:::\\n\\nWe present the new instruction `emit` to emit an event, in a similar an event is emitted in languages like solidity.\\n\\nThis feature was suggested by [Nomadic Labs](https://www.nomadic-labs.com/).\\n\\nAn event is declared with the `event` keyword, similarly to a record:\\n```archetype\\nevent HighestBidIncreased {\\n  bidder : address;\\n  amount : tez\\n}\\n```\\n\x3c!--truncate--\x3e\\n\\nThe `emit` instruction is then used in an entrypoint as illustrated below:\\n```archetype\\nentry bid() {\\n  /* ... */\\n  if transferred > highestbid then begin\\n    highestbid := transferred;\\n    emit<HighestBidIncreased>({ source; transferred })\\n  end\\n}\\n```\\n\\n### <s>Event sink</s> <i>deprecated</i>\\n\\nThe emition of an event generates a call to a contract called *event sink*. This contract provides a single entrypoint named *event* which takes an argument typed [`bytes`](/docs/reference/types#bytes).\\n\\nThe code of the event sink contract is then:\\n```archetype\\narchetype event_sink\\n\\nentry %event(arg : bytes) {}\\n```\\n\\nThe event sink is deployed at the address [`KT1AHVF5m8XaWPQCGgfAsZ9eSJJZ7WVGV2hE`](https://better-call.dev/ithacanet/KT1AHVF5m8XaWPQCGgfAsZ9eSJJZ7WVGV2hE/operations) on the mainnet, and at [`KT1ReVgfaUqHzWWiNRfPXQxf7TaBLVbxrztw`](https://better-call.dev/ithacanet/KT1ReVgfaUqHzWWiNRfPXQxf7TaBLVbxrztw/operations)on Ithacanet.\\n\\n### Event\\n\\nThe `emit` instruction builds the event argument as a triplet of:\\n* the event name\\n* the event annotated Michelson type\\n* packed value of the event data\\n\\nIn the example of the *HighestBidIncreased* presented above, the following `emit` instruction:\\n```archetype\\nemit<HighestBidIncreased>({ source; transferred })\\n```\\n\\nis equivalent to:\\n```archetype\\nconst e = pack((\\n  \\"HighestBidIncreased\\",\\n  \\"pair (address %bidder) (tez %amount)\\",\\n  pack({\\n    bidder = source;\\n    amount = transferred\\n  })\\n});\\nconst event_sink = KT1AHVF5m8XaWPQCGgfAsZ9eSJJZ7WVGV2hE;\\ntransfer 0tz to event_sink call event<bytes>(e)\\n```\\n\\n### Retrieve events\\n\\nA Typescript library, called the [*crank*](https://www.npmjs.com/package/@completium/event-well-crank), is available to retrieve event data from a DApp.\\n\\nThe *crank* receives events from contracts and executes event handler functions.\\n\\nFor example, the `handleHBI` function below is executed when a `HighestBidIncreased` event is emitted by the contract:\\n\\n```js\\nimport { startCrank } from \'@completium/event-well-crank\'\\nimport {\\n  HighestBidIncreased,\\n  register_HighestBidIncreased } from \'./bid-bindings.ts\'\\n\\nconst contract = \\"KT1...\\" // address of the emitter contract\\n\\nconst handleHBI = (hbi : HighestBidIncreased) => {\\n  // ...\\n  console.log(`${hbi.bidder} is now the highest bid bidder.`)\\n}\\n\\n// register Handler\\nregister_HighestBidIncreased(contract, handleHBI);\\n\\n// Start crank\\nawait startCrank();\\n```\\nThe HighestBidIncreased type and register_HighestBidIncreased function are bindings code generated by completium CLI:\\n\\n```\\n$ completium-cli generate bindings-ts bid.arl > bid-bindings.ts\\n```\\n\\n### DApp example\\n\\nThe *Bulb* DApp example is available [here](https://github.com/completium/bulb-event-demo).\\n\\nThe bulb is switched on/off by receiving events from the bulb contract. The contract is designed as a simplistic state machine with On and Off states. Two events `SwitchedOn` and `SwitchedOff` are defined and emitted respectively by `switchOn` and `switchOff` entrypoints:\\n\\n```archetype\\narchetype bulb\\n\\nstates = | On | Off\\n\\nevent SwitchedOn {}\\n\\nevent SwitchedOff {}\\n\\ntransition switchOn() {\\n  from Off to On\\n  with effect { emit<SwitchedOn>({}) }\\n}\\n\\ntransition switchOff() {\\n  from On to Off\\n  with effect { emit<SwitchedOff>({}) }\\n}\\n```\\n\\nA live bulb demo is available [here](https://completium.github.io/bulb-event-demo/)."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"We are delighted to present this new documentation for the Archetype language.","date":"2021-08-26T00:00:00.000Z","formattedDate":"August 26, 2021","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.06,"hasTruncateMarker":false,"authors":[{"name":"Benoit Rognier","title":"CEO Completium","url":"https://www.linkedin.com/in/benoitrognier/","imageURL":"/img/blog/br.jpeg","key":"br"},{"name":"Guillaume Duhamel","title":"CTO Completium","url":"https://www.linkedin.com/in/guillaumeduhamel/","imageURL":"/img/blog/gd.jpeg","key":"gd"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["br","gd"],"tags":["hello","docusaurus"]},"prevItem":{"title":"Events","permalink":"/blog/events"}},"content":"We are delighted to present this new documentation for the [Archetype](https://archetype-lang.org/) language."}]}')}}]);