"use strict";(self.webpackChunkarchetype_docs=self.webpackChunkarchetype_docs||[]).push([[6886],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return a?n.createElement(f,l(l({ref:t},p),{},{components:a})):n.createElement(f,l({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3809:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return d}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],o={sidebar_position:2},s="Storage",c={unversionedId:"reference/declarations/storage",id:"reference/declarations/storage",title:"Storage",description:"Contract parameter",source:"@site/docs/reference/declarations/storage.md",sourceDirName:"reference/declarations",slug:"/reference/declarations/storage",permalink:"/docs/reference/declarations/storage",draft:!1,editUrl:"https://github.com/completium/archetype-docs/blob/main/docs/reference/declarations/storage.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Archetype contract",permalink:"/docs/reference/declarations/contract"},next:{title:"Composite types",permalink:"/docs/reference/declarations/compositetypes"}},p={},d=[{value:"Contract parameter",id:"contract-parameter",level:2},{value:"Variable",id:"variable",level:2},{value:"Asset",id:"asset",level:2},{value:"Asset key",id:"asset-key",level:3},{value:"Default field value",id:"default-field-value",level:3},{value:"Big map",id:"big-map",level:3},{value:"Iterable big map",id:"iterable-big-map",level:3},{value:"Initial collection",id:"initial-collection",level:3},{value:"Michelson representation",id:"michelson-representation",level:3}],u={toc:d};function m(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"storage"},"Storage"),(0,i.kt)("h2",{id:"contract-parameter"},"Contract parameter"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/declarations/contract#parameters"},"contract parameter")," is a storage element whose value is set at deployment (origination) time."),(0,i.kt)("h2",{id:"variable"},"Variable"),(0,i.kt)("p",null,"A contract variable is a storage element whose value is set at declaration time. It is declared with the ",(0,i.kt)("inlineCode",{parentName:"p"},"variable")," keyword followed by an ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/declarations/identifier"},"identifier"),", a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types"},"type")," and the initial value."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"variable counter : nat = 0\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"variable admin_candidate : option<address> = none\n")),(0,i.kt)("p",null,"The value of a storage variable may be modified by ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/instructions/assignment"},"assignment")," instructions in ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/declarations/entrypoint"},"entrypoints"),"."),(0,i.kt)("h2",{id:"asset"},"Asset"),(0,i.kt)("p",null,"An ",(0,i.kt)("a",{parentName:"p",href:"/docs/asset"},"asset")," collection is declared with the ",(0,i.kt)("inlineCode",{parentName:"p"},"asset")," keyword followed by the asset collection ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/declarations/identifier"},"identifier")," and the list of fields (identifier and type)."),(0,i.kt)("p",null,"For example, the following declares the ",(0,i.kt)("inlineCode",{parentName:"p"},"vehicle")," asset:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"asset vehicle {\n  vin          : string;\n  manufacturer : string;\n  release      : date;\n  nbdoors      : nat;\n}\n")),(0,i.kt)("h3",{id:"asset-key"},"Asset key"),(0,i.kt)("p",null,"By default, the first field serves as the asset key. Any comparable field of the asset may be declared as the asset key with the ",(0,i.kt)("inlineCode",{parentName:"p"},"identified by")," modifier; hence the declaration above is equivalent to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"asset vehicle identified by vin {\n  vin          : string;\n  /* ... */\n}\n")),(0,i.kt)("p",null,"Several fields may be declared to form the asset key; for example the ",(0,i.kt)("inlineCode",{parentName:"p"},"liquidity")," asset is identified by two fields:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"asset liquidity identified by token_id owner {\n  token_id : string;\n  owner    : address;\n  amount   : nat;\n}\n")),(0,i.kt)("p",null,"The key is then the ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#tuple"},"tuple")," of fields' value, which is in Michelson the right comb of pairs of values; for example, the expression to retrieve the amount of token ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb")," is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"var a = liquidity[(0,tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb)].amount;\n")),(0,i.kt)("p",null,"See access operator ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/expressions/asset#ak--asset_keyaf"},(0,i.kt)("inlineCode",{parentName:"a"},"[]"))," for more information."),(0,i.kt)("h3",{id:"default-field-value"},"Default field value"),(0,i.kt)("p",null,"It is possible to define a default value for an asset field; for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"asset vehicle {\n  vin          : string;\n  manufacturer : string;\n  release      : date    = now;\n  nbdoors      : nat     = 5;\n}\n")),(0,i.kt)("p",null,"Fields with default value are not required when adding a new asset in collection; for example, the following instruction adds a new ",(0,i.kt)("inlineCode",{parentName:"p"},"vehicle")," asset with release date equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"now")," and nbdoors equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"5"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'vehicle.add({ vin = "1G1AF1F57A7192174"; manufacturer = "Renault" })\n')),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/instructions/asset#aadda"},(0,i.kt)("inlineCode",{parentName:"a"},"add"))," instruction for more information."),(0,i.kt)("h3",{id:"big-map"},"Big map"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"to big_map")," modifier compiles the collection as a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#big_map%3CK,%20V%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"big_map")),"."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"asset vehicle to big_map {\n  vin          : string;\n  /* ... */\n}\n")),(0,i.kt)("h3",{id:"iterable-big-map"},"Iterable big map"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"to iterable_big_map")," modifier compiles the collection as an ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#iterable_big_map%3CK,%20V%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"iterable_big_map")),"."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"asset vehicle to iterable_big_map {\n  vin          : string;\n  /* ... */\n}\n")),(0,i.kt)("h3",{id:"initial-collection"},"Initial collection"),(0,i.kt)("p",null,"It is possible to specify the initial value of the asset collection at origination with the ",(0,i.kt)("inlineCode",{parentName:"p"},"initialized with")," modifier followed by the collection literal: a set of asset definitions."),(0,i.kt)("p",null,"For example, the following declaration initializes the vehicle asset with 2 assets:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'asset vehicle {\n  vin          : string;\n  manufacturer : string;\n  release      : date;\n  nbdoors      : nat;\n} initialized with {\n  { "1G1AF1F57A7192174"; "Renault"; 2021-06-28; 5 };\n  { "JNKCV61E49M014581"; "Peugeot"; 2021-07-12; 3 }\n}\n')),(0,i.kt)("p",null,"The initial value of an asset collection is interpreted by the completium CLI's ",(0,i.kt)("inlineCode",{parentName:"p"},"deploy")," command to set the initial storage Michelson value."),(0,i.kt)("h3",{id:"michelson-representation"},"Michelson representation"),(0,i.kt)("p",null,"The asset collection is compiled to Michelson as a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#map%3CK,%20V%3E"},"map")," (or ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#big_map%3CK,%20V%3E"},"big_map"),") of records (right comb of pairs of annotated data)."),(0,i.kt)("p",null,"An asset with only one field is compiled to a Michelson ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/types#set%3CT%3E"},"set"),"."),(0,i.kt)("p",null,"For example, the declaration above is quasi equivalent to the following lower-level code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'record vehicle_data {\n  manufacturer : string;\n  release      : date;\n  nbdoors      : nat;\n}\n\nvariable vehicle : map<string, vehicle_data> = [\n  ("1G1AF1F57A7192174", { "Renault"; 2021-06-28; 5 });\n  ("JNKCV61E49M014581", { "Peugeot"; 2021-07-12; 3 })\n]\n')))}m.isMDXComponent=!0}}]);